// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: region.proto

#ifndef PROTOBUF_INCLUDED_region_2eproto
#define PROTOBUF_INCLUDED_region_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "defs.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_region_2eproto 

namespace protobuf_region_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_region_2eproto
namespace CARTA {
class RemoveRegion;
class RemoveRegionDefaultTypeInternal;
extern RemoveRegionDefaultTypeInternal _RemoveRegion_default_instance_;
class SetRegion;
class SetRegionDefaultTypeInternal;
extern SetRegionDefaultTypeInternal _SetRegion_default_instance_;
class SetRegionAck;
class SetRegionAckDefaultTypeInternal;
extern SetRegionAckDefaultTypeInternal _SetRegionAck_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::RemoveRegion* Arena::CreateMaybeMessage<::CARTA::RemoveRegion>(Arena*);
template<> ::CARTA::SetRegion* Arena::CreateMaybeMessage<::CARTA::SetRegion>(Arena*);
template<> ::CARTA::SetRegionAck* Arena::CreateMaybeMessage<::CARTA::SetRegionAck>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class SetRegion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SetRegion) */ {
 public:
  SetRegion();
  virtual ~SetRegion();

  SetRegion(const SetRegion& from);

  inline SetRegion& operator=(const SetRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetRegion(SetRegion&& from) noexcept
    : SetRegion() {
    *this = ::std::move(from);
  }

  inline SetRegion& operator=(SetRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRegion* internal_default_instance() {
    return reinterpret_cast<const SetRegion*>(
               &_SetRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SetRegion* other);
  friend void swap(SetRegion& a, SetRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRegion* New() const final {
    return CreateMaybeMessage<SetRegion>(NULL);
  }

  SetRegion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetRegion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetRegion& from);
  void MergeFrom(const SetRegion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CARTA.RegionInfo region_info = 3;
  bool has_region_info() const;
  void clear_region_info();
  static const int kRegionInfoFieldNumber = 3;
  private:
  const ::CARTA::RegionInfo& _internal_region_info() const;
  public:
  const ::CARTA::RegionInfo& region_info() const;
  ::CARTA::RegionInfo* release_region_info();
  ::CARTA::RegionInfo* mutable_region_info();
  void set_allocated_region_info(::CARTA::RegionInfo* region_info);

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 region_id = 2;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.SetRegion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CARTA::RegionInfo* region_info_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 region_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_region_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetRegionAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SetRegionAck) */ {
 public:
  SetRegionAck();
  virtual ~SetRegionAck();

  SetRegionAck(const SetRegionAck& from);

  inline SetRegionAck& operator=(const SetRegionAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetRegionAck(SetRegionAck&& from) noexcept
    : SetRegionAck() {
    *this = ::std::move(from);
  }

  inline SetRegionAck& operator=(SetRegionAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRegionAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRegionAck* internal_default_instance() {
    return reinterpret_cast<const SetRegionAck*>(
               &_SetRegionAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SetRegionAck* other);
  friend void swap(SetRegionAck& a, SetRegionAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRegionAck* New() const final {
    return CreateMaybeMessage<SetRegionAck>(NULL);
  }

  SetRegionAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetRegionAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetRegionAck& from);
  void MergeFrom(const SetRegionAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRegionAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // sfixed32 region_id = 3;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 3;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.SetRegionAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool success_;
  ::google::protobuf::int32 region_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_region_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveRegion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.RemoveRegion) */ {
 public:
  RemoveRegion();
  virtual ~RemoveRegion();

  RemoveRegion(const RemoveRegion& from);

  inline RemoveRegion& operator=(const RemoveRegion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveRegion(RemoveRegion&& from) noexcept
    : RemoveRegion() {
    *this = ::std::move(from);
  }

  inline RemoveRegion& operator=(RemoveRegion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveRegion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRegion* internal_default_instance() {
    return reinterpret_cast<const RemoveRegion*>(
               &_RemoveRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RemoveRegion* other);
  friend void swap(RemoveRegion& a, RemoveRegion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveRegion* New() const final {
    return CreateMaybeMessage<RemoveRegion>(NULL);
  }

  RemoveRegion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRegion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveRegion& from);
  void MergeFrom(const RemoveRegion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRegion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed32 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.RemoveRegion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 region_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_region_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetRegion

// sfixed32 file_id = 1;
inline void SetRegion::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 SetRegion::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetRegion.file_id)
  return file_id_;
}
inline void SetRegion::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetRegion.file_id)
}

// sfixed32 region_id = 2;
inline void SetRegion::clear_region_id() {
  region_id_ = 0;
}
inline ::google::protobuf::int32 SetRegion::region_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetRegion.region_id)
  return region_id_;
}
inline void SetRegion::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetRegion.region_id)
}

// .CARTA.RegionInfo region_info = 3;
inline bool SetRegion::has_region_info() const {
  return this != internal_default_instance() && region_info_ != NULL;
}
inline const ::CARTA::RegionInfo& SetRegion::_internal_region_info() const {
  return *region_info_;
}
inline const ::CARTA::RegionInfo& SetRegion::region_info() const {
  const ::CARTA::RegionInfo* p = region_info_;
  // @@protoc_insertion_point(field_get:CARTA.SetRegion.region_info)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::RegionInfo*>(
      &::CARTA::_RegionInfo_default_instance_);
}
inline ::CARTA::RegionInfo* SetRegion::release_region_info() {
  // @@protoc_insertion_point(field_release:CARTA.SetRegion.region_info)
  
  ::CARTA::RegionInfo* temp = region_info_;
  region_info_ = NULL;
  return temp;
}
inline ::CARTA::RegionInfo* SetRegion::mutable_region_info() {
  
  if (region_info_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::RegionInfo>(GetArenaNoVirtual());
    region_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.SetRegion.region_info)
  return region_info_;
}
inline void SetRegion::set_allocated_region_info(::CARTA::RegionInfo* region_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(region_info_);
  }
  if (region_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region_info, submessage_arena);
    }
    
  } else {
    
  }
  region_info_ = region_info;
  // @@protoc_insertion_point(field_set_allocated:CARTA.SetRegion.region_info)
}

// -------------------------------------------------------------------

// SetRegionAck

// bool success = 1;
inline void SetRegionAck::clear_success() {
  success_ = false;
}
inline bool SetRegionAck::success() const {
  // @@protoc_insertion_point(field_get:CARTA.SetRegionAck.success)
  return success_;
}
inline void SetRegionAck::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetRegionAck.success)
}

// string message = 2;
inline void SetRegionAck::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetRegionAck::message() const {
  // @@protoc_insertion_point(field_get:CARTA.SetRegionAck.message)
  return message_.GetNoArena();
}
inline void SetRegionAck::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SetRegionAck.message)
}
#if LANG_CXX11
inline void SetRegionAck::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SetRegionAck.message)
}
#endif
inline void SetRegionAck::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SetRegionAck.message)
}
inline void SetRegionAck::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SetRegionAck.message)
}
inline ::std::string* SetRegionAck::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SetRegionAck.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetRegionAck::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.SetRegionAck.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetRegionAck::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SetRegionAck.message)
}

// sfixed32 region_id = 3;
inline void SetRegionAck::clear_region_id() {
  region_id_ = 0;
}
inline ::google::protobuf::int32 SetRegionAck::region_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetRegionAck.region_id)
  return region_id_;
}
inline void SetRegionAck::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetRegionAck.region_id)
}

// -------------------------------------------------------------------

// RemoveRegion

// sfixed32 region_id = 1;
inline void RemoveRegion::clear_region_id() {
  region_id_ = 0;
}
inline ::google::protobuf::int32 RemoveRegion::region_id() const {
  // @@protoc_insertion_point(field_get:CARTA.RemoveRegion.region_id)
  return region_id_;
}
inline void RemoveRegion::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RemoveRegion.region_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_region_2eproto
