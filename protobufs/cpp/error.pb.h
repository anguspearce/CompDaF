// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: error.proto

#ifndef PROTOBUF_INCLUDED_error_2eproto
#define PROTOBUF_INCLUDED_error_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_error_2eproto 

namespace protobuf_error_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_error_2eproto
namespace CARTA {
class ErrorData;
class ErrorDataDefaultTypeInternal;
extern ErrorDataDefaultTypeInternal _ErrorData_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::ErrorData* Arena::CreateMaybeMessage<::CARTA::ErrorData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class ErrorData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ErrorData) */ {
 public:
  ErrorData();
  virtual ~ErrorData();

  ErrorData(const ErrorData& from);

  inline ErrorData& operator=(const ErrorData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorData(ErrorData&& from) noexcept
    : ErrorData() {
    *this = ::std::move(from);
  }

  inline ErrorData& operator=(ErrorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorData* internal_default_instance() {
    return reinterpret_cast<const ErrorData*>(
               &_ErrorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ErrorData* other);
  friend void swap(ErrorData& a, ErrorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorData* New() const final {
    return CreateMaybeMessage<ErrorData>(NULL);
  }

  ErrorData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorData& from);
  void MergeFrom(const ErrorData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string tags = 2;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 2;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .CARTA.ErrorSeverity severity = 1;
  void clear_severity();
  static const int kSeverityFieldNumber = 1;
  ::CARTA::ErrorSeverity severity() const;
  void set_severity(::CARTA::ErrorSeverity value);

  // @@protoc_insertion_point(class_scope:CARTA.ErrorData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int severity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_error_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorData

// .CARTA.ErrorSeverity severity = 1;
inline void ErrorData::clear_severity() {
  severity_ = 0;
}
inline ::CARTA::ErrorSeverity ErrorData::severity() const {
  // @@protoc_insertion_point(field_get:CARTA.ErrorData.severity)
  return static_cast< ::CARTA::ErrorSeverity >(severity_);
}
inline void ErrorData::set_severity(::CARTA::ErrorSeverity value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ErrorData.severity)
}

// repeated string tags = 2;
inline int ErrorData::tags_size() const {
  return tags_.size();
}
inline void ErrorData::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& ErrorData::tags(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.ErrorData.tags)
  return tags_.Get(index);
}
inline ::std::string* ErrorData::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.ErrorData.tags)
  return tags_.Mutable(index);
}
inline void ErrorData::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CARTA.ErrorData.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ErrorData::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CARTA.ErrorData.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ErrorData::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CARTA.ErrorData.tags)
}
inline void ErrorData::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CARTA.ErrorData.tags)
}
inline ::std::string* ErrorData::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:CARTA.ErrorData.tags)
  return tags_.Add();
}
inline void ErrorData::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CARTA.ErrorData.tags)
}
#if LANG_CXX11
inline void ErrorData::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CARTA.ErrorData.tags)
}
#endif
inline void ErrorData::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CARTA.ErrorData.tags)
}
inline void ErrorData::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CARTA.ErrorData.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ErrorData::tags() const {
  // @@protoc_insertion_point(field_list:CARTA.ErrorData.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ErrorData::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.ErrorData.tags)
  return &tags_;
}

// string message = 3;
inline void ErrorData::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorData::message() const {
  // @@protoc_insertion_point(field_get:CARTA.ErrorData.message)
  return message_.GetNoArena();
}
inline void ErrorData::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ErrorData.message)
}
#if LANG_CXX11
inline void ErrorData::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ErrorData.message)
}
#endif
inline void ErrorData::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ErrorData.message)
}
inline void ErrorData::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ErrorData.message)
}
inline ::std::string* ErrorData::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ErrorData.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorData::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.ErrorData.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorData::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ErrorData.message)
}

// string data = 4;
inline void ErrorData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorData::data() const {
  // @@protoc_insertion_point(field_get:CARTA.ErrorData.data)
  return data_.GetNoArena();
}
inline void ErrorData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ErrorData.data)
}
#if LANG_CXX11
inline void ErrorData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ErrorData.data)
}
#endif
inline void ErrorData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ErrorData.data)
}
inline void ErrorData::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ErrorData.data)
}
inline ::std::string* ErrorData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ErrorData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorData::release_data() {
  // @@protoc_insertion_point(field_release:CARTA.ErrorData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ErrorData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_error_2eproto
