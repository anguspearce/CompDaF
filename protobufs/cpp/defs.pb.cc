// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: defs.proto

#include "defs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_defs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Coosys;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HeaderEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ImageBounds;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
}  // namespace protobuf_defs_2eproto
namespace CARTA {
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class FileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileInfo>
      _instance;
} _FileInfo_default_instance_;
class DirectoryInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DirectoryInfo>
      _instance;
} _DirectoryInfo_default_instance_;
class FileInfoExtendedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileInfoExtended>
      _instance;
} _FileInfoExtended_default_instance_;
class HeaderEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeaderEntry>
      _instance;
} _HeaderEntry_default_instance_;
class IntBoundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntBounds>
      _instance;
} _IntBounds_default_instance_;
class FloatBoundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FloatBounds>
      _instance;
} _FloatBounds_default_instance_;
class DoubleBoundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DoubleBounds>
      _instance;
} _DoubleBounds_default_instance_;
class ImageBoundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageBounds>
      _instance;
} _ImageBounds_default_instance_;
class AnimationFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnimationFrame>
      _instance;
} _AnimationFrame_default_instance_;
class SpatialProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpatialProfile>
      _instance;
} _SpatialProfile_default_instance_;
class SpectralProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpectralProfile>
      _instance;
} _SpectralProfile_default_instance_;
class StatisticsValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StatisticsValue>
      _instance;
} _StatisticsValue_default_instance_;
class HistogramDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Histogram>
      _instance;
} _Histogram_default_instance_;
class RegionInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegionInfo>
      _instance;
} _RegionInfo_default_instance_;
class RegionStyleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegionStyle>
      _instance;
} _RegionStyle_default_instance_;
class CatalogFileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatalogFileInfo>
      _instance;
} _CatalogFileInfo_default_instance_;
class CoosysDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Coosys>
      _instance;
} _Coosys_default_instance_;
class CatalogHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatalogHeader>
      _instance;
} _CatalogHeader_default_instance_;
class ColumnDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnData>
      _instance;
} _ColumnData_default_instance_;
class FilterConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FilterConfig>
      _instance;
} _FilterConfig_default_instance_;
class CatalogImageBoundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatalogImageBounds>
      _instance;
} _CatalogImageBounds_default_instance_;
class MatchedFrameListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MatchedFrameList>
      _instance;
} _MatchedFrameList_default_instance_;
class BeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Beam>
      _instance;
} _Beam_default_instance_;
class ListProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListProgress>
      _instance;
} _ListProgress_default_instance_;
}  // namespace CARTA
namespace protobuf_defs_2eproto {
static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_Point_default_instance_;
    new (ptr) ::CARTA::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsFileInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_FileInfo_default_instance_;
    new (ptr) ::CARTA::FileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::FileInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileInfo}, {}};

static void InitDefaultsDirectoryInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_DirectoryInfo_default_instance_;
    new (ptr) ::CARTA::DirectoryInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::DirectoryInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DirectoryInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDirectoryInfo}, {}};

static void InitDefaultsFileInfoExtended() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_FileInfoExtended_default_instance_;
    new (ptr) ::CARTA::FileInfoExtended();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::FileInfoExtended::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FileInfoExtended =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFileInfoExtended}, {
      &protobuf_defs_2eproto::scc_info_HeaderEntry.base,}};

static void InitDefaultsHeaderEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_HeaderEntry_default_instance_;
    new (ptr) ::CARTA::HeaderEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::HeaderEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeaderEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeaderEntry}, {}};

static void InitDefaultsIntBounds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_IntBounds_default_instance_;
    new (ptr) ::CARTA::IntBounds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::IntBounds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IntBounds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIntBounds}, {}};

static void InitDefaultsFloatBounds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_FloatBounds_default_instance_;
    new (ptr) ::CARTA::FloatBounds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::FloatBounds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FloatBounds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFloatBounds}, {}};

static void InitDefaultsDoubleBounds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_DoubleBounds_default_instance_;
    new (ptr) ::CARTA::DoubleBounds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::DoubleBounds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DoubleBounds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDoubleBounds}, {}};

static void InitDefaultsImageBounds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_ImageBounds_default_instance_;
    new (ptr) ::CARTA::ImageBounds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::ImageBounds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ImageBounds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsImageBounds}, {}};

static void InitDefaultsAnimationFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_AnimationFrame_default_instance_;
    new (ptr) ::CARTA::AnimationFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::AnimationFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AnimationFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAnimationFrame}, {}};

static void InitDefaultsSpatialProfile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SpatialProfile_default_instance_;
    new (ptr) ::CARTA::SpatialProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SpatialProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpatialProfile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpatialProfile}, {}};

static void InitDefaultsSpectralProfile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SpectralProfile_default_instance_;
    new (ptr) ::CARTA::SpectralProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SpectralProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpectralProfile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpectralProfile}, {}};

static void InitDefaultsStatisticsValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_StatisticsValue_default_instance_;
    new (ptr) ::CARTA::StatisticsValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::StatisticsValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StatisticsValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStatisticsValue}, {}};

static void InitDefaultsHistogram() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_Histogram_default_instance_;
    new (ptr) ::CARTA::Histogram();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::Histogram::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Histogram =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHistogram}, {}};

static void InitDefaultsRegionInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_RegionInfo_default_instance_;
    new (ptr) ::CARTA::RegionInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::RegionInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegionInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegionInfo}, {
      &protobuf_defs_2eproto::scc_info_Point.base,}};

static void InitDefaultsRegionStyle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_RegionStyle_default_instance_;
    new (ptr) ::CARTA::RegionStyle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::RegionStyle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegionStyle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegionStyle}, {}};

static void InitDefaultsCatalogFileInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_CatalogFileInfo_default_instance_;
    new (ptr) ::CARTA::CatalogFileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::CatalogFileInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CatalogFileInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCatalogFileInfo}, {
      &protobuf_defs_2eproto::scc_info_Coosys.base,}};

static void InitDefaultsCoosys() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_Coosys_default_instance_;
    new (ptr) ::CARTA::Coosys();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::Coosys::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Coosys =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCoosys}, {}};

static void InitDefaultsCatalogHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_CatalogHeader_default_instance_;
    new (ptr) ::CARTA::CatalogHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::CatalogHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CatalogHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCatalogHeader}, {}};

static void InitDefaultsColumnData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_ColumnData_default_instance_;
    new (ptr) ::CARTA::ColumnData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::ColumnData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ColumnData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsColumnData}, {}};

static void InitDefaultsFilterConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_FilterConfig_default_instance_;
    new (ptr) ::CARTA::FilterConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::FilterConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FilterConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFilterConfig}, {}};

static void InitDefaultsCatalogImageBounds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_CatalogImageBounds_default_instance_;
    new (ptr) ::CARTA::CatalogImageBounds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::CatalogImageBounds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CatalogImageBounds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCatalogImageBounds}, {
      &protobuf_defs_2eproto::scc_info_ImageBounds.base,}};

static void InitDefaultsMatchedFrameList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_MatchedFrameList_default_instance_;
    new (ptr) ::CARTA::MatchedFrameList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::MatchedFrameList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MatchedFrameList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMatchedFrameList}, {}};

static void InitDefaultsBeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_Beam_default_instance_;
    new (ptr) ::CARTA::Beam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::Beam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Beam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBeam}, {}};

static void InitDefaultsListProgress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_ListProgress_default_instance_;
    new (ptr) ::CARTA::ListProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::ListProgress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListProgress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListProgress}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DirectoryInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileInfoExtended.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeaderEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IntBounds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FloatBounds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DoubleBounds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImageBounds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnimationFrame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpatialProfile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpectralProfile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StatisticsValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Histogram.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegionInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegionStyle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CatalogFileInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Coosys.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CatalogHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ColumnData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FilterConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CatalogImageBounds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MatchedFrameList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Beam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListProgress.base);
}

::google::protobuf::Metadata file_level_metadata[25];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Point, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfo, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfo, hdu_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfo, date_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::DirectoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::DirectoryInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::DirectoryInfo, item_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::DirectoryInfo, date_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfoExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfoExtended, dimensions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfoExtended, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfoExtended, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfoExtended, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfoExtended, stokes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfoExtended, stokes_vals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfoExtended, header_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FileInfoExtended, computed_entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::HeaderEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::HeaderEntry, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::HeaderEntry, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::HeaderEntry, entry_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::HeaderEntry, numeric_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::HeaderEntry, comment_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::IntBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::IntBounds, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::IntBounds, max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FloatBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FloatBounds, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FloatBounds, max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::DoubleBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::DoubleBounds, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::DoubleBounds, max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ImageBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ImageBounds, x_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ImageBounds, x_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ImageBounds, y_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ImageBounds, y_max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AnimationFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AnimationFrame, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AnimationFrame, stokes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpatialProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpatialProfile, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpatialProfile, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpatialProfile, raw_values_fp32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpatialProfile, coordinate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpatialProfile, mip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralProfile, coordinate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralProfile, stats_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralProfile, raw_values_fp32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralProfile, raw_values_fp64_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StatisticsValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StatisticsValue, stats_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StatisticsValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Histogram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Histogram, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Histogram, num_bins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Histogram, bin_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Histogram, first_bin_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Histogram, bins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Histogram, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Histogram, std_dev_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegionInfo, region_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegionInfo, control_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegionInfo, rotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegionStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegionStyle, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegionStyle, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegionStyle, line_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegionStyle, dash_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfo, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfo, coosys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfo, date_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Coosys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Coosys, equinox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Coosys, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Coosys, system_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogHeader, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogHeader, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogHeader, column_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogHeader, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogHeader, units_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ColumnData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ColumnData, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ColumnData, string_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ColumnData, binary_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FilterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FilterConfig, column_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FilterConfig, comparison_operator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FilterConfig, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FilterConfig, secondary_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::FilterConfig, sub_string_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogImageBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogImageBounds, x_column_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogImageBounds, y_column_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogImageBounds, image_bounds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::MatchedFrameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::MatchedFrameList, frame_numbers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Beam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Beam, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Beam, stokes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Beam, major_axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Beam, minor_axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::Beam, pa_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ListProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ListProgress, file_list_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ListProgress, percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ListProgress, checked_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ListProgress, total_count_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::Point)},
  { 7, -1, sizeof(::CARTA::FileInfo)},
  { 17, -1, sizeof(::CARTA::DirectoryInfo)},
  { 25, -1, sizeof(::CARTA::FileInfoExtended)},
  { 38, -1, sizeof(::CARTA::HeaderEntry)},
  { 48, -1, sizeof(::CARTA::IntBounds)},
  { 55, -1, sizeof(::CARTA::FloatBounds)},
  { 62, -1, sizeof(::CARTA::DoubleBounds)},
  { 69, -1, sizeof(::CARTA::ImageBounds)},
  { 78, -1, sizeof(::CARTA::AnimationFrame)},
  { 85, -1, sizeof(::CARTA::SpatialProfile)},
  { 95, -1, sizeof(::CARTA::SpectralProfile)},
  { 104, -1, sizeof(::CARTA::StatisticsValue)},
  { 111, -1, sizeof(::CARTA::Histogram)},
  { 123, -1, sizeof(::CARTA::RegionInfo)},
  { 131, -1, sizeof(::CARTA::RegionStyle)},
  { 140, -1, sizeof(::CARTA::CatalogFileInfo)},
  { 151, -1, sizeof(::CARTA::Coosys)},
  { 159, -1, sizeof(::CARTA::CatalogHeader)},
  { 169, -1, sizeof(::CARTA::ColumnData)},
  { 177, -1, sizeof(::CARTA::FilterConfig)},
  { 187, -1, sizeof(::CARTA::CatalogImageBounds)},
  { 195, -1, sizeof(::CARTA::MatchedFrameList)},
  { 201, -1, sizeof(::CARTA::Beam)},
  { 211, -1, sizeof(::CARTA::ListProgress)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_FileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_DirectoryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_FileInfoExtended_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_HeaderEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_IntBounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_FloatBounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_DoubleBounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_ImageBounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_AnimationFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SpatialProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SpectralProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_StatisticsValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_Histogram_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_RegionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_RegionStyle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_CatalogFileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_Coosys_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_CatalogHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_ColumnData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_FilterConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_CatalogImageBounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_MatchedFrameList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_Beam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_ListProgress_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "defs.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ndefs.proto\022\005CARTA\032\013enums.proto\"\035\n\005Poin"
      "t\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"e\n\010FileInfo\022\014\n\004n"
      "ame\030\001 \001(\t\022\035\n\004type\030\002 \001(\0162\017.CARTA.FileType"
      "\022\014\n\004size\030\003 \001(\020\022\020\n\010HDU_list\030\004 \003(\t\022\014\n\004date"
      "\030\005 \001(\020\"\?\n\rDirectoryInfo\022\014\n\004name\030\001 \001(\t\022\022\n"
      "\nitem_count\030\002 \001(\017\022\014\n\004date\030\003 \001(\020\"\323\001\n\020File"
      "InfoExtended\022\022\n\ndimensions\030\001 \001(\017\022\r\n\005widt"
      "h\030\002 \001(\017\022\016\n\006height\030\003 \001(\017\022\r\n\005depth\030\004 \001(\017\022\016"
      "\n\006stokes\030\005 \001(\017\022\023\n\013stokes_vals\030\006 \003(\t\022*\n\016h"
      "eader_entries\030\007 \003(\0132\022.CARTA.HeaderEntry\022"
      ",\n\020computed_entries\030\010 \003(\0132\022.CARTA.Header"
      "Entry\"x\n\013HeaderEntry\022\014\n\004name\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\t\022$\n\nentry_type\030\003 \001(\0162\020.CARTA.En"
      "tryType\022\025\n\rnumeric_value\030\004 \001(\001\022\017\n\007commen"
      "t\030\005 \001(\t\"%\n\tIntBounds\022\013\n\003min\030\001 \001(\017\022\013\n\003max"
      "\030\002 \001(\017\"\'\n\013FloatBounds\022\013\n\003min\030\001 \001(\002\022\013\n\003ma"
      "x\030\002 \001(\002\"(\n\014DoubleBounds\022\013\n\003min\030\001 \001(\001\022\013\n\003"
      "max\030\002 \001(\001\"I\n\013ImageBounds\022\r\n\005x_min\030\001 \001(\017\022"
      "\r\n\005x_max\030\002 \001(\017\022\r\n\005y_min\030\003 \001(\017\022\r\n\005y_max\030\004"
      " \001(\017\"1\n\016AnimationFrame\022\017\n\007channel\030\001 \001(\017\022"
      "\016\n\006stokes\030\002 \001(\017\"f\n\016SpatialProfile\022\r\n\005sta"
      "rt\030\001 \001(\017\022\013\n\003end\030\002 \001(\017\022\027\n\017raw_values_fp32"
      "\030\003 \001(\014\022\022\n\ncoordinate\030\004 \001(\t\022\013\n\003mip\030\005 \001(\017\""
      "}\n\017SpectralProfile\022\022\n\ncoordinate\030\001 \001(\t\022$"
      "\n\nstats_type\030\002 \001(\0162\020.CARTA.StatsType\022\027\n\017"
      "raw_values_fp32\030\003 \001(\014\022\027\n\017raw_values_fp64"
      "\030\004 \001(\014\"F\n\017StatisticsValue\022$\n\nstats_type\030"
      "\001 \001(\0162\020.CARTA.StatsType\022\r\n\005value\030\002 \001(\001\"\210"
      "\001\n\tHistogram\022\017\n\007channel\030\001 \001(\017\022\020\n\010num_bin"
      "s\030\002 \001(\017\022\021\n\tbin_width\030\003 \001(\001\022\030\n\020first_bin_"
      "center\030\004 \001(\001\022\014\n\004bins\030\005 \003(\017\022\014\n\004mean\030\006 \001(\001"
      "\022\017\n\007std_dev\030\007 \001(\001\"l\n\nRegionInfo\022&\n\013regio"
      "n_type\030\001 \001(\0162\021.CARTA.RegionType\022$\n\016contr"
      "ol_points\030\002 \003(\0132\014.CARTA.Point\022\020\n\010rotatio"
      "n\030\003 \001(\002\"Q\n\013RegionStyle\022\014\n\004name\030\001 \001(\t\022\r\n\005"
      "color\030\002 \001(\t\022\022\n\nline_width\030\003 \001(\017\022\021\n\tdash_"
      "list\030\004 \003(\017\"\232\001\n\017CatalogFileInfo\022\014\n\004name\030\001"
      " \001(\t\022$\n\004type\030\002 \001(\0162\026.CARTA.CatalogFileTy"
      "pe\022\021\n\tfile_size\030\003 \001(\020\022\023\n\013description\030\004 \001"
      "(\t\022\035\n\006coosys\030\005 \003(\0132\r.CARTA.Coosys\022\014\n\004dat"
      "e\030\006 \001(\020\"8\n\006Coosys\022\017\n\007equinox\030\001 \001(\t\022\r\n\005ep"
      "och\030\002 \001(\t\022\016\n\006system\030\003 \001(\t\"}\n\rCatalogHead"
      "er\022\014\n\004name\030\001 \001(\t\022$\n\tdata_type\030\002 \001(\0162\021.CA"
      "RTA.ColumnType\022\024\n\014column_index\030\003 \001(\017\022\023\n\013"
      "description\030\005 \001(\t\022\r\n\005units\030\006 \001(\t\"\\\n\nColu"
      "mnData\022$\n\tdata_type\030\001 \001(\0162\021.CARTA.Column"
      "Type\022\023\n\013string_data\030\002 \003(\t\022\023\n\013binary_data"
      "\030\003 \001(\014\"\227\001\n\014FilterConfig\022\023\n\013column_name\030\001"
      " \001(\t\0226\n\023comparison_operator\030\002 \001(\0162\031.CART"
      "A.ComparisonOperator\022\r\n\005value\030\003 \001(\001\022\027\n\017s"
      "econdary_value\030\004 \001(\001\022\022\n\nsub_string\030\005 \001(\t"
      "\"l\n\022CatalogImageBounds\022\025\n\rx_column_name\030"
      "\001 \001(\t\022\025\n\ry_column_name\030\002 \001(\t\022(\n\014image_bo"
      "unds\030\003 \001(\0132\022.CARTA.ImageBounds\")\n\020Matche"
      "dFrameList\022\025\n\rframe_numbers\030\001 \003(\002\"[\n\004Bea"
      "m\022\017\n\007channel\030\001 \001(\017\022\016\n\006stokes\030\002 \001(\017\022\022\n\nma"
      "jor_axis\030\003 \001(\002\022\022\n\nminor_axis\030\004 \001(\002\022\n\n\002pa"
      "\030\005 \001(\002\"{\n\014ListProgress\022+\n\016file_list_type"
      "\030\001 \001(\0162\023.CARTA.FileListType\022\022\n\npercentag"
      "e\030\002 \001(\002\022\025\n\rchecked_count\030\003 \001(\017\022\023\n\013total_"
      "count\030\004 \001(\017b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "defs.proto", &protobuf_RegisterTypes);
  ::protobuf_enums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_defs_2eproto
namespace CARTA {

// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CARTA.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:CARTA.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileInfo::kNameFieldNumber;
const int FileInfo::kTypeFieldNumber;
const int FileInfo::kSizeFieldNumber;
const int FileInfo::kHDUListFieldNumber;
const int FileInfo::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileInfo::FileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_FileInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hdu_list_(from.hdu_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&size_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CARTA.FileInfo)
}

void FileInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&size_)) + sizeof(type_));
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:CARTA.FileInfo)
  SharedDtor();
}

void FileInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileInfo::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileInfo& FileInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_FileInfo.base);
  return *internal_default_instance();
}


void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdu_list_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&size_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.FileInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.FileInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.FileType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::CARTA::FileType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string HDU_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hdu_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hdu_list(this->hdu_list_size() - 1).data(),
            static_cast<int>(this->hdu_list(this->hdu_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.FileInfo.HDU_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.FileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.FileInfo)
  return false;
#undef DO_
}

void FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.FileInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .CARTA.FileType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // sfixed64 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->size(), output);
  }

  // repeated string HDU_list = 4;
  for (int i = 0, n = this->hdu_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdu_list(i).data(), static_cast<int>(this->hdu_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.FileInfo.HDU_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hdu_list(i), output);
  }

  // sfixed64 date = 5;
  if (this->date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->date(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.FileInfo)
}

::google::protobuf::uint8* FileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.FileInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .CARTA.FileType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // sfixed64 size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->size(), target);
  }

  // repeated string HDU_list = 4;
  for (int i = 0, n = this->hdu_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdu_list(i).data(), static_cast<int>(this->hdu_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.FileInfo.HDU_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->hdu_list(i), target);
  }

  // sfixed64 date = 5;
  if (this->date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->date(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.FileInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string HDU_list = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hdu_list_size());
  for (int i = 0, n = this->hdu_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hdu_list(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // sfixed64 size = 3;
  if (this->size() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 date = 5;
  if (this->date() != 0) {
    total_size += 1 + 8;
  }

  // .CARTA.FileType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.FileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.FileInfo)
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hdu_list_.MergeFrom(from.hdu_list_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.date() != 0) {
    set_date(from.date());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::Swap(FileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  hdu_list_.InternalSwap(CastToBase(&other->hdu_list_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(date_, other->date_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileInfo::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DirectoryInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectoryInfo::kNameFieldNumber;
const int DirectoryInfo::kItemCountFieldNumber;
const int DirectoryInfo::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectoryInfo::DirectoryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_DirectoryInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.DirectoryInfo)
}
DirectoryInfo::DirectoryInfo(const DirectoryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&date_, &from.date_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_count_) -
    reinterpret_cast<char*>(&date_)) + sizeof(item_count_));
  // @@protoc_insertion_point(copy_constructor:CARTA.DirectoryInfo)
}

void DirectoryInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_count_) -
      reinterpret_cast<char*>(&date_)) + sizeof(item_count_));
}

DirectoryInfo::~DirectoryInfo() {
  // @@protoc_insertion_point(destructor:CARTA.DirectoryInfo)
  SharedDtor();
}

void DirectoryInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DirectoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DirectoryInfo::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectoryInfo& DirectoryInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_DirectoryInfo.base);
  return *internal_default_instance();
}


void DirectoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.DirectoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_count_) -
      reinterpret_cast<char*>(&date_)) + sizeof(item_count_));
  _internal_metadata_.Clear();
}

bool DirectoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.DirectoryInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.DirectoryInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 item_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.DirectoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.DirectoryInfo)
  return false;
#undef DO_
}

void DirectoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.DirectoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.DirectoryInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // sfixed32 item_count = 2;
  if (this->item_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->item_count(), output);
  }

  // sfixed64 date = 3;
  if (this->date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->date(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.DirectoryInfo)
}

::google::protobuf::uint8* DirectoryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.DirectoryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.DirectoryInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // sfixed32 item_count = 2;
  if (this->item_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->item_count(), target);
  }

  // sfixed64 date = 3;
  if (this->date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->date(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.DirectoryInfo)
  return target;
}

size_t DirectoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.DirectoryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // sfixed64 date = 3;
  if (this->date() != 0) {
    total_size += 1 + 8;
  }

  // sfixed32 item_count = 2;
  if (this->item_count() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.DirectoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectoryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectoryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.DirectoryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.DirectoryInfo)
    MergeFrom(*source);
  }
}

void DirectoryInfo::MergeFrom(const DirectoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.DirectoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.date() != 0) {
    set_date(from.date());
  }
  if (from.item_count() != 0) {
    set_item_count(from.item_count());
  }
}

void DirectoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.DirectoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectoryInfo::CopyFrom(const DirectoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.DirectoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryInfo::IsInitialized() const {
  return true;
}

void DirectoryInfo::Swap(DirectoryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectoryInfo::InternalSwap(DirectoryInfo* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(date_, other->date_);
  swap(item_count_, other->item_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DirectoryInfo::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileInfoExtended::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileInfoExtended::kDimensionsFieldNumber;
const int FileInfoExtended::kWidthFieldNumber;
const int FileInfoExtended::kHeightFieldNumber;
const int FileInfoExtended::kDepthFieldNumber;
const int FileInfoExtended::kStokesFieldNumber;
const int FileInfoExtended::kStokesValsFieldNumber;
const int FileInfoExtended::kHeaderEntriesFieldNumber;
const int FileInfoExtended::kComputedEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileInfoExtended::FileInfoExtended()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_FileInfoExtended.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.FileInfoExtended)
}
FileInfoExtended::FileInfoExtended(const FileInfoExtended& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stokes_vals_(from.stokes_vals_),
      header_entries_(from.header_entries_),
      computed_entries_(from.computed_entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dimensions_, &from.dimensions_,
    static_cast<size_t>(reinterpret_cast<char*>(&stokes_) -
    reinterpret_cast<char*>(&dimensions_)) + sizeof(stokes_));
  // @@protoc_insertion_point(copy_constructor:CARTA.FileInfoExtended)
}

void FileInfoExtended::SharedCtor() {
  ::memset(&dimensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stokes_) -
      reinterpret_cast<char*>(&dimensions_)) + sizeof(stokes_));
}

FileInfoExtended::~FileInfoExtended() {
  // @@protoc_insertion_point(destructor:CARTA.FileInfoExtended)
  SharedDtor();
}

void FileInfoExtended::SharedDtor() {
}

void FileInfoExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileInfoExtended::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileInfoExtended& FileInfoExtended::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_FileInfoExtended.base);
  return *internal_default_instance();
}


void FileInfoExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.FileInfoExtended)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stokes_vals_.Clear();
  header_entries_.Clear();
  computed_entries_.Clear();
  ::memset(&dimensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stokes_) -
      reinterpret_cast<char*>(&dimensions_)) + sizeof(stokes_));
  _internal_metadata_.Clear();
}

bool FileInfoExtended::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.FileInfoExtended)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 dimensions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &dimensions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 depth = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 stokes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &stokes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string stokes_vals = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stokes_vals()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stokes_vals(this->stokes_vals_size() - 1).data(),
            static_cast<int>(this->stokes_vals(this->stokes_vals_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.FileInfoExtended.stokes_vals"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.HeaderEntry header_entries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_header_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.HeaderEntry computed_entries = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_computed_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.FileInfoExtended)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.FileInfoExtended)
  return false;
#undef DO_
}

void FileInfoExtended::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.FileInfoExtended)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 dimensions = 1;
  if (this->dimensions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->dimensions(), output);
  }

  // sfixed32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->width(), output);
  }

  // sfixed32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->height(), output);
  }

  // sfixed32 depth = 4;
  if (this->depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->depth(), output);
  }

  // sfixed32 stokes = 5;
  if (this->stokes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->stokes(), output);
  }

  // repeated string stokes_vals = 6;
  for (int i = 0, n = this->stokes_vals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stokes_vals(i).data(), static_cast<int>(this->stokes_vals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.FileInfoExtended.stokes_vals");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->stokes_vals(i), output);
  }

  // repeated .CARTA.HeaderEntry header_entries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->header_entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->header_entries(static_cast<int>(i)),
      output);
  }

  // repeated .CARTA.HeaderEntry computed_entries = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->computed_entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->computed_entries(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.FileInfoExtended)
}

::google::protobuf::uint8* FileInfoExtended::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.FileInfoExtended)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 dimensions = 1;
  if (this->dimensions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->dimensions(), target);
  }

  // sfixed32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->width(), target);
  }

  // sfixed32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->height(), target);
  }

  // sfixed32 depth = 4;
  if (this->depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->depth(), target);
  }

  // sfixed32 stokes = 5;
  if (this->stokes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->stokes(), target);
  }

  // repeated string stokes_vals = 6;
  for (int i = 0, n = this->stokes_vals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stokes_vals(i).data(), static_cast<int>(this->stokes_vals(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.FileInfoExtended.stokes_vals");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->stokes_vals(i), target);
  }

  // repeated .CARTA.HeaderEntry header_entries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->header_entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->header_entries(static_cast<int>(i)), deterministic, target);
  }

  // repeated .CARTA.HeaderEntry computed_entries = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->computed_entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->computed_entries(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.FileInfoExtended)
  return target;
}

size_t FileInfoExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.FileInfoExtended)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string stokes_vals = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stokes_vals_size());
  for (int i = 0, n = this->stokes_vals_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stokes_vals(i));
  }

  // repeated .CARTA.HeaderEntry header_entries = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->header_entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->header_entries(static_cast<int>(i)));
    }
  }

  // repeated .CARTA.HeaderEntry computed_entries = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->computed_entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->computed_entries(static_cast<int>(i)));
    }
  }

  // sfixed32 dimensions = 1;
  if (this->dimensions() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 width = 2;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 height = 3;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 depth = 4;
  if (this->depth() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 stokes = 5;
  if (this->stokes() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfoExtended::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.FileInfoExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfoExtended* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileInfoExtended>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.FileInfoExtended)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.FileInfoExtended)
    MergeFrom(*source);
  }
}

void FileInfoExtended::MergeFrom(const FileInfoExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.FileInfoExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stokes_vals_.MergeFrom(from.stokes_vals_);
  header_entries_.MergeFrom(from.header_entries_);
  computed_entries_.MergeFrom(from.computed_entries_);
  if (from.dimensions() != 0) {
    set_dimensions(from.dimensions());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.depth() != 0) {
    set_depth(from.depth());
  }
  if (from.stokes() != 0) {
    set_stokes(from.stokes());
  }
}

void FileInfoExtended::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.FileInfoExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfoExtended::CopyFrom(const FileInfoExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.FileInfoExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfoExtended::IsInitialized() const {
  return true;
}

void FileInfoExtended::Swap(FileInfoExtended* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileInfoExtended::InternalSwap(FileInfoExtended* other) {
  using std::swap;
  stokes_vals_.InternalSwap(CastToBase(&other->stokes_vals_));
  CastToBase(&header_entries_)->InternalSwap(CastToBase(&other->header_entries_));
  CastToBase(&computed_entries_)->InternalSwap(CastToBase(&other->computed_entries_));
  swap(dimensions_, other->dimensions_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(depth_, other->depth_);
  swap(stokes_, other->stokes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileInfoExtended::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeaderEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeaderEntry::kNameFieldNumber;
const int HeaderEntry::kValueFieldNumber;
const int HeaderEntry::kEntryTypeFieldNumber;
const int HeaderEntry::kNumericValueFieldNumber;
const int HeaderEntry::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeaderEntry::HeaderEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_HeaderEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.HeaderEntry)
}
HeaderEntry::HeaderEntry(const HeaderEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&numeric_value_, &from.numeric_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&entry_type_) -
    reinterpret_cast<char*>(&numeric_value_)) + sizeof(entry_type_));
  // @@protoc_insertion_point(copy_constructor:CARTA.HeaderEntry)
}

void HeaderEntry::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&numeric_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entry_type_) -
      reinterpret_cast<char*>(&numeric_value_)) + sizeof(entry_type_));
}

HeaderEntry::~HeaderEntry() {
  // @@protoc_insertion_point(destructor:CARTA.HeaderEntry)
  SharedDtor();
}

void HeaderEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeaderEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeaderEntry::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeaderEntry& HeaderEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_HeaderEntry.base);
  return *internal_default_instance();
}


void HeaderEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.HeaderEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&numeric_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entry_type_) -
      reinterpret_cast<char*>(&numeric_value_)) + sizeof(entry_type_));
  _internal_metadata_.Clear();
}

bool HeaderEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.HeaderEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.HeaderEntry.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.HeaderEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.EntryType entry_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_entry_type(static_cast< ::CARTA::EntryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double numeric_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &numeric_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.HeaderEntry.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.HeaderEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.HeaderEntry)
  return false;
#undef DO_
}

void HeaderEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.HeaderEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.HeaderEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.HeaderEntry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // .CARTA.EntryType entry_type = 3;
  if (this->entry_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->entry_type(), output);
  }

  // double numeric_value = 4;
  if (this->numeric_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->numeric_value(), output);
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.HeaderEntry.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->comment(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.HeaderEntry)
}

::google::protobuf::uint8* HeaderEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.HeaderEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.HeaderEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.HeaderEntry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // .CARTA.EntryType entry_type = 3;
  if (this->entry_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->entry_type(), target);
  }

  // double numeric_value = 4;
  if (this->numeric_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->numeric_value(), target);
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.HeaderEntry.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.HeaderEntry)
  return target;
}

size_t HeaderEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.HeaderEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string comment = 5;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // double numeric_value = 4;
  if (this->numeric_value() != 0) {
    total_size += 1 + 8;
  }

  // .CARTA.EntryType entry_type = 3;
  if (this->entry_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeaderEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.HeaderEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeaderEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.HeaderEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.HeaderEntry)
    MergeFrom(*source);
  }
}

void HeaderEntry::MergeFrom(const HeaderEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.HeaderEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.numeric_value() != 0) {
    set_numeric_value(from.numeric_value());
  }
  if (from.entry_type() != 0) {
    set_entry_type(from.entry_type());
  }
}

void HeaderEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.HeaderEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderEntry::CopyFrom(const HeaderEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.HeaderEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderEntry::IsInitialized() const {
  return true;
}

void HeaderEntry::Swap(HeaderEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeaderEntry::InternalSwap(HeaderEntry* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(numeric_value_, other->numeric_value_);
  swap(entry_type_, other->entry_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeaderEntry::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IntBounds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntBounds::kMinFieldNumber;
const int IntBounds::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntBounds::IntBounds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_IntBounds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.IntBounds)
}
IntBounds::IntBounds(const IntBounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:CARTA.IntBounds)
}

void IntBounds::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

IntBounds::~IntBounds() {
  // @@protoc_insertion_point(destructor:CARTA.IntBounds)
  SharedDtor();
}

void IntBounds::SharedDtor() {
}

void IntBounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IntBounds::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntBounds& IntBounds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_IntBounds.base);
  return *internal_default_instance();
}


void IntBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.IntBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear();
}

bool IntBounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.IntBounds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.IntBounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.IntBounds)
  return false;
#undef DO_
}

void IntBounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.IntBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->min(), output);
  }

  // sfixed32 max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.IntBounds)
}

::google::protobuf::uint8* IntBounds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.IntBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->min(), target);
  }

  // sfixed32 max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.IntBounds)
  return target;
}

size_t IntBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.IntBounds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed32 min = 1;
  if (this->min() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 max = 2;
  if (this->max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntBounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.IntBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const IntBounds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntBounds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.IntBounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.IntBounds)
    MergeFrom(*source);
  }
}

void IntBounds::MergeFrom(const IntBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.IntBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void IntBounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.IntBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntBounds::CopyFrom(const IntBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.IntBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntBounds::IsInitialized() const {
  return true;
}

void IntBounds::Swap(IntBounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntBounds::InternalSwap(IntBounds* other) {
  using std::swap;
  swap(min_, other->min_);
  swap(max_, other->max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IntBounds::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FloatBounds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatBounds::kMinFieldNumber;
const int FloatBounds::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatBounds::FloatBounds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_FloatBounds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.FloatBounds)
}
FloatBounds::FloatBounds(const FloatBounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:CARTA.FloatBounds)
}

void FloatBounds::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

FloatBounds::~FloatBounds() {
  // @@protoc_insertion_point(destructor:CARTA.FloatBounds)
  SharedDtor();
}

void FloatBounds::SharedDtor() {
}

void FloatBounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FloatBounds::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FloatBounds& FloatBounds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_FloatBounds.base);
  return *internal_default_instance();
}


void FloatBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.FloatBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear();
}

bool FloatBounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.FloatBounds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.FloatBounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.FloatBounds)
  return false;
#undef DO_
}

void FloatBounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.FloatBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // float max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.FloatBounds)
}

::google::protobuf::uint8* FloatBounds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.FloatBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // float max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.FloatBounds)
  return target;
}

size_t FloatBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.FloatBounds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float min = 1;
  if (this->min() != 0) {
    total_size += 1 + 4;
  }

  // float max = 2;
  if (this->max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatBounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.FloatBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatBounds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatBounds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.FloatBounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.FloatBounds)
    MergeFrom(*source);
  }
}

void FloatBounds::MergeFrom(const FloatBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.FloatBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void FloatBounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.FloatBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatBounds::CopyFrom(const FloatBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.FloatBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatBounds::IsInitialized() const {
  return true;
}

void FloatBounds::Swap(FloatBounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatBounds::InternalSwap(FloatBounds* other) {
  using std::swap;
  swap(min_, other->min_);
  swap(max_, other->max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FloatBounds::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DoubleBounds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleBounds::kMinFieldNumber;
const int DoubleBounds::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleBounds::DoubleBounds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_DoubleBounds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.DoubleBounds)
}
DoubleBounds::DoubleBounds(const DoubleBounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:CARTA.DoubleBounds)
}

void DoubleBounds::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

DoubleBounds::~DoubleBounds() {
  // @@protoc_insertion_point(destructor:CARTA.DoubleBounds)
  SharedDtor();
}

void DoubleBounds::SharedDtor() {
}

void DoubleBounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DoubleBounds::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DoubleBounds& DoubleBounds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_DoubleBounds.base);
  return *internal_default_instance();
}


void DoubleBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.DoubleBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear();
}

bool DoubleBounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.DoubleBounds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.DoubleBounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.DoubleBounds)
  return false;
#undef DO_
}

void DoubleBounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.DoubleBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min = 1;
  if (this->min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min(), output);
  }

  // double max = 2;
  if (this->max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.DoubleBounds)
}

::google::protobuf::uint8* DoubleBounds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.DoubleBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min = 1;
  if (this->min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min(), target);
  }

  // double max = 2;
  if (this->max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.DoubleBounds)
  return target;
}

size_t DoubleBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.DoubleBounds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double min = 1;
  if (this->min() != 0) {
    total_size += 1 + 8;
  }

  // double max = 2;
  if (this->max() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleBounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.DoubleBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleBounds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleBounds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.DoubleBounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.DoubleBounds)
    MergeFrom(*source);
  }
}

void DoubleBounds::MergeFrom(const DoubleBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.DoubleBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min() != 0) {
    set_min(from.min());
  }
  if (from.max() != 0) {
    set_max(from.max());
  }
}

void DoubleBounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.DoubleBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleBounds::CopyFrom(const DoubleBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.DoubleBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleBounds::IsInitialized() const {
  return true;
}

void DoubleBounds::Swap(DoubleBounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleBounds::InternalSwap(DoubleBounds* other) {
  using std::swap;
  swap(min_, other->min_);
  swap(max_, other->max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DoubleBounds::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageBounds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageBounds::kXMinFieldNumber;
const int ImageBounds::kXMaxFieldNumber;
const int ImageBounds::kYMinFieldNumber;
const int ImageBounds::kYMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageBounds::ImageBounds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_ImageBounds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.ImageBounds)
}
ImageBounds::ImageBounds(const ImageBounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_min_, &from.x_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_max_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  // @@protoc_insertion_point(copy_constructor:CARTA.ImageBounds)
}

void ImageBounds::SharedCtor() {
  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_max_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
}

ImageBounds::~ImageBounds() {
  // @@protoc_insertion_point(destructor:CARTA.ImageBounds)
  SharedDtor();
}

void ImageBounds::SharedDtor() {
}

void ImageBounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ImageBounds::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageBounds& ImageBounds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_ImageBounds.base);
  return *internal_default_instance();
}


void ImageBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.ImageBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_max_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  _internal_metadata_.Clear();
}

bool ImageBounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.ImageBounds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 x_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &x_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 x_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &x_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 y_min = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &y_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 y_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &y_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.ImageBounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.ImageBounds)
  return false;
#undef DO_
}

void ImageBounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.ImageBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 x_min = 1;
  if (this->x_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->x_min(), output);
  }

  // sfixed32 x_max = 2;
  if (this->x_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->x_max(), output);
  }

  // sfixed32 y_min = 3;
  if (this->y_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->y_min(), output);
  }

  // sfixed32 y_max = 4;
  if (this->y_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->y_max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.ImageBounds)
}

::google::protobuf::uint8* ImageBounds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.ImageBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 x_min = 1;
  if (this->x_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->x_min(), target);
  }

  // sfixed32 x_max = 2;
  if (this->x_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->x_max(), target);
  }

  // sfixed32 y_min = 3;
  if (this->y_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->y_min(), target);
  }

  // sfixed32 y_max = 4;
  if (this->y_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->y_max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.ImageBounds)
  return target;
}

size_t ImageBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.ImageBounds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed32 x_min = 1;
  if (this->x_min() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 x_max = 2;
  if (this->x_max() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 y_min = 3;
  if (this->y_min() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 y_max = 4;
  if (this->y_max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageBounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.ImageBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageBounds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageBounds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.ImageBounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.ImageBounds)
    MergeFrom(*source);
  }
}

void ImageBounds::MergeFrom(const ImageBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.ImageBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x_min() != 0) {
    set_x_min(from.x_min());
  }
  if (from.x_max() != 0) {
    set_x_max(from.x_max());
  }
  if (from.y_min() != 0) {
    set_y_min(from.y_min());
  }
  if (from.y_max() != 0) {
    set_y_max(from.y_max());
  }
}

void ImageBounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.ImageBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageBounds::CopyFrom(const ImageBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.ImageBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageBounds::IsInitialized() const {
  return true;
}

void ImageBounds::Swap(ImageBounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageBounds::InternalSwap(ImageBounds* other) {
  using std::swap;
  swap(x_min_, other->x_min_);
  swap(x_max_, other->x_max_);
  swap(y_min_, other->y_min_);
  swap(y_max_, other->y_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ImageBounds::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnimationFrame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnimationFrame::kChannelFieldNumber;
const int AnimationFrame::kStokesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnimationFrame::AnimationFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_AnimationFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.AnimationFrame)
}
AnimationFrame::AnimationFrame(const AnimationFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&stokes_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(stokes_));
  // @@protoc_insertion_point(copy_constructor:CARTA.AnimationFrame)
}

void AnimationFrame::SharedCtor() {
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stokes_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(stokes_));
}

AnimationFrame::~AnimationFrame() {
  // @@protoc_insertion_point(destructor:CARTA.AnimationFrame)
  SharedDtor();
}

void AnimationFrame::SharedDtor() {
}

void AnimationFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnimationFrame::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnimationFrame& AnimationFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_AnimationFrame.base);
  return *internal_default_instance();
}


void AnimationFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.AnimationFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stokes_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(stokes_));
  _internal_metadata_.Clear();
}

bool AnimationFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.AnimationFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 stokes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &stokes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.AnimationFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.AnimationFrame)
  return false;
#undef DO_
}

void AnimationFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.AnimationFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->channel(), output);
  }

  // sfixed32 stokes = 2;
  if (this->stokes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->stokes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.AnimationFrame)
}

::google::protobuf::uint8* AnimationFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.AnimationFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->channel(), target);
  }

  // sfixed32 stokes = 2;
  if (this->stokes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->stokes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.AnimationFrame)
  return target;
}

size_t AnimationFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.AnimationFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 stokes = 2;
  if (this->stokes() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimationFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.AnimationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimationFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnimationFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.AnimationFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.AnimationFrame)
    MergeFrom(*source);
  }
}

void AnimationFrame::MergeFrom(const AnimationFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.AnimationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.stokes() != 0) {
    set_stokes(from.stokes());
  }
}

void AnimationFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.AnimationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationFrame::CopyFrom(const AnimationFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.AnimationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationFrame::IsInitialized() const {
  return true;
}

void AnimationFrame::Swap(AnimationFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnimationFrame::InternalSwap(AnimationFrame* other) {
  using std::swap;
  swap(channel_, other->channel_);
  swap(stokes_, other->stokes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnimationFrame::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpatialProfile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpatialProfile::kStartFieldNumber;
const int SpatialProfile::kEndFieldNumber;
const int SpatialProfile::kRawValuesFp32FieldNumber;
const int SpatialProfile::kCoordinateFieldNumber;
const int SpatialProfile::kMipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpatialProfile::SpatialProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_SpatialProfile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SpatialProfile)
}
SpatialProfile::SpatialProfile(const SpatialProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_values_fp32_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_values_fp32().size() > 0) {
    raw_values_fp32_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_values_fp32_);
  }
  coordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.coordinate().size() > 0) {
    coordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coordinate_);
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&mip_) -
    reinterpret_cast<char*>(&start_)) + sizeof(mip_));
  // @@protoc_insertion_point(copy_constructor:CARTA.SpatialProfile)
}

void SpatialProfile::SharedCtor() {
  raw_values_fp32_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mip_) -
      reinterpret_cast<char*>(&start_)) + sizeof(mip_));
}

SpatialProfile::~SpatialProfile() {
  // @@protoc_insertion_point(destructor:CARTA.SpatialProfile)
  SharedDtor();
}

void SpatialProfile::SharedDtor() {
  raw_values_fp32_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coordinate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpatialProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpatialProfile::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpatialProfile& SpatialProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_SpatialProfile.base);
  return *internal_default_instance();
}


void SpatialProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SpatialProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_values_fp32_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mip_) -
      reinterpret_cast<char*>(&start_)) + sizeof(mip_));
  _internal_metadata_.Clear();
}

bool SpatialProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SpatialProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw_values_fp32 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_values_fp32()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string coordinate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coordinate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->coordinate().data(), static_cast<int>(this->coordinate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.SpatialProfile.coordinate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 mip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &mip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SpatialProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SpatialProfile)
  return false;
#undef DO_
}

void SpatialProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SpatialProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->start(), output);
  }

  // sfixed32 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->end(), output);
  }

  // bytes raw_values_fp32 = 3;
  if (this->raw_values_fp32().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->raw_values_fp32(), output);
  }

  // string coordinate = 4;
  if (this->coordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coordinate().data(), static_cast<int>(this->coordinate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SpatialProfile.coordinate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->coordinate(), output);
  }

  // sfixed32 mip = 5;
  if (this->mip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->mip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SpatialProfile)
}

::google::protobuf::uint8* SpatialProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SpatialProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->start(), target);
  }

  // sfixed32 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->end(), target);
  }

  // bytes raw_values_fp32 = 3;
  if (this->raw_values_fp32().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->raw_values_fp32(), target);
  }

  // string coordinate = 4;
  if (this->coordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coordinate().data(), static_cast<int>(this->coordinate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SpatialProfile.coordinate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->coordinate(), target);
  }

  // sfixed32 mip = 5;
  if (this->mip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->mip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SpatialProfile)
  return target;
}

size_t SpatialProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SpatialProfile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes raw_values_fp32 = 3;
  if (this->raw_values_fp32().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_values_fp32());
  }

  // string coordinate = 4;
  if (this->coordinate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coordinate());
  }

  // sfixed32 start = 1;
  if (this->start() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 end = 2;
  if (this->end() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 mip = 5;
  if (this->mip() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpatialProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SpatialProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const SpatialProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpatialProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SpatialProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SpatialProfile)
    MergeFrom(*source);
  }
}

void SpatialProfile::MergeFrom(const SpatialProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SpatialProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_values_fp32().size() > 0) {

    raw_values_fp32_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_values_fp32_);
  }
  if (from.coordinate().size() > 0) {

    coordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coordinate_);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.mip() != 0) {
    set_mip(from.mip());
  }
}

void SpatialProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SpatialProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpatialProfile::CopyFrom(const SpatialProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SpatialProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialProfile::IsInitialized() const {
  return true;
}

void SpatialProfile::Swap(SpatialProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpatialProfile::InternalSwap(SpatialProfile* other) {
  using std::swap;
  raw_values_fp32_.Swap(&other->raw_values_fp32_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  coordinate_.Swap(&other->coordinate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(mip_, other->mip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpatialProfile::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpectralProfile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpectralProfile::kCoordinateFieldNumber;
const int SpectralProfile::kStatsTypeFieldNumber;
const int SpectralProfile::kRawValuesFp32FieldNumber;
const int SpectralProfile::kRawValuesFp64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpectralProfile::SpectralProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_SpectralProfile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SpectralProfile)
}
SpectralProfile::SpectralProfile(const SpectralProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.coordinate().size() > 0) {
    coordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coordinate_);
  }
  raw_values_fp32_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_values_fp32().size() > 0) {
    raw_values_fp32_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_values_fp32_);
  }
  raw_values_fp64_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_values_fp64().size() > 0) {
    raw_values_fp64_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_values_fp64_);
  }
  stats_type_ = from.stats_type_;
  // @@protoc_insertion_point(copy_constructor:CARTA.SpectralProfile)
}

void SpectralProfile::SharedCtor() {
  coordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_values_fp32_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_values_fp64_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stats_type_ = 0;
}

SpectralProfile::~SpectralProfile() {
  // @@protoc_insertion_point(destructor:CARTA.SpectralProfile)
  SharedDtor();
}

void SpectralProfile::SharedDtor() {
  coordinate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_values_fp32_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_values_fp64_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpectralProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpectralProfile::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpectralProfile& SpectralProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_SpectralProfile.base);
  return *internal_default_instance();
}


void SpectralProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SpectralProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_values_fp32_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_values_fp64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stats_type_ = 0;
  _internal_metadata_.Clear();
}

bool SpectralProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SpectralProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string coordinate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coordinate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->coordinate().data(), static_cast<int>(this->coordinate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.SpectralProfile.coordinate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.StatsType stats_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stats_type(static_cast< ::CARTA::StatsType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw_values_fp32 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_values_fp32()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw_values_fp64 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_values_fp64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SpectralProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SpectralProfile)
  return false;
#undef DO_
}

void SpectralProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SpectralProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string coordinate = 1;
  if (this->coordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coordinate().data(), static_cast<int>(this->coordinate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SpectralProfile.coordinate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->coordinate(), output);
  }

  // .CARTA.StatsType stats_type = 2;
  if (this->stats_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stats_type(), output);
  }

  // bytes raw_values_fp32 = 3;
  if (this->raw_values_fp32().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->raw_values_fp32(), output);
  }

  // bytes raw_values_fp64 = 4;
  if (this->raw_values_fp64().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->raw_values_fp64(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SpectralProfile)
}

::google::protobuf::uint8* SpectralProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SpectralProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string coordinate = 1;
  if (this->coordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coordinate().data(), static_cast<int>(this->coordinate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SpectralProfile.coordinate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->coordinate(), target);
  }

  // .CARTA.StatsType stats_type = 2;
  if (this->stats_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stats_type(), target);
  }

  // bytes raw_values_fp32 = 3;
  if (this->raw_values_fp32().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->raw_values_fp32(), target);
  }

  // bytes raw_values_fp64 = 4;
  if (this->raw_values_fp64().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->raw_values_fp64(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SpectralProfile)
  return target;
}

size_t SpectralProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SpectralProfile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string coordinate = 1;
  if (this->coordinate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coordinate());
  }

  // bytes raw_values_fp32 = 3;
  if (this->raw_values_fp32().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_values_fp32());
  }

  // bytes raw_values_fp64 = 4;
  if (this->raw_values_fp64().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_values_fp64());
  }

  // .CARTA.StatsType stats_type = 2;
  if (this->stats_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpectralProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SpectralProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const SpectralProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpectralProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SpectralProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SpectralProfile)
    MergeFrom(*source);
  }
}

void SpectralProfile::MergeFrom(const SpectralProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SpectralProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coordinate().size() > 0) {

    coordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coordinate_);
  }
  if (from.raw_values_fp32().size() > 0) {

    raw_values_fp32_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_values_fp32_);
  }
  if (from.raw_values_fp64().size() > 0) {

    raw_values_fp64_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_values_fp64_);
  }
  if (from.stats_type() != 0) {
    set_stats_type(from.stats_type());
  }
}

void SpectralProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SpectralProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectralProfile::CopyFrom(const SpectralProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SpectralProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectralProfile::IsInitialized() const {
  return true;
}

void SpectralProfile::Swap(SpectralProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpectralProfile::InternalSwap(SpectralProfile* other) {
  using std::swap;
  coordinate_.Swap(&other->coordinate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_values_fp32_.Swap(&other->raw_values_fp32_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_values_fp64_.Swap(&other->raw_values_fp64_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stats_type_, other->stats_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpectralProfile::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StatisticsValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticsValue::kStatsTypeFieldNumber;
const int StatisticsValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticsValue::StatisticsValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_StatisticsValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.StatisticsValue)
}
StatisticsValue::StatisticsValue(const StatisticsValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&stats_type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(stats_type_));
  // @@protoc_insertion_point(copy_constructor:CARTA.StatisticsValue)
}

void StatisticsValue::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stats_type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(stats_type_));
}

StatisticsValue::~StatisticsValue() {
  // @@protoc_insertion_point(destructor:CARTA.StatisticsValue)
  SharedDtor();
}

void StatisticsValue::SharedDtor() {
}

void StatisticsValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StatisticsValue::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatisticsValue& StatisticsValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_StatisticsValue.base);
  return *internal_default_instance();
}


void StatisticsValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.StatisticsValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stats_type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(stats_type_));
  _internal_metadata_.Clear();
}

bool StatisticsValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.StatisticsValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CARTA.StatsType stats_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stats_type(static_cast< ::CARTA::StatsType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.StatisticsValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.StatisticsValue)
  return false;
#undef DO_
}

void StatisticsValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.StatisticsValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CARTA.StatsType stats_type = 1;
  if (this->stats_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stats_type(), output);
  }

  // double value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.StatisticsValue)
}

::google::protobuf::uint8* StatisticsValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.StatisticsValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CARTA.StatsType stats_type = 1;
  if (this->stats_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stats_type(), target);
  }

  // double value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.StatisticsValue)
  return target;
}

size_t StatisticsValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.StatisticsValue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double value = 2;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // .CARTA.StatsType stats_type = 1;
  if (this->stats_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stats_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatisticsValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.StatisticsValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticsValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatisticsValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.StatisticsValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.StatisticsValue)
    MergeFrom(*source);
  }
}

void StatisticsValue::MergeFrom(const StatisticsValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.StatisticsValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.stats_type() != 0) {
    set_stats_type(from.stats_type());
  }
}

void StatisticsValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.StatisticsValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticsValue::CopyFrom(const StatisticsValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.StatisticsValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsValue::IsInitialized() const {
  return true;
}

void StatisticsValue::Swap(StatisticsValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticsValue::InternalSwap(StatisticsValue* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(stats_type_, other->stats_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StatisticsValue::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Histogram::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Histogram::kChannelFieldNumber;
const int Histogram::kNumBinsFieldNumber;
const int Histogram::kBinWidthFieldNumber;
const int Histogram::kFirstBinCenterFieldNumber;
const int Histogram::kBinsFieldNumber;
const int Histogram::kMeanFieldNumber;
const int Histogram::kStdDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Histogram::Histogram()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_Histogram.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.Histogram)
}
Histogram::Histogram(const Histogram& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bins_(from.bins_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&std_dev_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(std_dev_));
  // @@protoc_insertion_point(copy_constructor:CARTA.Histogram)
}

void Histogram::SharedCtor() {
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&std_dev_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(std_dev_));
}

Histogram::~Histogram() {
  // @@protoc_insertion_point(destructor:CARTA.Histogram)
  SharedDtor();
}

void Histogram::SharedDtor() {
}

void Histogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Histogram::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Histogram& Histogram::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_Histogram.base);
  return *internal_default_instance();
}


void Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.Histogram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bins_.Clear();
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&std_dev_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(std_dev_));
  _internal_metadata_.Clear();
}

bool Histogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.Histogram)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 num_bins = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &num_bins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bin_width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bin_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double first_bin_center = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &first_bin_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed32 bins = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_bins())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 42u, input, this->mutable_bins())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mean = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double std_dev = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &std_dev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.Histogram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.Histogram)
  return false;
#undef DO_
}

void Histogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.Histogram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->channel(), output);
  }

  // sfixed32 num_bins = 2;
  if (this->num_bins() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->num_bins(), output);
  }

  // double bin_width = 3;
  if (this->bin_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bin_width(), output);
  }

  // double first_bin_center = 4;
  if (this->first_bin_center() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->first_bin_center(), output);
  }

  // repeated sfixed32 bins = 5;
  if (this->bins_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _bins_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32Array(
      this->bins().data(), this->bins_size(), output);
  }

  // double mean = 6;
  if (this->mean() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mean(), output);
  }

  // double std_dev = 7;
  if (this->std_dev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->std_dev(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.Histogram)
}

::google::protobuf::uint8* Histogram::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.Histogram)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->channel(), target);
  }

  // sfixed32 num_bins = 2;
  if (this->num_bins() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->num_bins(), target);
  }

  // double bin_width = 3;
  if (this->bin_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bin_width(), target);
  }

  // double first_bin_center = 4;
  if (this->first_bin_center() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->first_bin_center(), target);
  }

  // repeated sfixed32 bins = 5;
  if (this->bins_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _bins_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32NoTagToArray(this->bins_, target);
  }

  // double mean = 6;
  if (this->mean() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mean(), target);
  }

  // double std_dev = 7;
  if (this->std_dev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->std_dev(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.Histogram)
  return target;
}

size_t Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.Histogram)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated sfixed32 bins = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->bins_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bins_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 num_bins = 2;
  if (this->num_bins() != 0) {
    total_size += 1 + 4;
  }

  // double bin_width = 3;
  if (this->bin_width() != 0) {
    total_size += 1 + 8;
  }

  // double first_bin_center = 4;
  if (this->first_bin_center() != 0) {
    total_size += 1 + 8;
  }

  // double mean = 6;
  if (this->mean() != 0) {
    total_size += 1 + 8;
  }

  // double std_dev = 7;
  if (this->std_dev() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Histogram::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  const Histogram* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Histogram>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.Histogram)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.Histogram)
    MergeFrom(*source);
  }
}

void Histogram::MergeFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bins_.MergeFrom(from.bins_);
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.num_bins() != 0) {
    set_num_bins(from.num_bins());
  }
  if (from.bin_width() != 0) {
    set_bin_width(from.bin_width());
  }
  if (from.first_bin_center() != 0) {
    set_first_bin_center(from.first_bin_center());
  }
  if (from.mean() != 0) {
    set_mean(from.mean());
  }
  if (from.std_dev() != 0) {
    set_std_dev(from.std_dev());
  }
}

void Histogram::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histogram::CopyFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram::IsInitialized() const {
  return true;
}

void Histogram::Swap(Histogram* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Histogram::InternalSwap(Histogram* other) {
  using std::swap;
  bins_.InternalSwap(&other->bins_);
  swap(channel_, other->channel_);
  swap(num_bins_, other->num_bins_);
  swap(bin_width_, other->bin_width_);
  swap(first_bin_center_, other->first_bin_center_);
  swap(mean_, other->mean_);
  swap(std_dev_, other->std_dev_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Histogram::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegionInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionInfo::kRegionTypeFieldNumber;
const int RegionInfo::kControlPointsFieldNumber;
const int RegionInfo::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionInfo::RegionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_RegionInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.RegionInfo)
}
RegionInfo::RegionInfo(const RegionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      control_points_(from.control_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&region_type_, &from.region_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&region_type_)) + sizeof(rotation_));
  // @@protoc_insertion_point(copy_constructor:CARTA.RegionInfo)
}

void RegionInfo::SharedCtor() {
  ::memset(&region_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&region_type_)) + sizeof(rotation_));
}

RegionInfo::~RegionInfo() {
  // @@protoc_insertion_point(destructor:CARTA.RegionInfo)
  SharedDtor();
}

void RegionInfo::SharedDtor() {
}

void RegionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegionInfo::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionInfo& RegionInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_RegionInfo.base);
  return *internal_default_instance();
}


void RegionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.RegionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_points_.Clear();
  ::memset(&region_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&region_type_)) + sizeof(rotation_));
  _internal_metadata_.Clear();
}

bool RegionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.RegionInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CARTA.RegionType region_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_region_type(static_cast< ::CARTA::RegionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.Point control_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_control_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rotation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.RegionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.RegionInfo)
  return false;
#undef DO_
}

void RegionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.RegionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CARTA.RegionType region_type = 1;
  if (this->region_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->region_type(), output);
  }

  // repeated .CARTA.Point control_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->control_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->control_points(static_cast<int>(i)),
      output);
  }

  // float rotation = 3;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rotation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.RegionInfo)
}

::google::protobuf::uint8* RegionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.RegionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CARTA.RegionType region_type = 1;
  if (this->region_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->region_type(), target);
  }

  // repeated .CARTA.Point control_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->control_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->control_points(static_cast<int>(i)), deterministic, target);
  }

  // float rotation = 3;
  if (this->rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rotation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.RegionInfo)
  return target;
}

size_t RegionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.RegionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.Point control_points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->control_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->control_points(static_cast<int>(i)));
    }
  }

  // .CARTA.RegionType region_type = 1;
  if (this->region_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->region_type());
  }

  // float rotation = 3;
  if (this->rotation() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.RegionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.RegionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.RegionInfo)
    MergeFrom(*source);
  }
}

void RegionInfo::MergeFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.RegionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  control_points_.MergeFrom(from.control_points_);
  if (from.region_type() != 0) {
    set_region_type(from.region_type());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
}

void RegionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionInfo::CopyFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInfo::IsInitialized() const {
  return true;
}

void RegionInfo::Swap(RegionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionInfo::InternalSwap(RegionInfo* other) {
  using std::swap;
  CastToBase(&control_points_)->InternalSwap(CastToBase(&other->control_points_));
  swap(region_type_, other->region_type_);
  swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegionInfo::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegionStyle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionStyle::kNameFieldNumber;
const int RegionStyle::kColorFieldNumber;
const int RegionStyle::kLineWidthFieldNumber;
const int RegionStyle::kDashListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionStyle::RegionStyle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_RegionStyle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.RegionStyle)
}
RegionStyle::RegionStyle(const RegionStyle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dash_list_(from.dash_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.color().size() > 0) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  line_width_ = from.line_width_;
  // @@protoc_insertion_point(copy_constructor:CARTA.RegionStyle)
}

void RegionStyle::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_width_ = 0;
}

RegionStyle::~RegionStyle() {
  // @@protoc_insertion_point(destructor:CARTA.RegionStyle)
  SharedDtor();
}

void RegionStyle::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegionStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegionStyle::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionStyle& RegionStyle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_RegionStyle.base);
  return *internal_default_instance();
}


void RegionStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.RegionStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dash_list_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_width_ = 0;
  _internal_metadata_.Clear();
}

bool RegionStyle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.RegionStyle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.RegionStyle.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->color().data(), static_cast<int>(this->color().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.RegionStyle.color"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 line_width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &line_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed32 dash_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_dash_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 34u, input, this->mutable_dash_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.RegionStyle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.RegionStyle)
  return false;
#undef DO_
}

void RegionStyle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.RegionStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.RegionStyle.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string color = 2;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.RegionStyle.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->color(), output);
  }

  // sfixed32 line_width = 3;
  if (this->line_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->line_width(), output);
  }

  // repeated sfixed32 dash_list = 4;
  if (this->dash_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _dash_list_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32Array(
      this->dash_list().data(), this->dash_list_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.RegionStyle)
}

::google::protobuf::uint8* RegionStyle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.RegionStyle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.RegionStyle.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string color = 2;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.RegionStyle.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->color(), target);
  }

  // sfixed32 line_width = 3;
  if (this->line_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->line_width(), target);
  }

  // repeated sfixed32 dash_list = 4;
  if (this->dash_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _dash_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32NoTagToArray(this->dash_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.RegionStyle)
  return target;
}

size_t RegionStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.RegionStyle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated sfixed32 dash_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->dash_list_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dash_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string color = 2;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->color());
  }

  // sfixed32 line_width = 3;
  if (this->line_width() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionStyle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.RegionStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionStyle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionStyle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.RegionStyle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.RegionStyle)
    MergeFrom(*source);
  }
}

void RegionStyle::MergeFrom(const RegionStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.RegionStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dash_list_.MergeFrom(from.dash_list_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.line_width() != 0) {
    set_line_width(from.line_width());
  }
}

void RegionStyle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.RegionStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionStyle::CopyFrom(const RegionStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.RegionStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionStyle::IsInitialized() const {
  return true;
}

void RegionStyle::Swap(RegionStyle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionStyle::InternalSwap(RegionStyle* other) {
  using std::swap;
  dash_list_.InternalSwap(&other->dash_list_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color_.Swap(&other->color_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(line_width_, other->line_width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegionStyle::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CatalogFileInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatalogFileInfo::kNameFieldNumber;
const int CatalogFileInfo::kTypeFieldNumber;
const int CatalogFileInfo::kFileSizeFieldNumber;
const int CatalogFileInfo::kDescriptionFieldNumber;
const int CatalogFileInfo::kCoosysFieldNumber;
const int CatalogFileInfo::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatalogFileInfo::CatalogFileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_CatalogFileInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.CatalogFileInfo)
}
CatalogFileInfo::CatalogFileInfo(const CatalogFileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      coosys_(from.coosys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&file_size_, &from.file_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&file_size_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CARTA.CatalogFileInfo)
}

void CatalogFileInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(type_));
}

CatalogFileInfo::~CatalogFileInfo() {
  // @@protoc_insertion_point(destructor:CARTA.CatalogFileInfo)
  SharedDtor();
}

void CatalogFileInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CatalogFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CatalogFileInfo::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CatalogFileInfo& CatalogFileInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_CatalogFileInfo.base);
  return *internal_default_instance();
}


void CatalogFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.CatalogFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coosys_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&file_size_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool CatalogFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.CatalogFileInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.CatalogFileInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.CatalogFileType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::CARTA::CatalogFileType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 file_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.CatalogFileInfo.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.Coosys coosys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_coosys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 date = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.CatalogFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.CatalogFileInfo)
  return false;
#undef DO_
}

void CatalogFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.CatalogFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFileInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .CARTA.CatalogFileType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // sfixed64 file_size = 3;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->file_size(), output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFileInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // repeated .CARTA.Coosys coosys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coosys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->coosys(static_cast<int>(i)),
      output);
  }

  // sfixed64 date = 6;
  if (this->date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->date(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.CatalogFileInfo)
}

::google::protobuf::uint8* CatalogFileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.CatalogFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFileInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .CARTA.CatalogFileType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // sfixed64 file_size = 3;
  if (this->file_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->file_size(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFileInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // repeated .CARTA.Coosys coosys = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coosys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->coosys(static_cast<int>(i)), deterministic, target);
  }

  // sfixed64 date = 6;
  if (this->date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->date(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.CatalogFileInfo)
  return target;
}

size_t CatalogFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.CatalogFileInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.Coosys coosys = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->coosys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->coosys(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // sfixed64 file_size = 3;
  if (this->file_size() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 date = 6;
  if (this->date() != 0) {
    total_size += 1 + 8;
  }

  // .CARTA.CatalogFileType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.CatalogFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogFileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CatalogFileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.CatalogFileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.CatalogFileInfo)
    MergeFrom(*source);
  }
}

void CatalogFileInfo::MergeFrom(const CatalogFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.CatalogFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coosys_.MergeFrom(from.coosys_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.date() != 0) {
    set_date(from.date());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void CatalogFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.CatalogFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogFileInfo::CopyFrom(const CatalogFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.CatalogFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogFileInfo::IsInitialized() const {
  return true;
}

void CatalogFileInfo::Swap(CatalogFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatalogFileInfo::InternalSwap(CatalogFileInfo* other) {
  using std::swap;
  CastToBase(&coosys_)->InternalSwap(CastToBase(&other->coosys_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_size_, other->file_size_);
  swap(date_, other->date_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CatalogFileInfo::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Coosys::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Coosys::kEquinoxFieldNumber;
const int Coosys::kEpochFieldNumber;
const int Coosys::kSystemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Coosys::Coosys()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_Coosys.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.Coosys)
}
Coosys::Coosys(const Coosys& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  equinox_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.equinox().size() > 0) {
    equinox_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.equinox_);
  }
  epoch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.epoch().size() > 0) {
    epoch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.epoch_);
  }
  system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system().size() > 0) {
    system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
  // @@protoc_insertion_point(copy_constructor:CARTA.Coosys)
}

void Coosys::SharedCtor() {
  equinox_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epoch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Coosys::~Coosys() {
  // @@protoc_insertion_point(destructor:CARTA.Coosys)
  SharedDtor();
}

void Coosys::SharedDtor() {
  equinox_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epoch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Coosys::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Coosys::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Coosys& Coosys::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_Coosys.base);
  return *internal_default_instance();
}


void Coosys::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.Coosys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equinox_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epoch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Coosys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.Coosys)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string equinox = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equinox()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->equinox().data(), static_cast<int>(this->equinox().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.Coosys.equinox"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string epoch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_epoch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->epoch().data(), static_cast<int>(this->epoch().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.Coosys.epoch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string system = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system().data(), static_cast<int>(this->system().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.Coosys.system"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.Coosys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.Coosys)
  return false;
#undef DO_
}

void Coosys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.Coosys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string equinox = 1;
  if (this->equinox().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->equinox().data(), static_cast<int>(this->equinox().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.Coosys.equinox");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->equinox(), output);
  }

  // string epoch = 2;
  if (this->epoch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->epoch().data(), static_cast<int>(this->epoch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.Coosys.epoch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->epoch(), output);
  }

  // string system = 3;
  if (this->system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system().data(), static_cast<int>(this->system().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.Coosys.system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->system(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.Coosys)
}

::google::protobuf::uint8* Coosys::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.Coosys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string equinox = 1;
  if (this->equinox().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->equinox().data(), static_cast<int>(this->equinox().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.Coosys.equinox");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->equinox(), target);
  }

  // string epoch = 2;
  if (this->epoch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->epoch().data(), static_cast<int>(this->epoch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.Coosys.epoch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->epoch(), target);
  }

  // string system = 3;
  if (this->system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system().data(), static_cast<int>(this->system().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.Coosys.system");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->system(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.Coosys)
  return target;
}

size_t Coosys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.Coosys)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string equinox = 1;
  if (this->equinox().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->equinox());
  }

  // string epoch = 2;
  if (this->epoch().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->epoch());
  }

  // string system = 3;
  if (this->system().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coosys::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.Coosys)
  GOOGLE_DCHECK_NE(&from, this);
  const Coosys* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Coosys>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.Coosys)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.Coosys)
    MergeFrom(*source);
  }
}

void Coosys::MergeFrom(const Coosys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.Coosys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.equinox().size() > 0) {

    equinox_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.equinox_);
  }
  if (from.epoch().size() > 0) {

    epoch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.epoch_);
  }
  if (from.system().size() > 0) {

    system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_);
  }
}

void Coosys::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.Coosys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coosys::CopyFrom(const Coosys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.Coosys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coosys::IsInitialized() const {
  return true;
}

void Coosys::Swap(Coosys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Coosys::InternalSwap(Coosys* other) {
  using std::swap;
  equinox_.Swap(&other->equinox_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  epoch_.Swap(&other->epoch_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_.Swap(&other->system_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Coosys::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CatalogHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatalogHeader::kNameFieldNumber;
const int CatalogHeader::kDataTypeFieldNumber;
const int CatalogHeader::kColumnIndexFieldNumber;
const int CatalogHeader::kDescriptionFieldNumber;
const int CatalogHeader::kUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatalogHeader::CatalogHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_CatalogHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.CatalogHeader)
}
CatalogHeader::CatalogHeader(const CatalogHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.units().size() > 0) {
    units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_index_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(column_index_));
  // @@protoc_insertion_point(copy_constructor:CARTA.CatalogHeader)
}

void CatalogHeader::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_index_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(column_index_));
}

CatalogHeader::~CatalogHeader() {
  // @@protoc_insertion_point(destructor:CARTA.CatalogHeader)
  SharedDtor();
}

void CatalogHeader::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CatalogHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CatalogHeader::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CatalogHeader& CatalogHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_CatalogHeader.base);
  return *internal_default_instance();
}


void CatalogHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.CatalogHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_index_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(column_index_));
  _internal_metadata_.Clear();
}

bool CatalogHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.CatalogHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.CatalogHeader.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.ColumnType data_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::CARTA::ColumnType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 column_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &column_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.CatalogHeader.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string units = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->units().data(), static_cast<int>(this->units().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.CatalogHeader.units"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.CatalogHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.CatalogHeader)
  return false;
#undef DO_
}

void CatalogHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.CatalogHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogHeader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .CARTA.ColumnType data_type = 2;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // sfixed32 column_index = 3;
  if (this->column_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->column_index(), output);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogHeader.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // string units = 6;
  if (this->units().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogHeader.units");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->units(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.CatalogHeader)
}

::google::protobuf::uint8* CatalogHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.CatalogHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogHeader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .CARTA.ColumnType data_type = 2;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // sfixed32 column_index = 3;
  if (this->column_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->column_index(), target);
  }

  // string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogHeader.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // string units = 6;
  if (this->units().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogHeader.units");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->units(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.CatalogHeader)
  return target;
}

size_t CatalogHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.CatalogHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string units = 6;
  if (this->units().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->units());
  }

  // .CARTA.ColumnType data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // sfixed32 column_index = 3;
  if (this->column_index() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.CatalogHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CatalogHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.CatalogHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.CatalogHeader)
    MergeFrom(*source);
  }
}

void CatalogHeader::MergeFrom(const CatalogHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.CatalogHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.units().size() > 0) {

    units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.column_index() != 0) {
    set_column_index(from.column_index());
  }
}

void CatalogHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.CatalogHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogHeader::CopyFrom(const CatalogHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.CatalogHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogHeader::IsInitialized() const {
  return true;
}

void CatalogHeader::Swap(CatalogHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatalogHeader::InternalSwap(CatalogHeader* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  units_.Swap(&other->units_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_type_, other->data_type_);
  swap(column_index_, other->column_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CatalogHeader::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ColumnData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnData::kDataTypeFieldNumber;
const int ColumnData::kStringDataFieldNumber;
const int ColumnData::kBinaryDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnData::ColumnData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_ColumnData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.ColumnData)
}
ColumnData::ColumnData(const ColumnData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      string_data_(from.string_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  binary_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.binary_data().size() > 0) {
    binary_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_data_);
  }
  data_type_ = from.data_type_;
  // @@protoc_insertion_point(copy_constructor:CARTA.ColumnData)
}

void ColumnData::SharedCtor() {
  binary_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_ = 0;
}

ColumnData::~ColumnData() {
  // @@protoc_insertion_point(destructor:CARTA.ColumnData)
  SharedDtor();
}

void ColumnData::SharedDtor() {
  binary_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColumnData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ColumnData::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColumnData& ColumnData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_ColumnData.base);
  return *internal_default_instance();
}


void ColumnData::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.ColumnData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_data_.Clear();
  binary_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_ = 0;
  _internal_metadata_.Clear();
}

bool ColumnData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.ColumnData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CARTA.ColumnType data_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::CARTA::ColumnType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string string_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_data(this->string_data_size() - 1).data(),
            static_cast<int>(this->string_data(this->string_data_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.ColumnData.string_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes binary_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.ColumnData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.ColumnData)
  return false;
#undef DO_
}

void ColumnData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.ColumnData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CARTA.ColumnType data_type = 1;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->data_type(), output);
  }

  // repeated string string_data = 2;
  for (int i = 0, n = this->string_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_data(i).data(), static_cast<int>(this->string_data(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.ColumnData.string_data");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->string_data(i), output);
  }

  // bytes binary_data = 3;
  if (this->binary_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->binary_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.ColumnData)
}

::google::protobuf::uint8* ColumnData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.ColumnData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CARTA.ColumnType data_type = 1;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->data_type(), target);
  }

  // repeated string string_data = 2;
  for (int i = 0, n = this->string_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_data(i).data(), static_cast<int>(this->string_data(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.ColumnData.string_data");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->string_data(i), target);
  }

  // bytes binary_data = 3;
  if (this->binary_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->binary_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.ColumnData)
  return target;
}

size_t ColumnData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.ColumnData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string string_data = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_data_size());
  for (int i = 0, n = this->string_data_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_data(i));
  }

  // bytes binary_data = 3;
  if (this->binary_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->binary_data());
  }

  // .CARTA.ColumnType data_type = 1;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.ColumnData)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.ColumnData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.ColumnData)
    MergeFrom(*source);
  }
}

void ColumnData::MergeFrom(const ColumnData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.ColumnData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  string_data_.MergeFrom(from.string_data_);
  if (from.binary_data().size() > 0) {

    binary_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_data_);
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
}

void ColumnData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.ColumnData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnData::CopyFrom(const ColumnData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.ColumnData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnData::IsInitialized() const {
  return true;
}

void ColumnData::Swap(ColumnData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnData::InternalSwap(ColumnData* other) {
  using std::swap;
  string_data_.InternalSwap(CastToBase(&other->string_data_));
  binary_data_.Swap(&other->binary_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_type_, other->data_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ColumnData::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FilterConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilterConfig::kColumnNameFieldNumber;
const int FilterConfig::kComparisonOperatorFieldNumber;
const int FilterConfig::kValueFieldNumber;
const int FilterConfig::kSecondaryValueFieldNumber;
const int FilterConfig::kSubStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilterConfig::FilterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_FilterConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.FilterConfig)
}
FilterConfig::FilterConfig(const FilterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.column_name().size() > 0) {
    column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
  }
  sub_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sub_string().size() > 0) {
    sub_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_string_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&comparison_operator_) -
    reinterpret_cast<char*>(&value_)) + sizeof(comparison_operator_));
  // @@protoc_insertion_point(copy_constructor:CARTA.FilterConfig)
}

void FilterConfig::SharedCtor() {
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comparison_operator_) -
      reinterpret_cast<char*>(&value_)) + sizeof(comparison_operator_));
}

FilterConfig::~FilterConfig() {
  // @@protoc_insertion_point(destructor:CARTA.FilterConfig)
  SharedDtor();
}

void FilterConfig::SharedDtor() {
  column_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FilterConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FilterConfig::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FilterConfig& FilterConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_FilterConfig.base);
  return *internal_default_instance();
}


void FilterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.FilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comparison_operator_) -
      reinterpret_cast<char*>(&value_)) + sizeof(comparison_operator_));
  _internal_metadata_.Clear();
}

bool FilterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.FilterConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string column_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->column_name().data(), static_cast<int>(this->column_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.FilterConfig.column_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.ComparisonOperator comparison_operator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_comparison_operator(static_cast< ::CARTA::ComparisonOperator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double secondary_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &secondary_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_string = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sub_string().data(), static_cast<int>(this->sub_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.FilterConfig.sub_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.FilterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.FilterConfig)
  return false;
#undef DO_
}

void FilterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.FilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (this->column_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.FilterConfig.column_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->column_name(), output);
  }

  // .CARTA.ComparisonOperator comparison_operator = 2;
  if (this->comparison_operator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->comparison_operator(), output);
  }

  // double value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  // double secondary_value = 4;
  if (this->secondary_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->secondary_value(), output);
  }

  // string sub_string = 5;
  if (this->sub_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_string().data(), static_cast<int>(this->sub_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.FilterConfig.sub_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sub_string(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.FilterConfig)
}

::google::protobuf::uint8* FilterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.FilterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (this->column_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.FilterConfig.column_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->column_name(), target);
  }

  // .CARTA.ComparisonOperator comparison_operator = 2;
  if (this->comparison_operator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->comparison_operator(), target);
  }

  // double value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  // double secondary_value = 4;
  if (this->secondary_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->secondary_value(), target);
  }

  // string sub_string = 5;
  if (this->sub_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_string().data(), static_cast<int>(this->sub_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.FilterConfig.sub_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sub_string(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.FilterConfig)
  return target;
}

size_t FilterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.FilterConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string column_name = 1;
  if (this->column_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->column_name());
  }

  // string sub_string = 5;
  if (this->sub_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sub_string());
  }

  // double value = 3;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // double secondary_value = 4;
  if (this->secondary_value() != 0) {
    total_size += 1 + 8;
  }

  // .CARTA.ComparisonOperator comparison_operator = 2;
  if (this->comparison_operator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->comparison_operator());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.FilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FilterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.FilterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.FilterConfig)
    MergeFrom(*source);
  }
}

void FilterConfig::MergeFrom(const FilterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.FilterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.column_name().size() > 0) {

    column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
  }
  if (from.sub_string().size() > 0) {

    sub_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_string_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.secondary_value() != 0) {
    set_secondary_value(from.secondary_value());
  }
  if (from.comparison_operator() != 0) {
    set_comparison_operator(from.comparison_operator());
  }
}

void FilterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.FilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterConfig::CopyFrom(const FilterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.FilterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterConfig::IsInitialized() const {
  return true;
}

void FilterConfig::Swap(FilterConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilterConfig::InternalSwap(FilterConfig* other) {
  using std::swap;
  column_name_.Swap(&other->column_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sub_string_.Swap(&other->sub_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(secondary_value_, other->secondary_value_);
  swap(comparison_operator_, other->comparison_operator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FilterConfig::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CatalogImageBounds::InitAsDefaultInstance() {
  ::CARTA::_CatalogImageBounds_default_instance_._instance.get_mutable()->image_bounds_ = const_cast< ::CARTA::ImageBounds*>(
      ::CARTA::ImageBounds::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatalogImageBounds::kXColumnNameFieldNumber;
const int CatalogImageBounds::kYColumnNameFieldNumber;
const int CatalogImageBounds::kImageBoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatalogImageBounds::CatalogImageBounds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_CatalogImageBounds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.CatalogImageBounds)
}
CatalogImageBounds::CatalogImageBounds(const CatalogImageBounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  x_column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.x_column_name().size() > 0) {
    x_column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_column_name_);
  }
  y_column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.y_column_name().size() > 0) {
    y_column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_column_name_);
  }
  if (from.has_image_bounds()) {
    image_bounds_ = new ::CARTA::ImageBounds(*from.image_bounds_);
  } else {
    image_bounds_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CARTA.CatalogImageBounds)
}

void CatalogImageBounds::SharedCtor() {
  x_column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_bounds_ = NULL;
}

CatalogImageBounds::~CatalogImageBounds() {
  // @@protoc_insertion_point(destructor:CARTA.CatalogImageBounds)
  SharedDtor();
}

void CatalogImageBounds::SharedDtor() {
  x_column_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_column_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_bounds_;
}

void CatalogImageBounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CatalogImageBounds::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CatalogImageBounds& CatalogImageBounds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_CatalogImageBounds.base);
  return *internal_default_instance();
}


void CatalogImageBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.CatalogImageBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && image_bounds_ != NULL) {
    delete image_bounds_;
  }
  image_bounds_ = NULL;
  _internal_metadata_.Clear();
}

bool CatalogImageBounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.CatalogImageBounds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string x_column_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_x_column_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->x_column_name().data(), static_cast<int>(this->x_column_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.CatalogImageBounds.x_column_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string y_column_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_y_column_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->y_column_name().data(), static_cast<int>(this->y_column_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.CatalogImageBounds.y_column_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.ImageBounds image_bounds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.CatalogImageBounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.CatalogImageBounds)
  return false;
#undef DO_
}

void CatalogImageBounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.CatalogImageBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string x_column_name = 1;
  if (this->x_column_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->x_column_name().data(), static_cast<int>(this->x_column_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogImageBounds.x_column_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->x_column_name(), output);
  }

  // string y_column_name = 2;
  if (this->y_column_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->y_column_name().data(), static_cast<int>(this->y_column_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogImageBounds.y_column_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->y_column_name(), output);
  }

  // .CARTA.ImageBounds image_bounds = 3;
  if (this->has_image_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_image_bounds(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.CatalogImageBounds)
}

::google::protobuf::uint8* CatalogImageBounds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.CatalogImageBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string x_column_name = 1;
  if (this->x_column_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->x_column_name().data(), static_cast<int>(this->x_column_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogImageBounds.x_column_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->x_column_name(), target);
  }

  // string y_column_name = 2;
  if (this->y_column_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->y_column_name().data(), static_cast<int>(this->y_column_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogImageBounds.y_column_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->y_column_name(), target);
  }

  // .CARTA.ImageBounds image_bounds = 3;
  if (this->has_image_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_image_bounds(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.CatalogImageBounds)
  return target;
}

size_t CatalogImageBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.CatalogImageBounds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string x_column_name = 1;
  if (this->x_column_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->x_column_name());
  }

  // string y_column_name = 2;
  if (this->y_column_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->y_column_name());
  }

  // .CARTA.ImageBounds image_bounds = 3;
  if (this->has_image_bounds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *image_bounds_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogImageBounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.CatalogImageBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogImageBounds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CatalogImageBounds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.CatalogImageBounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.CatalogImageBounds)
    MergeFrom(*source);
  }
}

void CatalogImageBounds::MergeFrom(const CatalogImageBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.CatalogImageBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x_column_name().size() > 0) {

    x_column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_column_name_);
  }
  if (from.y_column_name().size() > 0) {

    y_column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_column_name_);
  }
  if (from.has_image_bounds()) {
    mutable_image_bounds()->::CARTA::ImageBounds::MergeFrom(from.image_bounds());
  }
}

void CatalogImageBounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.CatalogImageBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogImageBounds::CopyFrom(const CatalogImageBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.CatalogImageBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogImageBounds::IsInitialized() const {
  return true;
}

void CatalogImageBounds::Swap(CatalogImageBounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatalogImageBounds::InternalSwap(CatalogImageBounds* other) {
  using std::swap;
  x_column_name_.Swap(&other->x_column_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  y_column_name_.Swap(&other->y_column_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_bounds_, other->image_bounds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CatalogImageBounds::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MatchedFrameList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchedFrameList::kFrameNumbersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchedFrameList::MatchedFrameList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_MatchedFrameList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.MatchedFrameList)
}
MatchedFrameList::MatchedFrameList(const MatchedFrameList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      frame_numbers_(from.frame_numbers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CARTA.MatchedFrameList)
}

void MatchedFrameList::SharedCtor() {
}

MatchedFrameList::~MatchedFrameList() {
  // @@protoc_insertion_point(destructor:CARTA.MatchedFrameList)
  SharedDtor();
}

void MatchedFrameList::SharedDtor() {
}

void MatchedFrameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MatchedFrameList::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MatchedFrameList& MatchedFrameList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_MatchedFrameList.base);
  return *internal_default_instance();
}


void MatchedFrameList::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.MatchedFrameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_numbers_.Clear();
  _internal_metadata_.Clear();
}

bool MatchedFrameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.MatchedFrameList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float frame_numbers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_frame_numbers())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_frame_numbers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.MatchedFrameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.MatchedFrameList)
  return false;
#undef DO_
}

void MatchedFrameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.MatchedFrameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float frame_numbers = 1;
  if (this->frame_numbers_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _frame_numbers_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->frame_numbers().data(), this->frame_numbers_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.MatchedFrameList)
}

::google::protobuf::uint8* MatchedFrameList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.MatchedFrameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float frame_numbers = 1;
  if (this->frame_numbers_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _frame_numbers_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->frame_numbers_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.MatchedFrameList)
  return target;
}

size_t MatchedFrameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.MatchedFrameList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float frame_numbers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->frame_numbers_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _frame_numbers_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchedFrameList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.MatchedFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchedFrameList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MatchedFrameList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.MatchedFrameList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.MatchedFrameList)
    MergeFrom(*source);
  }
}

void MatchedFrameList::MergeFrom(const MatchedFrameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.MatchedFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_numbers_.MergeFrom(from.frame_numbers_);
}

void MatchedFrameList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.MatchedFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchedFrameList::CopyFrom(const MatchedFrameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.MatchedFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchedFrameList::IsInitialized() const {
  return true;
}

void MatchedFrameList::Swap(MatchedFrameList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchedFrameList::InternalSwap(MatchedFrameList* other) {
  using std::swap;
  frame_numbers_.InternalSwap(&other->frame_numbers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MatchedFrameList::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Beam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Beam::kChannelFieldNumber;
const int Beam::kStokesFieldNumber;
const int Beam::kMajorAxisFieldNumber;
const int Beam::kMinorAxisFieldNumber;
const int Beam::kPaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Beam::Beam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_Beam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.Beam)
}
Beam::Beam(const Beam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&pa_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(pa_));
  // @@protoc_insertion_point(copy_constructor:CARTA.Beam)
}

void Beam::SharedCtor() {
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pa_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(pa_));
}

Beam::~Beam() {
  // @@protoc_insertion_point(destructor:CARTA.Beam)
  SharedDtor();
}

void Beam::SharedDtor() {
}

void Beam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Beam::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Beam& Beam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_Beam.base);
  return *internal_default_instance();
}


void Beam::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.Beam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pa_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(pa_));
  _internal_metadata_.Clear();
}

bool Beam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.Beam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 stokes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &stokes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float major_axis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &major_axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float minor_axis = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minor_axis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pa = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.Beam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.Beam)
  return false;
#undef DO_
}

void Beam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.Beam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->channel(), output);
  }

  // sfixed32 stokes = 2;
  if (this->stokes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->stokes(), output);
  }

  // float major_axis = 3;
  if (this->major_axis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->major_axis(), output);
  }

  // float minor_axis = 4;
  if (this->minor_axis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->minor_axis(), output);
  }

  // float pa = 5;
  if (this->pa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pa(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.Beam)
}

::google::protobuf::uint8* Beam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.Beam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->channel(), target);
  }

  // sfixed32 stokes = 2;
  if (this->stokes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->stokes(), target);
  }

  // float major_axis = 3;
  if (this->major_axis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->major_axis(), target);
  }

  // float minor_axis = 4;
  if (this->minor_axis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->minor_axis(), target);
  }

  // float pa = 5;
  if (this->pa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pa(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.Beam)
  return target;
}

size_t Beam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.Beam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 stokes = 2;
  if (this->stokes() != 0) {
    total_size += 1 + 4;
  }

  // float major_axis = 3;
  if (this->major_axis() != 0) {
    total_size += 1 + 4;
  }

  // float minor_axis = 4;
  if (this->minor_axis() != 0) {
    total_size += 1 + 4;
  }

  // float pa = 5;
  if (this->pa() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Beam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.Beam)
  GOOGLE_DCHECK_NE(&from, this);
  const Beam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Beam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.Beam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.Beam)
    MergeFrom(*source);
  }
}

void Beam::MergeFrom(const Beam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.Beam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.stokes() != 0) {
    set_stokes(from.stokes());
  }
  if (from.major_axis() != 0) {
    set_major_axis(from.major_axis());
  }
  if (from.minor_axis() != 0) {
    set_minor_axis(from.minor_axis());
  }
  if (from.pa() != 0) {
    set_pa(from.pa());
  }
}

void Beam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.Beam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Beam::CopyFrom(const Beam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.Beam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Beam::IsInitialized() const {
  return true;
}

void Beam::Swap(Beam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Beam::InternalSwap(Beam* other) {
  using std::swap;
  swap(channel_, other->channel_);
  swap(stokes_, other->stokes_);
  swap(major_axis_, other->major_axis_);
  swap(minor_axis_, other->minor_axis_);
  swap(pa_, other->pa_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Beam::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListProgress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListProgress::kFileListTypeFieldNumber;
const int ListProgress::kPercentageFieldNumber;
const int ListProgress::kCheckedCountFieldNumber;
const int ListProgress::kTotalCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListProgress::ListProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_defs_2eproto::scc_info_ListProgress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.ListProgress)
}
ListProgress::ListProgress(const ListProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_list_type_, &from.file_list_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_count_) -
    reinterpret_cast<char*>(&file_list_type_)) + sizeof(total_count_));
  // @@protoc_insertion_point(copy_constructor:CARTA.ListProgress)
}

void ListProgress::SharedCtor() {
  ::memset(&file_list_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_count_) -
      reinterpret_cast<char*>(&file_list_type_)) + sizeof(total_count_));
}

ListProgress::~ListProgress() {
  // @@protoc_insertion_point(destructor:CARTA.ListProgress)
  SharedDtor();
}

void ListProgress::SharedDtor() {
}

void ListProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ListProgress::descriptor() {
  ::protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListProgress& ListProgress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_defs_2eproto::scc_info_ListProgress.base);
  return *internal_default_instance();
}


void ListProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.ListProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&file_list_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_count_) -
      reinterpret_cast<char*>(&file_list_type_)) + sizeof(total_count_));
  _internal_metadata_.Clear();
}

bool ListProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.ListProgress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CARTA.FileListType file_list_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_file_list_type(static_cast< ::CARTA::FileListType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float percentage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 checked_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &checked_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 total_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &total_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.ListProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.ListProgress)
  return false;
#undef DO_
}

void ListProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.ListProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CARTA.FileListType file_list_type = 1;
  if (this->file_list_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->file_list_type(), output);
  }

  // float percentage = 2;
  if (this->percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->percentage(), output);
  }

  // sfixed32 checked_count = 3;
  if (this->checked_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->checked_count(), output);
  }

  // sfixed32 total_count = 4;
  if (this->total_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->total_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.ListProgress)
}

::google::protobuf::uint8* ListProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.ListProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CARTA.FileListType file_list_type = 1;
  if (this->file_list_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->file_list_type(), target);
  }

  // float percentage = 2;
  if (this->percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->percentage(), target);
  }

  // sfixed32 checked_count = 3;
  if (this->checked_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->checked_count(), target);
  }

  // sfixed32 total_count = 4;
  if (this->total_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->total_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.ListProgress)
  return target;
}

size_t ListProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.ListProgress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .CARTA.FileListType file_list_type = 1;
  if (this->file_list_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_list_type());
  }

  // float percentage = 2;
  if (this->percentage() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 checked_count = 3;
  if (this->checked_count() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 total_count = 4;
  if (this->total_count() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.ListProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const ListProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.ListProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.ListProgress)
    MergeFrom(*source);
  }
}

void ListProgress::MergeFrom(const ListProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.ListProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_list_type() != 0) {
    set_file_list_type(from.file_list_type());
  }
  if (from.percentage() != 0) {
    set_percentage(from.percentage());
  }
  if (from.checked_count() != 0) {
    set_checked_count(from.checked_count());
  }
  if (from.total_count() != 0) {
    set_total_count(from.total_count());
  }
}

void ListProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.ListProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListProgress::CopyFrom(const ListProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.ListProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProgress::IsInitialized() const {
  return true;
}

void ListProgress::Swap(ListProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListProgress::InternalSwap(ListProgress* other) {
  using std::swap;
  swap(file_list_type_, other->file_list_type_);
  swap(percentage_, other->percentage_);
  swap(checked_count_, other->checked_count_);
  swap(total_count_, other->total_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListProgress::GetMetadata() const {
  protobuf_defs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_defs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::Point* Arena::CreateMaybeMessage< ::CARTA::Point >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::FileInfo* Arena::CreateMaybeMessage< ::CARTA::FileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::FileInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::DirectoryInfo* Arena::CreateMaybeMessage< ::CARTA::DirectoryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::DirectoryInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::FileInfoExtended* Arena::CreateMaybeMessage< ::CARTA::FileInfoExtended >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::FileInfoExtended >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::HeaderEntry* Arena::CreateMaybeMessage< ::CARTA::HeaderEntry >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::HeaderEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::IntBounds* Arena::CreateMaybeMessage< ::CARTA::IntBounds >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::IntBounds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::FloatBounds* Arena::CreateMaybeMessage< ::CARTA::FloatBounds >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::FloatBounds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::DoubleBounds* Arena::CreateMaybeMessage< ::CARTA::DoubleBounds >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::DoubleBounds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::ImageBounds* Arena::CreateMaybeMessage< ::CARTA::ImageBounds >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::ImageBounds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::AnimationFrame* Arena::CreateMaybeMessage< ::CARTA::AnimationFrame >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::AnimationFrame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SpatialProfile* Arena::CreateMaybeMessage< ::CARTA::SpatialProfile >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SpatialProfile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SpectralProfile* Arena::CreateMaybeMessage< ::CARTA::SpectralProfile >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SpectralProfile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::StatisticsValue* Arena::CreateMaybeMessage< ::CARTA::StatisticsValue >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::StatisticsValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::Histogram* Arena::CreateMaybeMessage< ::CARTA::Histogram >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::Histogram >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::RegionInfo* Arena::CreateMaybeMessage< ::CARTA::RegionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::RegionInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::RegionStyle* Arena::CreateMaybeMessage< ::CARTA::RegionStyle >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::RegionStyle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::CatalogFileInfo* Arena::CreateMaybeMessage< ::CARTA::CatalogFileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::CatalogFileInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::Coosys* Arena::CreateMaybeMessage< ::CARTA::Coosys >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::Coosys >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::CatalogHeader* Arena::CreateMaybeMessage< ::CARTA::CatalogHeader >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::CatalogHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::ColumnData* Arena::CreateMaybeMessage< ::CARTA::ColumnData >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::ColumnData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::FilterConfig* Arena::CreateMaybeMessage< ::CARTA::FilterConfig >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::FilterConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::CatalogImageBounds* Arena::CreateMaybeMessage< ::CARTA::CatalogImageBounds >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::CatalogImageBounds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::MatchedFrameList* Arena::CreateMaybeMessage< ::CARTA::MatchedFrameList >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::MatchedFrameList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::Beam* Arena::CreateMaybeMessage< ::CARTA::Beam >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::Beam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::ListProgress* Arena::CreateMaybeMessage< ::CARTA::ListProgress >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::ListProgress >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
