// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resume_session.proto

#ifndef PROTOBUF_INCLUDED_resume_5fsession_2eproto
#define PROTOBUF_INCLUDED_resume_5fsession_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "defs.pb.h"
#include "enums.pb.h"
#include "open_catalog_file.pb.h"
#include "contour.pb.h"
#include "concat_stokes_files.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_resume_5fsession_2eproto 

namespace protobuf_resume_5fsession_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_resume_5fsession_2eproto
namespace CARTA {
class ImageProperties;
class ImagePropertiesDefaultTypeInternal;
extern ImagePropertiesDefaultTypeInternal _ImageProperties_default_instance_;
class ImageProperties_RegionsEntry_DoNotUse;
class ImageProperties_RegionsEntry_DoNotUseDefaultTypeInternal;
extern ImageProperties_RegionsEntry_DoNotUseDefaultTypeInternal _ImageProperties_RegionsEntry_DoNotUse_default_instance_;
class ResumeSession;
class ResumeSessionDefaultTypeInternal;
extern ResumeSessionDefaultTypeInternal _ResumeSession_default_instance_;
class ResumeSessionAck;
class ResumeSessionAckDefaultTypeInternal;
extern ResumeSessionAckDefaultTypeInternal _ResumeSessionAck_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::ImageProperties* Arena::CreateMaybeMessage<::CARTA::ImageProperties>(Arena*);
template<> ::CARTA::ImageProperties_RegionsEntry_DoNotUse* Arena::CreateMaybeMessage<::CARTA::ImageProperties_RegionsEntry_DoNotUse>(Arena*);
template<> ::CARTA::ResumeSession* Arena::CreateMaybeMessage<::CARTA::ResumeSession>(Arena*);
template<> ::CARTA::ResumeSessionAck* Arena::CreateMaybeMessage<::CARTA::ResumeSessionAck>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class ImageProperties_RegionsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ImageProperties_RegionsEntry_DoNotUse, 
    ::google::protobuf::int32, ::CARTA::RegionInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ImageProperties_RegionsEntry_DoNotUse, 
    ::google::protobuf::int32, ::CARTA::RegionInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ImageProperties_RegionsEntry_DoNotUse();
  ImageProperties_RegionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ImageProperties_RegionsEntry_DoNotUse& other);
  static const ImageProperties_RegionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ImageProperties_RegionsEntry_DoNotUse*>(&_ImageProperties_RegionsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ImageProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ImageProperties) */ {
 public:
  ImageProperties();
  virtual ~ImageProperties();

  ImageProperties(const ImageProperties& from);

  inline ImageProperties& operator=(const ImageProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageProperties(ImageProperties&& from) noexcept
    : ImageProperties() {
    *this = ::std::move(from);
  }

  inline ImageProperties& operator=(ImageProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageProperties* internal_default_instance() {
    return reinterpret_cast<const ImageProperties*>(
               &_ImageProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ImageProperties* other);
  friend void swap(ImageProperties& a, ImageProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageProperties* New() const final {
    return CreateMaybeMessage<ImageProperties>(NULL);
  }

  ImageProperties* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageProperties>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageProperties& from);
  void MergeFrom(const ImageProperties& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<sfixed32, .CARTA.RegionInfo> regions = 8;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 8;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::RegionInfo >&
      regions() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::RegionInfo >*
      mutable_regions();

  // repeated .CARTA.StokesFile stokes_files = 10;
  int stokes_files_size() const;
  void clear_stokes_files();
  static const int kStokesFilesFieldNumber = 10;
  ::CARTA::StokesFile* mutable_stokes_files(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::StokesFile >*
      mutable_stokes_files();
  const ::CARTA::StokesFile& stokes_files(int index) const;
  ::CARTA::StokesFile* add_stokes_files();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::StokesFile >&
      stokes_files() const;

  // string directory = 1;
  void clear_directory();
  static const int kDirectoryFieldNumber = 1;
  const ::std::string& directory() const;
  void set_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_directory(::std::string&& value);
  #endif
  void set_directory(const char* value);
  void set_directory(const char* value, size_t size);
  ::std::string* mutable_directory();
  ::std::string* release_directory();
  void set_allocated_directory(::std::string* directory);

  // string file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // string hdu = 3;
  void clear_hdu();
  static const int kHduFieldNumber = 3;
  const ::std::string& hdu() const;
  void set_hdu(const ::std::string& value);
  #if LANG_CXX11
  void set_hdu(::std::string&& value);
  #endif
  void set_hdu(const char* value);
  void set_hdu(const char* value, size_t size);
  ::std::string* mutable_hdu();
  ::std::string* release_hdu();
  void set_allocated_hdu(::std::string* hdu);

  // .CARTA.SetContourParameters contour_settings = 9;
  bool has_contour_settings() const;
  void clear_contour_settings();
  static const int kContourSettingsFieldNumber = 9;
  private:
  const ::CARTA::SetContourParameters& _internal_contour_settings() const;
  public:
  const ::CARTA::SetContourParameters& contour_settings() const;
  ::CARTA::SetContourParameters* release_contour_settings();
  ::CARTA::SetContourParameters* mutable_contour_settings();
  void set_allocated_contour_settings(::CARTA::SetContourParameters* contour_settings);

  // sfixed32 file_id = 4;
  void clear_file_id();
  static const int kFileIdFieldNumber = 4;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // .CARTA.RenderMode render_mode = 5;
  void clear_render_mode();
  static const int kRenderModeFieldNumber = 5;
  ::CARTA::RenderMode render_mode() const;
  void set_render_mode(::CARTA::RenderMode value);

  // sfixed32 channel = 6;
  void clear_channel();
  static const int kChannelFieldNumber = 6;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // sfixed32 stokes = 7;
  void clear_stokes();
  static const int kStokesFieldNumber = 7;
  ::google::protobuf::int32 stokes() const;
  void set_stokes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.ImageProperties)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ImageProperties_RegionsEntry_DoNotUse,
      ::google::protobuf::int32, ::CARTA::RegionInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > regions_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::StokesFile > stokes_files_;
  ::google::protobuf::internal::ArenaStringPtr directory_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr hdu_;
  ::CARTA::SetContourParameters* contour_settings_;
  ::google::protobuf::int32 file_id_;
  int render_mode_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 stokes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resume_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResumeSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ResumeSession) */ {
 public:
  ResumeSession();
  virtual ~ResumeSession();

  ResumeSession(const ResumeSession& from);

  inline ResumeSession& operator=(const ResumeSession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResumeSession(ResumeSession&& from) noexcept
    : ResumeSession() {
    *this = ::std::move(from);
  }

  inline ResumeSession& operator=(ResumeSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResumeSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResumeSession* internal_default_instance() {
    return reinterpret_cast<const ResumeSession*>(
               &_ResumeSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ResumeSession* other);
  friend void swap(ResumeSession& a, ResumeSession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResumeSession* New() const final {
    return CreateMaybeMessage<ResumeSession>(NULL);
  }

  ResumeSession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResumeSession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResumeSession& from);
  void MergeFrom(const ResumeSession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARTA.ImageProperties images = 1;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 1;
  ::CARTA::ImageProperties* mutable_images(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::ImageProperties >*
      mutable_images();
  const ::CARTA::ImageProperties& images(int index) const;
  ::CARTA::ImageProperties* add_images();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::ImageProperties >&
      images() const;

  // repeated .CARTA.OpenCatalogFile catalog_files = 2;
  int catalog_files_size() const;
  void clear_catalog_files();
  static const int kCatalogFilesFieldNumber = 2;
  ::CARTA::OpenCatalogFile* mutable_catalog_files(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::OpenCatalogFile >*
      mutable_catalog_files();
  const ::CARTA::OpenCatalogFile& catalog_files(int index) const;
  ::CARTA::OpenCatalogFile* add_catalog_files();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::OpenCatalogFile >&
      catalog_files() const;

  // @@protoc_insertion_point(class_scope:CARTA.ResumeSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::ImageProperties > images_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::OpenCatalogFile > catalog_files_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resume_5fsession_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResumeSessionAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ResumeSessionAck) */ {
 public:
  ResumeSessionAck();
  virtual ~ResumeSessionAck();

  ResumeSessionAck(const ResumeSessionAck& from);

  inline ResumeSessionAck& operator=(const ResumeSessionAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResumeSessionAck(ResumeSessionAck&& from) noexcept
    : ResumeSessionAck() {
    *this = ::std::move(from);
  }

  inline ResumeSessionAck& operator=(ResumeSessionAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResumeSessionAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResumeSessionAck* internal_default_instance() {
    return reinterpret_cast<const ResumeSessionAck*>(
               &_ResumeSessionAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ResumeSessionAck* other);
  friend void swap(ResumeSessionAck& a, ResumeSessionAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResumeSessionAck* New() const final {
    return CreateMaybeMessage<ResumeSessionAck>(NULL);
  }

  ResumeSessionAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResumeSessionAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResumeSessionAck& from);
  void MergeFrom(const ResumeSessionAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeSessionAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:CARTA.ResumeSessionAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_resume_5fsession_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ImageProperties

// string directory = 1;
inline void ImageProperties::clear_directory() {
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageProperties::directory() const {
  // @@protoc_insertion_point(field_get:CARTA.ImageProperties.directory)
  return directory_.GetNoArena();
}
inline void ImageProperties::set_directory(const ::std::string& value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ImageProperties.directory)
}
#if LANG_CXX11
inline void ImageProperties::set_directory(::std::string&& value) {
  
  directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ImageProperties.directory)
}
#endif
inline void ImageProperties::set_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ImageProperties.directory)
}
inline void ImageProperties::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ImageProperties.directory)
}
inline ::std::string* ImageProperties::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ImageProperties.directory)
  return directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageProperties::release_directory() {
  // @@protoc_insertion_point(field_release:CARTA.ImageProperties.directory)
  
  return directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProperties::set_allocated_directory(::std::string* directory) {
  if (directory != NULL) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ImageProperties.directory)
}

// string file = 2;
inline void ImageProperties::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageProperties::file() const {
  // @@protoc_insertion_point(field_get:CARTA.ImageProperties.file)
  return file_.GetNoArena();
}
inline void ImageProperties::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ImageProperties.file)
}
#if LANG_CXX11
inline void ImageProperties::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ImageProperties.file)
}
#endif
inline void ImageProperties::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ImageProperties.file)
}
inline void ImageProperties::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ImageProperties.file)
}
inline ::std::string* ImageProperties::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ImageProperties.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageProperties::release_file() {
  // @@protoc_insertion_point(field_release:CARTA.ImageProperties.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProperties::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ImageProperties.file)
}

// string hdu = 3;
inline void ImageProperties::clear_hdu() {
  hdu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageProperties::hdu() const {
  // @@protoc_insertion_point(field_get:CARTA.ImageProperties.hdu)
  return hdu_.GetNoArena();
}
inline void ImageProperties::set_hdu(const ::std::string& value) {
  
  hdu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ImageProperties.hdu)
}
#if LANG_CXX11
inline void ImageProperties::set_hdu(::std::string&& value) {
  
  hdu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ImageProperties.hdu)
}
#endif
inline void ImageProperties::set_hdu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hdu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ImageProperties.hdu)
}
inline void ImageProperties::set_hdu(const char* value, size_t size) {
  
  hdu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ImageProperties.hdu)
}
inline ::std::string* ImageProperties::mutable_hdu() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ImageProperties.hdu)
  return hdu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageProperties::release_hdu() {
  // @@protoc_insertion_point(field_release:CARTA.ImageProperties.hdu)
  
  return hdu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageProperties::set_allocated_hdu(::std::string* hdu) {
  if (hdu != NULL) {
    
  } else {
    
  }
  hdu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hdu);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ImageProperties.hdu)
}

// sfixed32 file_id = 4;
inline void ImageProperties::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 ImageProperties::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.ImageProperties.file_id)
  return file_id_;
}
inline void ImageProperties::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ImageProperties.file_id)
}

// .CARTA.RenderMode render_mode = 5;
inline void ImageProperties::clear_render_mode() {
  render_mode_ = 0;
}
inline ::CARTA::RenderMode ImageProperties::render_mode() const {
  // @@protoc_insertion_point(field_get:CARTA.ImageProperties.render_mode)
  return static_cast< ::CARTA::RenderMode >(render_mode_);
}
inline void ImageProperties::set_render_mode(::CARTA::RenderMode value) {
  
  render_mode_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ImageProperties.render_mode)
}

// sfixed32 channel = 6;
inline void ImageProperties::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 ImageProperties::channel() const {
  // @@protoc_insertion_point(field_get:CARTA.ImageProperties.channel)
  return channel_;
}
inline void ImageProperties::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ImageProperties.channel)
}

// sfixed32 stokes = 7;
inline void ImageProperties::clear_stokes() {
  stokes_ = 0;
}
inline ::google::protobuf::int32 ImageProperties::stokes() const {
  // @@protoc_insertion_point(field_get:CARTA.ImageProperties.stokes)
  return stokes_;
}
inline void ImageProperties::set_stokes(::google::protobuf::int32 value) {
  
  stokes_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ImageProperties.stokes)
}

// map<sfixed32, .CARTA.RegionInfo> regions = 8;
inline int ImageProperties::regions_size() const {
  return regions_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::RegionInfo >&
ImageProperties::regions() const {
  // @@protoc_insertion_point(field_map:CARTA.ImageProperties.regions)
  return regions_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::RegionInfo >*
ImageProperties::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_map:CARTA.ImageProperties.regions)
  return regions_.MutableMap();
}

// .CARTA.SetContourParameters contour_settings = 9;
inline bool ImageProperties::has_contour_settings() const {
  return this != internal_default_instance() && contour_settings_ != NULL;
}
inline const ::CARTA::SetContourParameters& ImageProperties::_internal_contour_settings() const {
  return *contour_settings_;
}
inline const ::CARTA::SetContourParameters& ImageProperties::contour_settings() const {
  const ::CARTA::SetContourParameters* p = contour_settings_;
  // @@protoc_insertion_point(field_get:CARTA.ImageProperties.contour_settings)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::SetContourParameters*>(
      &::CARTA::_SetContourParameters_default_instance_);
}
inline ::CARTA::SetContourParameters* ImageProperties::release_contour_settings() {
  // @@protoc_insertion_point(field_release:CARTA.ImageProperties.contour_settings)
  
  ::CARTA::SetContourParameters* temp = contour_settings_;
  contour_settings_ = NULL;
  return temp;
}
inline ::CARTA::SetContourParameters* ImageProperties::mutable_contour_settings() {
  
  if (contour_settings_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::SetContourParameters>(GetArenaNoVirtual());
    contour_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.ImageProperties.contour_settings)
  return contour_settings_;
}
inline void ImageProperties::set_allocated_contour_settings(::CARTA::SetContourParameters* contour_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(contour_settings_);
  }
  if (contour_settings) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      contour_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, contour_settings, submessage_arena);
    }
    
  } else {
    
  }
  contour_settings_ = contour_settings;
  // @@protoc_insertion_point(field_set_allocated:CARTA.ImageProperties.contour_settings)
}

// repeated .CARTA.StokesFile stokes_files = 10;
inline int ImageProperties::stokes_files_size() const {
  return stokes_files_.size();
}
inline ::CARTA::StokesFile* ImageProperties::mutable_stokes_files(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.ImageProperties.stokes_files)
  return stokes_files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::StokesFile >*
ImageProperties::mutable_stokes_files() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.ImageProperties.stokes_files)
  return &stokes_files_;
}
inline const ::CARTA::StokesFile& ImageProperties::stokes_files(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.ImageProperties.stokes_files)
  return stokes_files_.Get(index);
}
inline ::CARTA::StokesFile* ImageProperties::add_stokes_files() {
  // @@protoc_insertion_point(field_add:CARTA.ImageProperties.stokes_files)
  return stokes_files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::StokesFile >&
ImageProperties::stokes_files() const {
  // @@protoc_insertion_point(field_list:CARTA.ImageProperties.stokes_files)
  return stokes_files_;
}

// -------------------------------------------------------------------

// ResumeSession

// repeated .CARTA.ImageProperties images = 1;
inline int ResumeSession::images_size() const {
  return images_.size();
}
inline void ResumeSession::clear_images() {
  images_.Clear();
}
inline ::CARTA::ImageProperties* ResumeSession::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.ResumeSession.images)
  return images_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::ImageProperties >*
ResumeSession::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.ResumeSession.images)
  return &images_;
}
inline const ::CARTA::ImageProperties& ResumeSession::images(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.ResumeSession.images)
  return images_.Get(index);
}
inline ::CARTA::ImageProperties* ResumeSession::add_images() {
  // @@protoc_insertion_point(field_add:CARTA.ResumeSession.images)
  return images_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::ImageProperties >&
ResumeSession::images() const {
  // @@protoc_insertion_point(field_list:CARTA.ResumeSession.images)
  return images_;
}

// repeated .CARTA.OpenCatalogFile catalog_files = 2;
inline int ResumeSession::catalog_files_size() const {
  return catalog_files_.size();
}
inline ::CARTA::OpenCatalogFile* ResumeSession::mutable_catalog_files(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.ResumeSession.catalog_files)
  return catalog_files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::OpenCatalogFile >*
ResumeSession::mutable_catalog_files() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.ResumeSession.catalog_files)
  return &catalog_files_;
}
inline const ::CARTA::OpenCatalogFile& ResumeSession::catalog_files(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.ResumeSession.catalog_files)
  return catalog_files_.Get(index);
}
inline ::CARTA::OpenCatalogFile* ResumeSession::add_catalog_files() {
  // @@protoc_insertion_point(field_add:CARTA.ResumeSession.catalog_files)
  return catalog_files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::OpenCatalogFile >&
ResumeSession::catalog_files() const {
  // @@protoc_insertion_point(field_list:CARTA.ResumeSession.catalog_files)
  return catalog_files_;
}

// -------------------------------------------------------------------

// ResumeSessionAck

// bool success = 1;
inline void ResumeSessionAck::clear_success() {
  success_ = false;
}
inline bool ResumeSessionAck::success() const {
  // @@protoc_insertion_point(field_get:CARTA.ResumeSessionAck.success)
  return success_;
}
inline void ResumeSessionAck::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ResumeSessionAck.success)
}

// string message = 2;
inline void ResumeSessionAck::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResumeSessionAck::message() const {
  // @@protoc_insertion_point(field_get:CARTA.ResumeSessionAck.message)
  return message_.GetNoArena();
}
inline void ResumeSessionAck::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ResumeSessionAck.message)
}
#if LANG_CXX11
inline void ResumeSessionAck::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ResumeSessionAck.message)
}
#endif
inline void ResumeSessionAck::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ResumeSessionAck.message)
}
inline void ResumeSessionAck::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ResumeSessionAck.message)
}
inline ::std::string* ResumeSessionAck::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ResumeSessionAck.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResumeSessionAck::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.ResumeSessionAck.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResumeSessionAck::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ResumeSessionAck.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_resume_5fsession_2eproto
