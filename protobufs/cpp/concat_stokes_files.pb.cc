// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concat_stokes_files.proto

#include "concat_stokes_files.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_concat_5fstokes_5ffiles_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_concat_5fstokes_5ffiles_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StokesFile;
}  // namespace protobuf_concat_5fstokes_5ffiles_2eproto
namespace protobuf_open_5ffile_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_open_5ffile_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_OpenFileAck;
}  // namespace protobuf_open_5ffile_2eproto
namespace CARTA {
class ConcatStokesFilesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConcatStokesFiles>
      _instance;
} _ConcatStokesFiles_default_instance_;
class StokesFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StokesFile>
      _instance;
} _StokesFile_default_instance_;
class ConcatStokesFilesAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConcatStokesFilesAck>
      _instance;
} _ConcatStokesFilesAck_default_instance_;
}  // namespace CARTA
namespace protobuf_concat_5fstokes_5ffiles_2eproto {
static void InitDefaultsConcatStokesFiles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_ConcatStokesFiles_default_instance_;
    new (ptr) ::CARTA::ConcatStokesFiles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::ConcatStokesFiles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConcatStokesFiles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConcatStokesFiles}, {
      &protobuf_concat_5fstokes_5ffiles_2eproto::scc_info_StokesFile.base,}};

static void InitDefaultsStokesFile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_StokesFile_default_instance_;
    new (ptr) ::CARTA::StokesFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::StokesFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StokesFile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStokesFile}, {}};

static void InitDefaultsConcatStokesFilesAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_ConcatStokesFilesAck_default_instance_;
    new (ptr) ::CARTA::ConcatStokesFilesAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::ConcatStokesFilesAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConcatStokesFilesAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConcatStokesFilesAck}, {
      &protobuf_open_5ffile_2eproto::scc_info_OpenFileAck.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConcatStokesFiles.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StokesFile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConcatStokesFilesAck.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ConcatStokesFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ConcatStokesFiles, stokes_files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ConcatStokesFiles, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ConcatStokesFiles, render_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StokesFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StokesFile, directory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StokesFile, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StokesFile, hdu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StokesFile, stokes_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ConcatStokesFilesAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ConcatStokesFilesAck, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ConcatStokesFilesAck, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ConcatStokesFilesAck, open_file_ack_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::ConcatStokesFiles)},
  { 8, -1, sizeof(::CARTA::StokesFile)},
  { 17, -1, sizeof(::CARTA::ConcatStokesFilesAck)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_ConcatStokesFiles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_StokesFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_ConcatStokesFilesAck_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "concat_stokes_files.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031concat_stokes_files.proto\022\005CARTA\032\013enum"
      "s.proto\032\017open_file.proto\"u\n\021ConcatStokes"
      "Files\022\'\n\014stokes_files\030\001 \003(\0132\021.CARTA.Stok"
      "esFile\022\017\n\007file_id\030\002 \001(\017\022&\n\013render_mode\030\003"
      " \001(\0162\021.CARTA.RenderMode\"b\n\nStokesFile\022\021\n"
      "\tdirectory\030\001 \001(\t\022\014\n\004file\030\002 \001(\t\022\013\n\003hdu\030\003 "
      "\001(\t\022&\n\013stokes_type\030\004 \001(\0162\021.CARTA.StokesT"
      "ype\"c\n\024ConcatStokesFilesAck\022\017\n\007success\030\001"
      " \001(\010\022\017\n\007message\030\002 \001(\t\022)\n\ropen_file_ack\030\003"
      " \001(\0132\022.CARTA.OpenFileAckb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "concat_stokes_files.proto", &protobuf_RegisterTypes);
  ::protobuf_enums_2eproto::AddDescriptors();
  ::protobuf_open_5ffile_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_concat_5fstokes_5ffiles_2eproto
namespace CARTA {

// ===================================================================

void ConcatStokesFiles::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConcatStokesFiles::kStokesFilesFieldNumber;
const int ConcatStokesFiles::kFileIdFieldNumber;
const int ConcatStokesFiles::kRenderModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConcatStokesFiles::ConcatStokesFiles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_concat_5fstokes_5ffiles_2eproto::scc_info_ConcatStokesFiles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.ConcatStokesFiles)
}
ConcatStokesFiles::ConcatStokesFiles(const ConcatStokesFiles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stokes_files_(from.stokes_files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&render_mode_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(render_mode_));
  // @@protoc_insertion_point(copy_constructor:CARTA.ConcatStokesFiles)
}

void ConcatStokesFiles::SharedCtor() {
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&render_mode_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(render_mode_));
}

ConcatStokesFiles::~ConcatStokesFiles() {
  // @@protoc_insertion_point(destructor:CARTA.ConcatStokesFiles)
  SharedDtor();
}

void ConcatStokesFiles::SharedDtor() {
}

void ConcatStokesFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConcatStokesFiles::descriptor() {
  ::protobuf_concat_5fstokes_5ffiles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_concat_5fstokes_5ffiles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConcatStokesFiles& ConcatStokesFiles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_concat_5fstokes_5ffiles_2eproto::scc_info_ConcatStokesFiles.base);
  return *internal_default_instance();
}


void ConcatStokesFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.ConcatStokesFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stokes_files_.Clear();
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&render_mode_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(render_mode_));
  _internal_metadata_.Clear();
}

bool ConcatStokesFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.ConcatStokesFiles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CARTA.StokesFile stokes_files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stokes_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 file_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.RenderMode render_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_render_mode(static_cast< ::CARTA::RenderMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.ConcatStokesFiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.ConcatStokesFiles)
  return false;
#undef DO_
}

void ConcatStokesFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.ConcatStokesFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CARTA.StokesFile stokes_files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stokes_files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->stokes_files(static_cast<int>(i)),
      output);
  }

  // sfixed32 file_id = 2;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->file_id(), output);
  }

  // .CARTA.RenderMode render_mode = 3;
  if (this->render_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->render_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.ConcatStokesFiles)
}

::google::protobuf::uint8* ConcatStokesFiles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.ConcatStokesFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CARTA.StokesFile stokes_files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stokes_files_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->stokes_files(static_cast<int>(i)), deterministic, target);
  }

  // sfixed32 file_id = 2;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->file_id(), target);
  }

  // .CARTA.RenderMode render_mode = 3;
  if (this->render_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->render_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.ConcatStokesFiles)
  return target;
}

size_t ConcatStokesFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.ConcatStokesFiles)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.StokesFile stokes_files = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stokes_files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stokes_files(static_cast<int>(i)));
    }
  }

  // sfixed32 file_id = 2;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // .CARTA.RenderMode render_mode = 3;
  if (this->render_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->render_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConcatStokesFiles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.ConcatStokesFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatStokesFiles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConcatStokesFiles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.ConcatStokesFiles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.ConcatStokesFiles)
    MergeFrom(*source);
  }
}

void ConcatStokesFiles::MergeFrom(const ConcatStokesFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.ConcatStokesFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stokes_files_.MergeFrom(from.stokes_files_);
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.render_mode() != 0) {
    set_render_mode(from.render_mode());
  }
}

void ConcatStokesFiles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.ConcatStokesFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatStokesFiles::CopyFrom(const ConcatStokesFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.ConcatStokesFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatStokesFiles::IsInitialized() const {
  return true;
}

void ConcatStokesFiles::Swap(ConcatStokesFiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConcatStokesFiles::InternalSwap(ConcatStokesFiles* other) {
  using std::swap;
  CastToBase(&stokes_files_)->InternalSwap(CastToBase(&other->stokes_files_));
  swap(file_id_, other->file_id_);
  swap(render_mode_, other->render_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConcatStokesFiles::GetMetadata() const {
  protobuf_concat_5fstokes_5ffiles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_concat_5fstokes_5ffiles_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StokesFile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StokesFile::kDirectoryFieldNumber;
const int StokesFile::kFileFieldNumber;
const int StokesFile::kHduFieldNumber;
const int StokesFile::kStokesTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StokesFile::StokesFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_concat_5fstokes_5ffiles_2eproto::scc_info_StokesFile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.StokesFile)
}
StokesFile::StokesFile(const StokesFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.directory().size() > 0) {
    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  hdu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hdu().size() > 0) {
    hdu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdu_);
  }
  stokes_type_ = from.stokes_type_;
  // @@protoc_insertion_point(copy_constructor:CARTA.StokesFile)
}

void StokesFile::SharedCtor() {
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stokes_type_ = 0;
}

StokesFile::~StokesFile() {
  // @@protoc_insertion_point(destructor:CARTA.StokesFile)
  SharedDtor();
}

void StokesFile::SharedDtor() {
  directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StokesFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StokesFile::descriptor() {
  ::protobuf_concat_5fstokes_5ffiles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_concat_5fstokes_5ffiles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StokesFile& StokesFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_concat_5fstokes_5ffiles_2eproto::scc_info_StokesFile.base);
  return *internal_default_instance();
}


void StokesFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.StokesFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stokes_type_ = 0;
  _internal_metadata_.Clear();
}

bool StokesFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.StokesFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string directory = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->directory().data(), static_cast<int>(this->directory().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.StokesFile.directory"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), static_cast<int>(this->file().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.StokesFile.file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hdu = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdu()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hdu().data(), static_cast<int>(this->hdu().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.StokesFile.hdu"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.StokesType stokes_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stokes_type(static_cast< ::CARTA::StokesType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.StokesFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.StokesFile)
  return false;
#undef DO_
}

void StokesFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.StokesFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), static_cast<int>(this->directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.StokesFile.directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->directory(), output);
  }

  // string file = 2;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.StokesFile.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file(), output);
  }

  // string hdu = 3;
  if (this->hdu().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdu().data(), static_cast<int>(this->hdu().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.StokesFile.hdu");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hdu(), output);
  }

  // .CARTA.StokesType stokes_type = 4;
  if (this->stokes_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->stokes_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.StokesFile)
}

::google::protobuf::uint8* StokesFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.StokesFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), static_cast<int>(this->directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.StokesFile.directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->directory(), target);
  }

  // string file = 2;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.StokesFile.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }

  // string hdu = 3;
  if (this->hdu().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdu().data(), static_cast<int>(this->hdu().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.StokesFile.hdu");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hdu(), target);
  }

  // .CARTA.StokesType stokes_type = 4;
  if (this->stokes_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->stokes_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.StokesFile)
  return target;
}

size_t StokesFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.StokesFile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string directory = 1;
  if (this->directory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->directory());
  }

  // string file = 2;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // string hdu = 3;
  if (this->hdu().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hdu());
  }

  // .CARTA.StokesType stokes_type = 4;
  if (this->stokes_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stokes_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StokesFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.StokesFile)
  GOOGLE_DCHECK_NE(&from, this);
  const StokesFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StokesFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.StokesFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.StokesFile)
    MergeFrom(*source);
  }
}

void StokesFile::MergeFrom(const StokesFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.StokesFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directory().size() > 0) {

    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.hdu().size() > 0) {

    hdu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdu_);
  }
  if (from.stokes_type() != 0) {
    set_stokes_type(from.stokes_type());
  }
}

void StokesFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.StokesFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StokesFile::CopyFrom(const StokesFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.StokesFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StokesFile::IsInitialized() const {
  return true;
}

void StokesFile::Swap(StokesFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StokesFile::InternalSwap(StokesFile* other) {
  using std::swap;
  directory_.Swap(&other->directory_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_.Swap(&other->file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hdu_.Swap(&other->hdu_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stokes_type_, other->stokes_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StokesFile::GetMetadata() const {
  protobuf_concat_5fstokes_5ffiles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_concat_5fstokes_5ffiles_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConcatStokesFilesAck::InitAsDefaultInstance() {
  ::CARTA::_ConcatStokesFilesAck_default_instance_._instance.get_mutable()->open_file_ack_ = const_cast< ::CARTA::OpenFileAck*>(
      ::CARTA::OpenFileAck::internal_default_instance());
}
void ConcatStokesFilesAck::clear_open_file_ack() {
  if (GetArenaNoVirtual() == NULL && open_file_ack_ != NULL) {
    delete open_file_ack_;
  }
  open_file_ack_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConcatStokesFilesAck::kSuccessFieldNumber;
const int ConcatStokesFilesAck::kMessageFieldNumber;
const int ConcatStokesFilesAck::kOpenFileAckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConcatStokesFilesAck::ConcatStokesFilesAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_concat_5fstokes_5ffiles_2eproto::scc_info_ConcatStokesFilesAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.ConcatStokesFilesAck)
}
ConcatStokesFilesAck::ConcatStokesFilesAck(const ConcatStokesFilesAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_open_file_ack()) {
    open_file_ack_ = new ::CARTA::OpenFileAck(*from.open_file_ack_);
  } else {
    open_file_ack_ = NULL;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CARTA.ConcatStokesFilesAck)
}

void ConcatStokesFilesAck::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&open_file_ack_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&open_file_ack_)) + sizeof(success_));
}

ConcatStokesFilesAck::~ConcatStokesFilesAck() {
  // @@protoc_insertion_point(destructor:CARTA.ConcatStokesFilesAck)
  SharedDtor();
}

void ConcatStokesFilesAck::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete open_file_ack_;
}

void ConcatStokesFilesAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConcatStokesFilesAck::descriptor() {
  ::protobuf_concat_5fstokes_5ffiles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_concat_5fstokes_5ffiles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConcatStokesFilesAck& ConcatStokesFilesAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_concat_5fstokes_5ffiles_2eproto::scc_info_ConcatStokesFilesAck.base);
  return *internal_default_instance();
}


void ConcatStokesFilesAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.ConcatStokesFilesAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && open_file_ack_ != NULL) {
    delete open_file_ack_;
  }
  open_file_ack_ = NULL;
  success_ = false;
  _internal_metadata_.Clear();
}

bool ConcatStokesFilesAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.ConcatStokesFilesAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.ConcatStokesFilesAck.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.OpenFileAck open_file_ack = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open_file_ack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.ConcatStokesFilesAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.ConcatStokesFilesAck)
  return false;
#undef DO_
}

void ConcatStokesFilesAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.ConcatStokesFilesAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.ConcatStokesFilesAck.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // .CARTA.OpenFileAck open_file_ack = 3;
  if (this->has_open_file_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_open_file_ack(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.ConcatStokesFilesAck)
}

::google::protobuf::uint8* ConcatStokesFilesAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.ConcatStokesFilesAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.ConcatStokesFilesAck.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // .CARTA.OpenFileAck open_file_ack = 3;
  if (this->has_open_file_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_open_file_ack(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.ConcatStokesFilesAck)
  return target;
}

size_t ConcatStokesFilesAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.ConcatStokesFilesAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .CARTA.OpenFileAck open_file_ack = 3;
  if (this->has_open_file_ack()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *open_file_ack_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConcatStokesFilesAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.ConcatStokesFilesAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcatStokesFilesAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConcatStokesFilesAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.ConcatStokesFilesAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.ConcatStokesFilesAck)
    MergeFrom(*source);
  }
}

void ConcatStokesFilesAck::MergeFrom(const ConcatStokesFilesAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.ConcatStokesFilesAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_open_file_ack()) {
    mutable_open_file_ack()->::CARTA::OpenFileAck::MergeFrom(from.open_file_ack());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void ConcatStokesFilesAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.ConcatStokesFilesAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatStokesFilesAck::CopyFrom(const ConcatStokesFilesAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.ConcatStokesFilesAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatStokesFilesAck::IsInitialized() const {
  return true;
}

void ConcatStokesFilesAck::Swap(ConcatStokesFilesAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConcatStokesFilesAck::InternalSwap(ConcatStokesFilesAck* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(open_file_ack_, other->open_file_ack_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConcatStokesFilesAck::GetMetadata() const {
  protobuf_concat_5fstokes_5ffiles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_concat_5fstokes_5ffiles_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::ConcatStokesFiles* Arena::CreateMaybeMessage< ::CARTA::ConcatStokesFiles >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::ConcatStokesFiles >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::StokesFile* Arena::CreateMaybeMessage< ::CARTA::StokesFile >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::StokesFile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::ConcatStokesFilesAck* Arena::CreateMaybeMessage< ::CARTA::ConcatStokesFilesAck >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::ConcatStokesFilesAck >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
