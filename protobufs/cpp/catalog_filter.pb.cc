// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: catalog_filter.proto

#include "catalog_filter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_catalog_5ffilter_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_catalog_5ffilter_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CatalogFilterResponse_ColumnsEntry_DoNotUse;
}  // namespace protobuf_catalog_5ffilter_2eproto
namespace protobuf_defs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ColumnData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FilterConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CatalogImageBounds;
}  // namespace protobuf_defs_2eproto
namespace CARTA {
class CatalogFilterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatalogFilterRequest>
      _instance;
} _CatalogFilterRequest_default_instance_;
class CatalogFilterResponse_ColumnsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatalogFilterResponse_ColumnsEntry_DoNotUse>
      _instance;
} _CatalogFilterResponse_ColumnsEntry_DoNotUse_default_instance_;
class CatalogFilterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatalogFilterResponse>
      _instance;
} _CatalogFilterResponse_default_instance_;
}  // namespace CARTA
namespace protobuf_catalog_5ffilter_2eproto {
static void InitDefaultsCatalogFilterRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_CatalogFilterRequest_default_instance_;
    new (ptr) ::CARTA::CatalogFilterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::CatalogFilterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CatalogFilterRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCatalogFilterRequest}, {
      &protobuf_defs_2eproto::scc_info_FilterConfig.base,
      &protobuf_defs_2eproto::scc_info_CatalogImageBounds.base,}};

static void InitDefaultsCatalogFilterResponse_ColumnsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_CatalogFilterResponse_ColumnsEntry_DoNotUse_default_instance_;
    new (ptr) ::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse();
  }
  ::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CatalogFilterResponse_ColumnsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCatalogFilterResponse_ColumnsEntry_DoNotUse}, {
      &protobuf_defs_2eproto::scc_info_ColumnData.base,}};

static void InitDefaultsCatalogFilterResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_CatalogFilterResponse_default_instance_;
    new (ptr) ::CARTA::CatalogFilterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::CatalogFilterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CatalogFilterResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCatalogFilterResponse}, {
      &protobuf_catalog_5ffilter_2eproto::scc_info_CatalogFilterResponse_ColumnsEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CatalogFilterRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CatalogFilterResponse_ColumnsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CatalogFilterResponse.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterRequest, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterRequest, column_indices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterRequest, filter_configs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterRequest, subset_data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterRequest, subset_start_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterRequest, image_bounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterRequest, image_file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterRequest, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterRequest, sort_column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterRequest, sorting_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse, image_file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse, subset_data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse, subset_end_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse, filter_data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFilterResponse, request_end_index_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::CatalogFilterRequest)},
  { 15, 22, sizeof(::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse)},
  { 24, -1, sizeof(::CARTA::CatalogFilterResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_CatalogFilterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_CatalogFilterResponse_ColumnsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_CatalogFilterResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "catalog_filter.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024catalog_filter.proto\022\005CARTA\032\013enums.pro"
      "to\032\ndefs.proto\"\274\002\n\024CatalogFilterRequest\022"
      "\017\n\007file_id\030\001 \001(\017\022\026\n\016column_indices\030\002 \003(\005"
      "\022+\n\016filter_configs\030\003 \003(\0132\023.CARTA.FilterC"
      "onfig\022\030\n\020subset_data_size\030\004 \001(\017\022\032\n\022subse"
      "t_start_index\030\005 \001(\017\022/\n\014image_bounds\030\006 \001("
      "\0132\031.CARTA.CatalogImageBounds\022\025\n\rimage_fi"
      "le_id\030\007 \001(\017\022\021\n\tregion_id\030\010 \001(\017\022\023\n\013sort_c"
      "olumn\030\t \001(\t\022(\n\014sorting_type\030\n \001(\0162\022.CART"
      "A.SortingType\"\314\002\n\025CatalogFilterResponse\022"
      "\017\n\007file_id\030\001 \001(\017\022\025\n\rimage_file_id\030\002 \001(\017\022"
      "\021\n\tregion_id\030\003 \001(\017\022:\n\007columns\030\004 \003(\0132).CA"
      "RTA.CatalogFilterResponse.ColumnsEntry\022\030"
      "\n\020subset_data_size\030\005 \001(\017\022\030\n\020subset_end_i"
      "ndex\030\006 \001(\017\022\020\n\010progress\030\007 \001(\002\022\030\n\020filter_d"
      "ata_size\030\010 \001(\017\022\031\n\021request_end_index\030\t \001("
      "\017\032A\n\014ColumnsEntry\022\013\n\003key\030\001 \001(\007\022 \n\005value\030"
      "\002 \001(\0132\021.CARTA.ColumnData:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 716);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "catalog_filter.proto", &protobuf_RegisterTypes);
  ::protobuf_enums_2eproto::AddDescriptors();
  ::protobuf_defs_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_catalog_5ffilter_2eproto
namespace CARTA {

// ===================================================================

void CatalogFilterRequest::InitAsDefaultInstance() {
  ::CARTA::_CatalogFilterRequest_default_instance_._instance.get_mutable()->image_bounds_ = const_cast< ::CARTA::CatalogImageBounds*>(
      ::CARTA::CatalogImageBounds::internal_default_instance());
}
void CatalogFilterRequest::clear_filter_configs() {
  filter_configs_.Clear();
}
void CatalogFilterRequest::clear_image_bounds() {
  if (GetArenaNoVirtual() == NULL && image_bounds_ != NULL) {
    delete image_bounds_;
  }
  image_bounds_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatalogFilterRequest::kFileIdFieldNumber;
const int CatalogFilterRequest::kColumnIndicesFieldNumber;
const int CatalogFilterRequest::kFilterConfigsFieldNumber;
const int CatalogFilterRequest::kSubsetDataSizeFieldNumber;
const int CatalogFilterRequest::kSubsetStartIndexFieldNumber;
const int CatalogFilterRequest::kImageBoundsFieldNumber;
const int CatalogFilterRequest::kImageFileIdFieldNumber;
const int CatalogFilterRequest::kRegionIdFieldNumber;
const int CatalogFilterRequest::kSortColumnFieldNumber;
const int CatalogFilterRequest::kSortingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatalogFilterRequest::CatalogFilterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_catalog_5ffilter_2eproto::scc_info_CatalogFilterRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.CatalogFilterRequest)
}
CatalogFilterRequest::CatalogFilterRequest(const CatalogFilterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      column_indices_(from.column_indices_),
      filter_configs_(from.filter_configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sort_column_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sort_column().size() > 0) {
    sort_column_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sort_column_);
  }
  if (from.has_image_bounds()) {
    image_bounds_ = new ::CARTA::CatalogImageBounds(*from.image_bounds_);
  } else {
    image_bounds_ = NULL;
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sorting_type_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(sorting_type_));
  // @@protoc_insertion_point(copy_constructor:CARTA.CatalogFilterRequest)
}

void CatalogFilterRequest::SharedCtor() {
  sort_column_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sorting_type_) -
      reinterpret_cast<char*>(&image_bounds_)) + sizeof(sorting_type_));
}

CatalogFilterRequest::~CatalogFilterRequest() {
  // @@protoc_insertion_point(destructor:CARTA.CatalogFilterRequest)
  SharedDtor();
}

void CatalogFilterRequest::SharedDtor() {
  sort_column_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_bounds_;
}

void CatalogFilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CatalogFilterRequest::descriptor() {
  ::protobuf_catalog_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_catalog_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CatalogFilterRequest& CatalogFilterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_catalog_5ffilter_2eproto::scc_info_CatalogFilterRequest.base);
  return *internal_default_instance();
}


void CatalogFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.CatalogFilterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_indices_.Clear();
  filter_configs_.Clear();
  sort_column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && image_bounds_ != NULL) {
    delete image_bounds_;
  }
  image_bounds_ = NULL;
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sorting_type_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(sorting_type_));
  _internal_metadata_.Clear();
}

bool CatalogFilterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.CatalogFilterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 column_indices = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_column_indices())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_column_indices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.FilterConfig filter_configs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_filter_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 subset_data_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &subset_data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 subset_start_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &subset_start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.CatalogImageBounds image_bounds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 image_file_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &image_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 region_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sort_column = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sort_column()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sort_column().data(), static_cast<int>(this->sort_column().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.CatalogFilterRequest.sort_column"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.SortingType sorting_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sorting_type(static_cast< ::CARTA::SortingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.CatalogFilterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.CatalogFilterRequest)
  return false;
#undef DO_
}

void CatalogFilterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.CatalogFilterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // repeated int32 column_indices = 2;
  if (this->column_indices_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _column_indices_cached_byte_size_));
  }
  for (int i = 0, n = this->column_indices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->column_indices(i), output);
  }

  // repeated .CARTA.FilterConfig filter_configs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filter_configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->filter_configs(static_cast<int>(i)),
      output);
  }

  // sfixed32 subset_data_size = 4;
  if (this->subset_data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->subset_data_size(), output);
  }

  // sfixed32 subset_start_index = 5;
  if (this->subset_start_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->subset_start_index(), output);
  }

  // .CARTA.CatalogImageBounds image_bounds = 6;
  if (this->has_image_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_image_bounds(), output);
  }

  // sfixed32 image_file_id = 7;
  if (this->image_file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->image_file_id(), output);
  }

  // sfixed32 region_id = 8;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->region_id(), output);
  }

  // string sort_column = 9;
  if (this->sort_column().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sort_column().data(), static_cast<int>(this->sort_column().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFilterRequest.sort_column");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sort_column(), output);
  }

  // .CARTA.SortingType sorting_type = 10;
  if (this->sorting_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->sorting_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.CatalogFilterRequest)
}

::google::protobuf::uint8* CatalogFilterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.CatalogFilterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // repeated int32 column_indices = 2;
  if (this->column_indices_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _column_indices_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->column_indices_, target);
  }

  // repeated .CARTA.FilterConfig filter_configs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filter_configs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->filter_configs(static_cast<int>(i)), deterministic, target);
  }

  // sfixed32 subset_data_size = 4;
  if (this->subset_data_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->subset_data_size(), target);
  }

  // sfixed32 subset_start_index = 5;
  if (this->subset_start_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->subset_start_index(), target);
  }

  // .CARTA.CatalogImageBounds image_bounds = 6;
  if (this->has_image_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_image_bounds(), deterministic, target);
  }

  // sfixed32 image_file_id = 7;
  if (this->image_file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->image_file_id(), target);
  }

  // sfixed32 region_id = 8;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->region_id(), target);
  }

  // string sort_column = 9;
  if (this->sort_column().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sort_column().data(), static_cast<int>(this->sort_column().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFilterRequest.sort_column");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sort_column(), target);
  }

  // .CARTA.SortingType sorting_type = 10;
  if (this->sorting_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->sorting_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.CatalogFilterRequest)
  return target;
}

size_t CatalogFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.CatalogFilterRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 column_indices = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->column_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _column_indices_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .CARTA.FilterConfig filter_configs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->filter_configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->filter_configs(static_cast<int>(i)));
    }
  }

  // string sort_column = 9;
  if (this->sort_column().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sort_column());
  }

  // .CARTA.CatalogImageBounds image_bounds = 6;
  if (this->has_image_bounds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *image_bounds_);
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 subset_data_size = 4;
  if (this->subset_data_size() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 subset_start_index = 5;
  if (this->subset_start_index() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 image_file_id = 7;
  if (this->image_file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 region_id = 8;
  if (this->region_id() != 0) {
    total_size += 1 + 4;
  }

  // .CARTA.SortingType sorting_type = 10;
  if (this->sorting_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sorting_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogFilterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.CatalogFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogFilterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CatalogFilterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.CatalogFilterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.CatalogFilterRequest)
    MergeFrom(*source);
  }
}

void CatalogFilterRequest::MergeFrom(const CatalogFilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.CatalogFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_indices_.MergeFrom(from.column_indices_);
  filter_configs_.MergeFrom(from.filter_configs_);
  if (from.sort_column().size() > 0) {

    sort_column_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sort_column_);
  }
  if (from.has_image_bounds()) {
    mutable_image_bounds()->::CARTA::CatalogImageBounds::MergeFrom(from.image_bounds());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.subset_data_size() != 0) {
    set_subset_data_size(from.subset_data_size());
  }
  if (from.subset_start_index() != 0) {
    set_subset_start_index(from.subset_start_index());
  }
  if (from.image_file_id() != 0) {
    set_image_file_id(from.image_file_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.sorting_type() != 0) {
    set_sorting_type(from.sorting_type());
  }
}

void CatalogFilterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.CatalogFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogFilterRequest::CopyFrom(const CatalogFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.CatalogFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogFilterRequest::IsInitialized() const {
  return true;
}

void CatalogFilterRequest::Swap(CatalogFilterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatalogFilterRequest::InternalSwap(CatalogFilterRequest* other) {
  using std::swap;
  column_indices_.InternalSwap(&other->column_indices_);
  CastToBase(&filter_configs_)->InternalSwap(CastToBase(&other->filter_configs_));
  sort_column_.Swap(&other->sort_column_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_bounds_, other->image_bounds_);
  swap(file_id_, other->file_id_);
  swap(subset_data_size_, other->subset_data_size_);
  swap(subset_start_index_, other->subset_start_index_);
  swap(image_file_id_, other->image_file_id_);
  swap(region_id_, other->region_id_);
  swap(sorting_type_, other->sorting_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CatalogFilterRequest::GetMetadata() const {
  protobuf_catalog_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_catalog_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

CatalogFilterResponse_ColumnsEntry_DoNotUse::CatalogFilterResponse_ColumnsEntry_DoNotUse() {}
CatalogFilterResponse_ColumnsEntry_DoNotUse::CatalogFilterResponse_ColumnsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void CatalogFilterResponse_ColumnsEntry_DoNotUse::MergeFrom(const CatalogFilterResponse_ColumnsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata CatalogFilterResponse_ColumnsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_catalog_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_catalog_5ffilter_2eproto::file_level_metadata[1];
}
void CatalogFilterResponse_ColumnsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void CatalogFilterResponse::InitAsDefaultInstance() {
}
void CatalogFilterResponse::clear_columns() {
  columns_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatalogFilterResponse::kFileIdFieldNumber;
const int CatalogFilterResponse::kImageFileIdFieldNumber;
const int CatalogFilterResponse::kRegionIdFieldNumber;
const int CatalogFilterResponse::kColumnsFieldNumber;
const int CatalogFilterResponse::kSubsetDataSizeFieldNumber;
const int CatalogFilterResponse::kSubsetEndIndexFieldNumber;
const int CatalogFilterResponse::kProgressFieldNumber;
const int CatalogFilterResponse::kFilterDataSizeFieldNumber;
const int CatalogFilterResponse::kRequestEndIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatalogFilterResponse::CatalogFilterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_catalog_5ffilter_2eproto::scc_info_CatalogFilterResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.CatalogFilterResponse)
}
CatalogFilterResponse::CatalogFilterResponse(const CatalogFilterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  columns_.MergeFrom(from.columns_);
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_end_index_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(request_end_index_));
  // @@protoc_insertion_point(copy_constructor:CARTA.CatalogFilterResponse)
}

void CatalogFilterResponse::SharedCtor() {
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_end_index_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(request_end_index_));
}

CatalogFilterResponse::~CatalogFilterResponse() {
  // @@protoc_insertion_point(destructor:CARTA.CatalogFilterResponse)
  SharedDtor();
}

void CatalogFilterResponse::SharedDtor() {
}

void CatalogFilterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CatalogFilterResponse::descriptor() {
  ::protobuf_catalog_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_catalog_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CatalogFilterResponse& CatalogFilterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_catalog_5ffilter_2eproto::scc_info_CatalogFilterResponse.base);
  return *internal_default_instance();
}


void CatalogFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.CatalogFilterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_end_index_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(request_end_index_));
  _internal_metadata_.Clear();
}

bool CatalogFilterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.CatalogFilterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 image_file_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &image_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 region_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<fixed32, .CARTA.ColumnData> columns = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          CatalogFilterResponse_ColumnsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              CatalogFilterResponse_ColumnsEntry_DoNotUse,
              ::google::protobuf::uint32, ::CARTA::ColumnData,
              ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData > > parser(&columns_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 subset_data_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &subset_data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 subset_end_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &subset_end_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float progress = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 filter_data_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &filter_data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 request_end_index = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &request_end_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.CatalogFilterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.CatalogFilterResponse)
  return false;
#undef DO_
}

void CatalogFilterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.CatalogFilterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // sfixed32 image_file_id = 2;
  if (this->image_file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->image_file_id(), output);
  }

  // sfixed32 region_id = 3;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->region_id(), output);
  }

  // map<fixed32, .CARTA.ColumnData> columns = 4;
  if (!this->columns().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->columns().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->columns().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->columns().begin();
          it != this->columns().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CatalogFilterResponse_ColumnsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(columns_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    } else {
      ::std::unique_ptr<CatalogFilterResponse_ColumnsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->columns().begin();
          it != this->columns().end(); ++it) {
        entry.reset(columns_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
      }
    }
  }

  // sfixed32 subset_data_size = 5;
  if (this->subset_data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->subset_data_size(), output);
  }

  // sfixed32 subset_end_index = 6;
  if (this->subset_end_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->subset_end_index(), output);
  }

  // float progress = 7;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->progress(), output);
  }

  // sfixed32 filter_data_size = 8;
  if (this->filter_data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->filter_data_size(), output);
  }

  // sfixed32 request_end_index = 9;
  if (this->request_end_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->request_end_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.CatalogFilterResponse)
}

::google::protobuf::uint8* CatalogFilterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.CatalogFilterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // sfixed32 image_file_id = 2;
  if (this->image_file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->image_file_id(), target);
  }

  // sfixed32 region_id = 3;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->region_id(), target);
  }

  // map<fixed32, .CARTA.ColumnData> columns = 4;
  if (!this->columns().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->columns().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->columns().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->columns().begin();
          it != this->columns().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<CatalogFilterResponse_ColumnsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(columns_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<CatalogFilterResponse_ColumnsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->columns().begin();
          it != this->columns().end(); ++it) {
        entry.reset(columns_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
      }
    }
  }

  // sfixed32 subset_data_size = 5;
  if (this->subset_data_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->subset_data_size(), target);
  }

  // sfixed32 subset_end_index = 6;
  if (this->subset_end_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->subset_end_index(), target);
  }

  // float progress = 7;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->progress(), target);
  }

  // sfixed32 filter_data_size = 8;
  if (this->filter_data_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->filter_data_size(), target);
  }

  // sfixed32 request_end_index = 9;
  if (this->request_end_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->request_end_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.CatalogFilterResponse)
  return target;
}

size_t CatalogFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.CatalogFilterResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<fixed32, .CARTA.ColumnData> columns = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->columns_size());
  {
    ::std::unique_ptr<CatalogFilterResponse_ColumnsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
        it = this->columns().begin();
        it != this->columns().end(); ++it) {
      entry.reset(columns_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 image_file_id = 2;
  if (this->image_file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 region_id = 3;
  if (this->region_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 subset_data_size = 5;
  if (this->subset_data_size() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 subset_end_index = 6;
  if (this->subset_end_index() != 0) {
    total_size += 1 + 4;
  }

  // float progress = 7;
  if (this->progress() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 filter_data_size = 8;
  if (this->filter_data_size() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 request_end_index = 9;
  if (this->request_end_index() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogFilterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.CatalogFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogFilterResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CatalogFilterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.CatalogFilterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.CatalogFilterResponse)
    MergeFrom(*source);
  }
}

void CatalogFilterResponse::MergeFrom(const CatalogFilterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.CatalogFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.image_file_id() != 0) {
    set_image_file_id(from.image_file_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.subset_data_size() != 0) {
    set_subset_data_size(from.subset_data_size());
  }
  if (from.subset_end_index() != 0) {
    set_subset_end_index(from.subset_end_index());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  if (from.filter_data_size() != 0) {
    set_filter_data_size(from.filter_data_size());
  }
  if (from.request_end_index() != 0) {
    set_request_end_index(from.request_end_index());
  }
}

void CatalogFilterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.CatalogFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogFilterResponse::CopyFrom(const CatalogFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.CatalogFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogFilterResponse::IsInitialized() const {
  return true;
}

void CatalogFilterResponse::Swap(CatalogFilterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatalogFilterResponse::InternalSwap(CatalogFilterResponse* other) {
  using std::swap;
  columns_.Swap(&other->columns_);
  swap(file_id_, other->file_id_);
  swap(image_file_id_, other->image_file_id_);
  swap(region_id_, other->region_id_);
  swap(subset_data_size_, other->subset_data_size_);
  swap(subset_end_index_, other->subset_end_index_);
  swap(progress_, other->progress_);
  swap(filter_data_size_, other->filter_data_size_);
  swap(request_end_index_, other->request_end_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CatalogFilterResponse::GetMetadata() const {
  protobuf_catalog_5ffilter_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_catalog_5ffilter_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::CatalogFilterRequest* Arena::CreateMaybeMessage< ::CARTA::CatalogFilterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::CatalogFilterRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse* Arena::CreateMaybeMessage< ::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::CatalogFilterResponse* Arena::CreateMaybeMessage< ::CARTA::CatalogFilterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::CatalogFilterResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
