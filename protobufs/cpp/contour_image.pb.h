// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contour_image.proto

#ifndef PROTOBUF_INCLUDED_contour_5fimage_2eproto
#define PROTOBUF_INCLUDED_contour_5fimage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "defs.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_contour_5fimage_2eproto 

namespace protobuf_contour_5fimage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_contour_5fimage_2eproto
namespace CARTA {
class ContourImageData;
class ContourImageDataDefaultTypeInternal;
extern ContourImageDataDefaultTypeInternal _ContourImageData_default_instance_;
class ContourSet;
class ContourSetDefaultTypeInternal;
extern ContourSetDefaultTypeInternal _ContourSet_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::ContourImageData* Arena::CreateMaybeMessage<::CARTA::ContourImageData>(Arena*);
template<> ::CARTA::ContourSet* Arena::CreateMaybeMessage<::CARTA::ContourSet>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class ContourImageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ContourImageData) */ {
 public:
  ContourImageData();
  virtual ~ContourImageData();

  ContourImageData(const ContourImageData& from);

  inline ContourImageData& operator=(const ContourImageData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContourImageData(ContourImageData&& from) noexcept
    : ContourImageData() {
    *this = ::std::move(from);
  }

  inline ContourImageData& operator=(ContourImageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContourImageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContourImageData* internal_default_instance() {
    return reinterpret_cast<const ContourImageData*>(
               &_ContourImageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ContourImageData* other);
  friend void swap(ContourImageData& a, ContourImageData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContourImageData* New() const final {
    return CreateMaybeMessage<ContourImageData>(NULL);
  }

  ContourImageData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContourImageData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContourImageData& from);
  void MergeFrom(const ContourImageData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContourImageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARTA.ContourSet contour_sets = 6;
  int contour_sets_size() const;
  void clear_contour_sets();
  static const int kContourSetsFieldNumber = 6;
  ::CARTA::ContourSet* mutable_contour_sets(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::ContourSet >*
      mutable_contour_sets();
  const ::CARTA::ContourSet& contour_sets(int index) const;
  ::CARTA::ContourSet* add_contour_sets();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::ContourSet >&
      contour_sets() const;

  // .CARTA.ImageBounds image_bounds = 3;
  bool has_image_bounds() const;
  void clear_image_bounds();
  static const int kImageBoundsFieldNumber = 3;
  private:
  const ::CARTA::ImageBounds& _internal_image_bounds() const;
  public:
  const ::CARTA::ImageBounds& image_bounds() const;
  ::CARTA::ImageBounds* release_image_bounds();
  ::CARTA::ImageBounds* mutable_image_bounds();
  void set_allocated_image_bounds(::CARTA::ImageBounds* image_bounds);

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // fixed32 reference_file_id = 2;
  void clear_reference_file_id();
  static const int kReferenceFileIdFieldNumber = 2;
  ::google::protobuf::uint32 reference_file_id() const;
  void set_reference_file_id(::google::protobuf::uint32 value);

  // sfixed32 channel = 4;
  void clear_channel();
  static const int kChannelFieldNumber = 4;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // sfixed32 stokes = 5;
  void clear_stokes();
  static const int kStokesFieldNumber = 5;
  ::google::protobuf::int32 stokes() const;
  void set_stokes(::google::protobuf::int32 value);

  // double progress = 7;
  void clear_progress();
  static const int kProgressFieldNumber = 7;
  double progress() const;
  void set_progress(double value);

  // @@protoc_insertion_point(class_scope:CARTA.ContourImageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::ContourSet > contour_sets_;
  ::CARTA::ImageBounds* image_bounds_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::uint32 reference_file_id_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 stokes_;
  double progress_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_contour_5fimage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContourSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ContourSet) */ {
 public:
  ContourSet();
  virtual ~ContourSet();

  ContourSet(const ContourSet& from);

  inline ContourSet& operator=(const ContourSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContourSet(ContourSet&& from) noexcept
    : ContourSet() {
    *this = ::std::move(from);
  }

  inline ContourSet& operator=(ContourSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContourSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContourSet* internal_default_instance() {
    return reinterpret_cast<const ContourSet*>(
               &_ContourSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ContourSet* other);
  friend void swap(ContourSet& a, ContourSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContourSet* New() const final {
    return CreateMaybeMessage<ContourSet>(NULL);
  }

  ContourSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContourSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContourSet& from);
  void MergeFrom(const ContourSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContourSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes raw_coordinates = 3;
  void clear_raw_coordinates();
  static const int kRawCoordinatesFieldNumber = 3;
  const ::std::string& raw_coordinates() const;
  void set_raw_coordinates(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_coordinates(::std::string&& value);
  #endif
  void set_raw_coordinates(const char* value);
  void set_raw_coordinates(const void* value, size_t size);
  ::std::string* mutable_raw_coordinates();
  ::std::string* release_raw_coordinates();
  void set_allocated_raw_coordinates(::std::string* raw_coordinates);

  // bytes raw_start_indices = 4;
  void clear_raw_start_indices();
  static const int kRawStartIndicesFieldNumber = 4;
  const ::std::string& raw_start_indices() const;
  void set_raw_start_indices(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_start_indices(::std::string&& value);
  #endif
  void set_raw_start_indices(const char* value);
  void set_raw_start_indices(const void* value, size_t size);
  ::std::string* mutable_raw_start_indices();
  ::std::string* release_raw_start_indices();
  void set_allocated_raw_start_indices(::std::string* raw_start_indices);

  // double level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  double level() const;
  void set_level(double value);

  // int32 decimation_factor = 2;
  void clear_decimation_factor();
  static const int kDecimationFactorFieldNumber = 2;
  ::google::protobuf::int32 decimation_factor() const;
  void set_decimation_factor(::google::protobuf::int32 value);

  // int32 uncompressed_coordinates_size = 5;
  void clear_uncompressed_coordinates_size();
  static const int kUncompressedCoordinatesSizeFieldNumber = 5;
  ::google::protobuf::int32 uncompressed_coordinates_size() const;
  void set_uncompressed_coordinates_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.ContourSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr raw_coordinates_;
  ::google::protobuf::internal::ArenaStringPtr raw_start_indices_;
  double level_;
  ::google::protobuf::int32 decimation_factor_;
  ::google::protobuf::int32 uncompressed_coordinates_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_contour_5fimage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContourImageData

// sfixed32 file_id = 1;
inline void ContourImageData::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 ContourImageData::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.ContourImageData.file_id)
  return file_id_;
}
inline void ContourImageData::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ContourImageData.file_id)
}

// fixed32 reference_file_id = 2;
inline void ContourImageData::clear_reference_file_id() {
  reference_file_id_ = 0u;
}
inline ::google::protobuf::uint32 ContourImageData::reference_file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.ContourImageData.reference_file_id)
  return reference_file_id_;
}
inline void ContourImageData::set_reference_file_id(::google::protobuf::uint32 value) {
  
  reference_file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ContourImageData.reference_file_id)
}

// .CARTA.ImageBounds image_bounds = 3;
inline bool ContourImageData::has_image_bounds() const {
  return this != internal_default_instance() && image_bounds_ != NULL;
}
inline const ::CARTA::ImageBounds& ContourImageData::_internal_image_bounds() const {
  return *image_bounds_;
}
inline const ::CARTA::ImageBounds& ContourImageData::image_bounds() const {
  const ::CARTA::ImageBounds* p = image_bounds_;
  // @@protoc_insertion_point(field_get:CARTA.ContourImageData.image_bounds)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::ImageBounds*>(
      &::CARTA::_ImageBounds_default_instance_);
}
inline ::CARTA::ImageBounds* ContourImageData::release_image_bounds() {
  // @@protoc_insertion_point(field_release:CARTA.ContourImageData.image_bounds)
  
  ::CARTA::ImageBounds* temp = image_bounds_;
  image_bounds_ = NULL;
  return temp;
}
inline ::CARTA::ImageBounds* ContourImageData::mutable_image_bounds() {
  
  if (image_bounds_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::ImageBounds>(GetArenaNoVirtual());
    image_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.ContourImageData.image_bounds)
  return image_bounds_;
}
inline void ContourImageData::set_allocated_image_bounds(::CARTA::ImageBounds* image_bounds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(image_bounds_);
  }
  if (image_bounds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image_bounds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_bounds, submessage_arena);
    }
    
  } else {
    
  }
  image_bounds_ = image_bounds;
  // @@protoc_insertion_point(field_set_allocated:CARTA.ContourImageData.image_bounds)
}

// sfixed32 channel = 4;
inline void ContourImageData::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 ContourImageData::channel() const {
  // @@protoc_insertion_point(field_get:CARTA.ContourImageData.channel)
  return channel_;
}
inline void ContourImageData::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ContourImageData.channel)
}

// sfixed32 stokes = 5;
inline void ContourImageData::clear_stokes() {
  stokes_ = 0;
}
inline ::google::protobuf::int32 ContourImageData::stokes() const {
  // @@protoc_insertion_point(field_get:CARTA.ContourImageData.stokes)
  return stokes_;
}
inline void ContourImageData::set_stokes(::google::protobuf::int32 value) {
  
  stokes_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ContourImageData.stokes)
}

// repeated .CARTA.ContourSet contour_sets = 6;
inline int ContourImageData::contour_sets_size() const {
  return contour_sets_.size();
}
inline void ContourImageData::clear_contour_sets() {
  contour_sets_.Clear();
}
inline ::CARTA::ContourSet* ContourImageData::mutable_contour_sets(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.ContourImageData.contour_sets)
  return contour_sets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::ContourSet >*
ContourImageData::mutable_contour_sets() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.ContourImageData.contour_sets)
  return &contour_sets_;
}
inline const ::CARTA::ContourSet& ContourImageData::contour_sets(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.ContourImageData.contour_sets)
  return contour_sets_.Get(index);
}
inline ::CARTA::ContourSet* ContourImageData::add_contour_sets() {
  // @@protoc_insertion_point(field_add:CARTA.ContourImageData.contour_sets)
  return contour_sets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::ContourSet >&
ContourImageData::contour_sets() const {
  // @@protoc_insertion_point(field_list:CARTA.ContourImageData.contour_sets)
  return contour_sets_;
}

// double progress = 7;
inline void ContourImageData::clear_progress() {
  progress_ = 0;
}
inline double ContourImageData::progress() const {
  // @@protoc_insertion_point(field_get:CARTA.ContourImageData.progress)
  return progress_;
}
inline void ContourImageData::set_progress(double value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ContourImageData.progress)
}

// -------------------------------------------------------------------

// ContourSet

// double level = 1;
inline void ContourSet::clear_level() {
  level_ = 0;
}
inline double ContourSet::level() const {
  // @@protoc_insertion_point(field_get:CARTA.ContourSet.level)
  return level_;
}
inline void ContourSet::set_level(double value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ContourSet.level)
}

// int32 decimation_factor = 2;
inline void ContourSet::clear_decimation_factor() {
  decimation_factor_ = 0;
}
inline ::google::protobuf::int32 ContourSet::decimation_factor() const {
  // @@protoc_insertion_point(field_get:CARTA.ContourSet.decimation_factor)
  return decimation_factor_;
}
inline void ContourSet::set_decimation_factor(::google::protobuf::int32 value) {
  
  decimation_factor_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ContourSet.decimation_factor)
}

// bytes raw_coordinates = 3;
inline void ContourSet::clear_raw_coordinates() {
  raw_coordinates_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContourSet::raw_coordinates() const {
  // @@protoc_insertion_point(field_get:CARTA.ContourSet.raw_coordinates)
  return raw_coordinates_.GetNoArena();
}
inline void ContourSet::set_raw_coordinates(const ::std::string& value) {
  
  raw_coordinates_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ContourSet.raw_coordinates)
}
#if LANG_CXX11
inline void ContourSet::set_raw_coordinates(::std::string&& value) {
  
  raw_coordinates_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ContourSet.raw_coordinates)
}
#endif
inline void ContourSet::set_raw_coordinates(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_coordinates_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ContourSet.raw_coordinates)
}
inline void ContourSet::set_raw_coordinates(const void* value, size_t size) {
  
  raw_coordinates_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ContourSet.raw_coordinates)
}
inline ::std::string* ContourSet::mutable_raw_coordinates() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ContourSet.raw_coordinates)
  return raw_coordinates_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContourSet::release_raw_coordinates() {
  // @@protoc_insertion_point(field_release:CARTA.ContourSet.raw_coordinates)
  
  return raw_coordinates_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContourSet::set_allocated_raw_coordinates(::std::string* raw_coordinates) {
  if (raw_coordinates != NULL) {
    
  } else {
    
  }
  raw_coordinates_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_coordinates);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ContourSet.raw_coordinates)
}

// bytes raw_start_indices = 4;
inline void ContourSet::clear_raw_start_indices() {
  raw_start_indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContourSet::raw_start_indices() const {
  // @@protoc_insertion_point(field_get:CARTA.ContourSet.raw_start_indices)
  return raw_start_indices_.GetNoArena();
}
inline void ContourSet::set_raw_start_indices(const ::std::string& value) {
  
  raw_start_indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ContourSet.raw_start_indices)
}
#if LANG_CXX11
inline void ContourSet::set_raw_start_indices(::std::string&& value) {
  
  raw_start_indices_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ContourSet.raw_start_indices)
}
#endif
inline void ContourSet::set_raw_start_indices(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_start_indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ContourSet.raw_start_indices)
}
inline void ContourSet::set_raw_start_indices(const void* value, size_t size) {
  
  raw_start_indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ContourSet.raw_start_indices)
}
inline ::std::string* ContourSet::mutable_raw_start_indices() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ContourSet.raw_start_indices)
  return raw_start_indices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContourSet::release_raw_start_indices() {
  // @@protoc_insertion_point(field_release:CARTA.ContourSet.raw_start_indices)
  
  return raw_start_indices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContourSet::set_allocated_raw_start_indices(::std::string* raw_start_indices) {
  if (raw_start_indices != NULL) {
    
  } else {
    
  }
  raw_start_indices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_start_indices);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ContourSet.raw_start_indices)
}

// int32 uncompressed_coordinates_size = 5;
inline void ContourSet::clear_uncompressed_coordinates_size() {
  uncompressed_coordinates_size_ = 0;
}
inline ::google::protobuf::int32 ContourSet::uncompressed_coordinates_size() const {
  // @@protoc_insertion_point(field_get:CARTA.ContourSet.uncompressed_coordinates_size)
  return uncompressed_coordinates_size_;
}
inline void ContourSet::set_uncompressed_coordinates_size(::google::protobuf::int32 value) {
  
  uncompressed_coordinates_size_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ContourSet.uncompressed_coordinates_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_contour_5fimage_2eproto
