// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animation.proto

#include "animation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_animation_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_animation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StartAnimation_MatchedFramesEntry_DoNotUse;
}  // namespace protobuf_animation_2eproto
namespace protobuf_defs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AnimationFrame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MatchedFrameList;
}  // namespace protobuf_defs_2eproto
namespace protobuf_tiles_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tiles_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AddRequiredTiles;
}  // namespace protobuf_tiles_2eproto
namespace CARTA {
class StartAnimation_MatchedFramesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartAnimation_MatchedFramesEntry_DoNotUse>
      _instance;
} _StartAnimation_MatchedFramesEntry_DoNotUse_default_instance_;
class StartAnimationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartAnimation>
      _instance;
} _StartAnimation_default_instance_;
class StartAnimationAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartAnimationAck>
      _instance;
} _StartAnimationAck_default_instance_;
class AnimationFlowControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AnimationFlowControl>
      _instance;
} _AnimationFlowControl_default_instance_;
class StopAnimationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopAnimation>
      _instance;
} _StopAnimation_default_instance_;
}  // namespace CARTA
namespace protobuf_animation_2eproto {
static void InitDefaultsStartAnimation_MatchedFramesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_StartAnimation_MatchedFramesEntry_DoNotUse_default_instance_;
    new (ptr) ::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse();
  }
  ::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StartAnimation_MatchedFramesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStartAnimation_MatchedFramesEntry_DoNotUse}, {
      &protobuf_defs_2eproto::scc_info_MatchedFrameList.base,}};

static void InitDefaultsStartAnimation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_StartAnimation_default_instance_;
    new (ptr) ::CARTA::StartAnimation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::StartAnimation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_StartAnimation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsStartAnimation}, {
      &protobuf_defs_2eproto::scc_info_AnimationFrame.base,
      &protobuf_tiles_2eproto::scc_info_AddRequiredTiles.base,
      &protobuf_animation_2eproto::scc_info_StartAnimation_MatchedFramesEntry_DoNotUse.base,}};

static void InitDefaultsStartAnimationAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_StartAnimationAck_default_instance_;
    new (ptr) ::CARTA::StartAnimationAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::StartAnimationAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StartAnimationAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStartAnimationAck}, {}};

static void InitDefaultsAnimationFlowControl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_AnimationFlowControl_default_instance_;
    new (ptr) ::CARTA::AnimationFlowControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::AnimationFlowControl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AnimationFlowControl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnimationFlowControl}, {
      &protobuf_defs_2eproto::scc_info_AnimationFrame.base,}};

static void InitDefaultsStopAnimation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_StopAnimation_default_instance_;
    new (ptr) ::CARTA::StopAnimation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::StopAnimation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StopAnimation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStopAnimation}, {
      &protobuf_defs_2eproto::scc_info_AnimationFrame.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StartAnimation_MatchedFramesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartAnimation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartAnimationAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AnimationFlowControl.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopAnimation.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation, first_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation, start_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation, last_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation, delta_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation, frame_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation, looping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation, reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation, required_tiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimation, matched_frames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimationAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimationAck, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimationAck, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StartAnimationAck, animation_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AnimationFlowControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AnimationFlowControl, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AnimationFlowControl, received_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AnimationFlowControl, animation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AnimationFlowControl, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StopAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StopAnimation, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::StopAnimation, end_frame_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse)},
  { 9, -1, sizeof(::CARTA::StartAnimation)},
  { 24, -1, sizeof(::CARTA::StartAnimationAck)},
  { 32, -1, sizeof(::CARTA::AnimationFlowControl)},
  { 41, -1, sizeof(::CARTA::StopAnimation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_StartAnimation_MatchedFramesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_StartAnimation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_StartAnimationAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_AnimationFlowControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_StopAnimation_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "animation.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017animation.proto\022\005CARTA\032\ndefs.proto\032\013ti"
      "les.proto\"\310\003\n\016StartAnimation\022\017\n\007file_id\030"
      "\001 \001(\017\022*\n\013first_frame\030\002 \001(\0132\025.CARTA.Anima"
      "tionFrame\022*\n\013start_frame\030\003 \001(\0132\025.CARTA.A"
      "nimationFrame\022)\n\nlast_frame\030\004 \001(\0132\025.CART"
      "A.AnimationFrame\022*\n\013delta_frame\030\005 \001(\0132\025."
      "CARTA.AnimationFrame\022\022\n\nframe_rate\030\006 \001(\017"
      "\022\017\n\007looping\030\007 \001(\010\022\017\n\007reverse\030\010 \001(\010\022/\n\016re"
      "quired_tiles\030\t \001(\0132\027.CARTA.AddRequiredTi"
      "les\022@\n\016matched_frames\030\n \003(\0132(.CARTA.Star"
      "tAnimation.MatchedFramesEntry\032M\n\022Matched"
      "FramesEntry\022\013\n\003key\030\001 \001(\017\022&\n\005value\030\002 \001(\0132"
      "\027.CARTA.MatchedFrameList:\0028\001\"K\n\021StartAni"
      "mationAck\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 "
      "\001(\t\022\024\n\014animation_id\030\003 \001(\017\"\177\n\024AnimationFl"
      "owControl\022\017\n\007file_id\030\001 \001(\017\022-\n\016received_f"
      "rame\030\002 \001(\0132\025.CARTA.AnimationFrame\022\024\n\014ani"
      "mation_id\030\003 \001(\017\022\021\n\ttimestamp\030\004 \001(\020\"J\n\rSt"
      "opAnimation\022\017\n\007file_id\030\001 \001(\017\022(\n\tend_fram"
      "e\030\002 \001(\0132\025.CARTA.AnimationFrameb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 798);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "animation.proto", &protobuf_RegisterTypes);
  ::protobuf_defs_2eproto::AddDescriptors();
  ::protobuf_tiles_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_animation_2eproto
namespace CARTA {

// ===================================================================

StartAnimation_MatchedFramesEntry_DoNotUse::StartAnimation_MatchedFramesEntry_DoNotUse() {}
StartAnimation_MatchedFramesEntry_DoNotUse::StartAnimation_MatchedFramesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void StartAnimation_MatchedFramesEntry_DoNotUse::MergeFrom(const StartAnimation_MatchedFramesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata StartAnimation_MatchedFramesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_animation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_animation_2eproto::file_level_metadata[0];
}
void StartAnimation_MatchedFramesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void StartAnimation::InitAsDefaultInstance() {
  ::CARTA::_StartAnimation_default_instance_._instance.get_mutable()->first_frame_ = const_cast< ::CARTA::AnimationFrame*>(
      ::CARTA::AnimationFrame::internal_default_instance());
  ::CARTA::_StartAnimation_default_instance_._instance.get_mutable()->start_frame_ = const_cast< ::CARTA::AnimationFrame*>(
      ::CARTA::AnimationFrame::internal_default_instance());
  ::CARTA::_StartAnimation_default_instance_._instance.get_mutable()->last_frame_ = const_cast< ::CARTA::AnimationFrame*>(
      ::CARTA::AnimationFrame::internal_default_instance());
  ::CARTA::_StartAnimation_default_instance_._instance.get_mutable()->delta_frame_ = const_cast< ::CARTA::AnimationFrame*>(
      ::CARTA::AnimationFrame::internal_default_instance());
  ::CARTA::_StartAnimation_default_instance_._instance.get_mutable()->required_tiles_ = const_cast< ::CARTA::AddRequiredTiles*>(
      ::CARTA::AddRequiredTiles::internal_default_instance());
}
void StartAnimation::clear_first_frame() {
  if (GetArenaNoVirtual() == NULL && first_frame_ != NULL) {
    delete first_frame_;
  }
  first_frame_ = NULL;
}
void StartAnimation::clear_start_frame() {
  if (GetArenaNoVirtual() == NULL && start_frame_ != NULL) {
    delete start_frame_;
  }
  start_frame_ = NULL;
}
void StartAnimation::clear_last_frame() {
  if (GetArenaNoVirtual() == NULL && last_frame_ != NULL) {
    delete last_frame_;
  }
  last_frame_ = NULL;
}
void StartAnimation::clear_delta_frame() {
  if (GetArenaNoVirtual() == NULL && delta_frame_ != NULL) {
    delete delta_frame_;
  }
  delta_frame_ = NULL;
}
void StartAnimation::clear_required_tiles() {
  if (GetArenaNoVirtual() == NULL && required_tiles_ != NULL) {
    delete required_tiles_;
  }
  required_tiles_ = NULL;
}
void StartAnimation::clear_matched_frames() {
  matched_frames_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartAnimation::kFileIdFieldNumber;
const int StartAnimation::kFirstFrameFieldNumber;
const int StartAnimation::kStartFrameFieldNumber;
const int StartAnimation::kLastFrameFieldNumber;
const int StartAnimation::kDeltaFrameFieldNumber;
const int StartAnimation::kFrameRateFieldNumber;
const int StartAnimation::kLoopingFieldNumber;
const int StartAnimation::kReverseFieldNumber;
const int StartAnimation::kRequiredTilesFieldNumber;
const int StartAnimation::kMatchedFramesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartAnimation::StartAnimation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_animation_2eproto::scc_info_StartAnimation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.StartAnimation)
}
StartAnimation::StartAnimation(const StartAnimation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matched_frames_.MergeFrom(from.matched_frames_);
  if (from.has_first_frame()) {
    first_frame_ = new ::CARTA::AnimationFrame(*from.first_frame_);
  } else {
    first_frame_ = NULL;
  }
  if (from.has_start_frame()) {
    start_frame_ = new ::CARTA::AnimationFrame(*from.start_frame_);
  } else {
    start_frame_ = NULL;
  }
  if (from.has_last_frame()) {
    last_frame_ = new ::CARTA::AnimationFrame(*from.last_frame_);
  } else {
    last_frame_ = NULL;
  }
  if (from.has_delta_frame()) {
    delta_frame_ = new ::CARTA::AnimationFrame(*from.delta_frame_);
  } else {
    delta_frame_ = NULL;
  }
  if (from.has_required_tiles()) {
    required_tiles_ = new ::CARTA::AddRequiredTiles(*from.required_tiles_);
  } else {
    required_tiles_ = NULL;
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(reverse_));
  // @@protoc_insertion_point(copy_constructor:CARTA.StartAnimation)
}

void StartAnimation::SharedCtor() {
  ::memset(&first_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_) -
      reinterpret_cast<char*>(&first_frame_)) + sizeof(reverse_));
}

StartAnimation::~StartAnimation() {
  // @@protoc_insertion_point(destructor:CARTA.StartAnimation)
  SharedDtor();
}

void StartAnimation::SharedDtor() {
  if (this != internal_default_instance()) delete first_frame_;
  if (this != internal_default_instance()) delete start_frame_;
  if (this != internal_default_instance()) delete last_frame_;
  if (this != internal_default_instance()) delete delta_frame_;
  if (this != internal_default_instance()) delete required_tiles_;
}

void StartAnimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StartAnimation::descriptor() {
  ::protobuf_animation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_animation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartAnimation& StartAnimation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_animation_2eproto::scc_info_StartAnimation.base);
  return *internal_default_instance();
}


void StartAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.StartAnimation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matched_frames_.Clear();
  if (GetArenaNoVirtual() == NULL && first_frame_ != NULL) {
    delete first_frame_;
  }
  first_frame_ = NULL;
  if (GetArenaNoVirtual() == NULL && start_frame_ != NULL) {
    delete start_frame_;
  }
  start_frame_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_frame_ != NULL) {
    delete last_frame_;
  }
  last_frame_ = NULL;
  if (GetArenaNoVirtual() == NULL && delta_frame_ != NULL) {
    delete delta_frame_;
  }
  delta_frame_ = NULL;
  if (GetArenaNoVirtual() == NULL && required_tiles_ != NULL) {
    delete required_tiles_;
  }
  required_tiles_ = NULL;
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(reverse_));
  _internal_metadata_.Clear();
}

bool StartAnimation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.StartAnimation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.AnimationFrame first_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_first_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.AnimationFrame start_frame = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.AnimationFrame last_frame = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.AnimationFrame delta_frame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delta_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 frame_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &frame_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool looping = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &looping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reverse = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.AddRequiredTiles required_tiles = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_required_tiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<sfixed32, .CARTA.MatchedFrameList> matched_frames = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          StartAnimation_MatchedFramesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              StartAnimation_MatchedFramesEntry_DoNotUse,
              ::google::protobuf::int32, ::CARTA::MatchedFrameList,
              ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList > > parser(&matched_frames_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.StartAnimation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.StartAnimation)
  return false;
#undef DO_
}

void StartAnimation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.StartAnimation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // .CARTA.AnimationFrame first_frame = 2;
  if (this->has_first_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_first_frame(), output);
  }

  // .CARTA.AnimationFrame start_frame = 3;
  if (this->has_start_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_start_frame(), output);
  }

  // .CARTA.AnimationFrame last_frame = 4;
  if (this->has_last_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_last_frame(), output);
  }

  // .CARTA.AnimationFrame delta_frame = 5;
  if (this->has_delta_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_delta_frame(), output);
  }

  // sfixed32 frame_rate = 6;
  if (this->frame_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->frame_rate(), output);
  }

  // bool looping = 7;
  if (this->looping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->looping(), output);
  }

  // bool reverse = 8;
  if (this->reverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->reverse(), output);
  }

  // .CARTA.AddRequiredTiles required_tiles = 9;
  if (this->has_required_tiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_required_tiles(), output);
  }

  // map<sfixed32, .CARTA.MatchedFrameList> matched_frames = 10;
  if (!this->matched_frames().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->matched_frames().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->matched_frames().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >::const_iterator
          it = this->matched_frames().begin();
          it != this->matched_frames().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StartAnimation_MatchedFramesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(matched_frames_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    } else {
      ::std::unique_ptr<StartAnimation_MatchedFramesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >::const_iterator
          it = this->matched_frames().begin();
          it != this->matched_frames().end(); ++it) {
        entry.reset(matched_frames_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.StartAnimation)
}

::google::protobuf::uint8* StartAnimation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.StartAnimation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // .CARTA.AnimationFrame first_frame = 2;
  if (this->has_first_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_first_frame(), deterministic, target);
  }

  // .CARTA.AnimationFrame start_frame = 3;
  if (this->has_start_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_start_frame(), deterministic, target);
  }

  // .CARTA.AnimationFrame last_frame = 4;
  if (this->has_last_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_last_frame(), deterministic, target);
  }

  // .CARTA.AnimationFrame delta_frame = 5;
  if (this->has_delta_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_delta_frame(), deterministic, target);
  }

  // sfixed32 frame_rate = 6;
  if (this->frame_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->frame_rate(), target);
  }

  // bool looping = 7;
  if (this->looping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->looping(), target);
  }

  // bool reverse = 8;
  if (this->reverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->reverse(), target);
  }

  // .CARTA.AddRequiredTiles required_tiles = 9;
  if (this->has_required_tiles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_required_tiles(), deterministic, target);
  }

  // map<sfixed32, .CARTA.MatchedFrameList> matched_frames = 10;
  if (!this->matched_frames().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->matched_frames().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->matched_frames().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >::const_iterator
          it = this->matched_frames().begin();
          it != this->matched_frames().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<StartAnimation_MatchedFramesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(matched_frames_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<StartAnimation_MatchedFramesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >::const_iterator
          it = this->matched_frames().begin();
          it != this->matched_frames().end(); ++it) {
        entry.reset(matched_frames_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.StartAnimation)
  return target;
}

size_t StartAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.StartAnimation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<sfixed32, .CARTA.MatchedFrameList> matched_frames = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->matched_frames_size());
  {
    ::std::unique_ptr<StartAnimation_MatchedFramesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >::const_iterator
        it = this->matched_frames().begin();
        it != this->matched_frames().end(); ++it) {
      entry.reset(matched_frames_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .CARTA.AnimationFrame first_frame = 2;
  if (this->has_first_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *first_frame_);
  }

  // .CARTA.AnimationFrame start_frame = 3;
  if (this->has_start_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_frame_);
  }

  // .CARTA.AnimationFrame last_frame = 4;
  if (this->has_last_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_frame_);
  }

  // .CARTA.AnimationFrame delta_frame = 5;
  if (this->has_delta_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *delta_frame_);
  }

  // .CARTA.AddRequiredTiles required_tiles = 9;
  if (this->has_required_tiles()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *required_tiles_);
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 frame_rate = 6;
  if (this->frame_rate() != 0) {
    total_size += 1 + 4;
  }

  // bool looping = 7;
  if (this->looping() != 0) {
    total_size += 1 + 1;
  }

  // bool reverse = 8;
  if (this->reverse() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartAnimation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.StartAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  const StartAnimation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartAnimation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.StartAnimation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.StartAnimation)
    MergeFrom(*source);
  }
}

void StartAnimation::MergeFrom(const StartAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.StartAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matched_frames_.MergeFrom(from.matched_frames_);
  if (from.has_first_frame()) {
    mutable_first_frame()->::CARTA::AnimationFrame::MergeFrom(from.first_frame());
  }
  if (from.has_start_frame()) {
    mutable_start_frame()->::CARTA::AnimationFrame::MergeFrom(from.start_frame());
  }
  if (from.has_last_frame()) {
    mutable_last_frame()->::CARTA::AnimationFrame::MergeFrom(from.last_frame());
  }
  if (from.has_delta_frame()) {
    mutable_delta_frame()->::CARTA::AnimationFrame::MergeFrom(from.delta_frame());
  }
  if (from.has_required_tiles()) {
    mutable_required_tiles()->::CARTA::AddRequiredTiles::MergeFrom(from.required_tiles());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.frame_rate() != 0) {
    set_frame_rate(from.frame_rate());
  }
  if (from.looping() != 0) {
    set_looping(from.looping());
  }
  if (from.reverse() != 0) {
    set_reverse(from.reverse());
  }
}

void StartAnimation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.StartAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartAnimation::CopyFrom(const StartAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.StartAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAnimation::IsInitialized() const {
  return true;
}

void StartAnimation::Swap(StartAnimation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartAnimation::InternalSwap(StartAnimation* other) {
  using std::swap;
  matched_frames_.Swap(&other->matched_frames_);
  swap(first_frame_, other->first_frame_);
  swap(start_frame_, other->start_frame_);
  swap(last_frame_, other->last_frame_);
  swap(delta_frame_, other->delta_frame_);
  swap(required_tiles_, other->required_tiles_);
  swap(file_id_, other->file_id_);
  swap(frame_rate_, other->frame_rate_);
  swap(looping_, other->looping_);
  swap(reverse_, other->reverse_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StartAnimation::GetMetadata() const {
  protobuf_animation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_animation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartAnimationAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartAnimationAck::kSuccessFieldNumber;
const int StartAnimationAck::kMessageFieldNumber;
const int StartAnimationAck::kAnimationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartAnimationAck::StartAnimationAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_animation_2eproto::scc_info_StartAnimationAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.StartAnimationAck)
}
StartAnimationAck::StartAnimationAck(const StartAnimationAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&animation_id_) -
    reinterpret_cast<char*>(&success_)) + sizeof(animation_id_));
  // @@protoc_insertion_point(copy_constructor:CARTA.StartAnimationAck)
}

void StartAnimationAck::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animation_id_) -
      reinterpret_cast<char*>(&success_)) + sizeof(animation_id_));
}

StartAnimationAck::~StartAnimationAck() {
  // @@protoc_insertion_point(destructor:CARTA.StartAnimationAck)
  SharedDtor();
}

void StartAnimationAck::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StartAnimationAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StartAnimationAck::descriptor() {
  ::protobuf_animation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_animation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartAnimationAck& StartAnimationAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_animation_2eproto::scc_info_StartAnimationAck.base);
  return *internal_default_instance();
}


void StartAnimationAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.StartAnimationAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animation_id_) -
      reinterpret_cast<char*>(&success_)) + sizeof(animation_id_));
  _internal_metadata_.Clear();
}

bool StartAnimationAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.StartAnimationAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.StartAnimationAck.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 animation_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &animation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.StartAnimationAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.StartAnimationAck)
  return false;
#undef DO_
}

void StartAnimationAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.StartAnimationAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.StartAnimationAck.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // sfixed32 animation_id = 3;
  if (this->animation_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->animation_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.StartAnimationAck)
}

::google::protobuf::uint8* StartAnimationAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.StartAnimationAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.StartAnimationAck.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // sfixed32 animation_id = 3;
  if (this->animation_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->animation_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.StartAnimationAck)
  return target;
}

size_t StartAnimationAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.StartAnimationAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // sfixed32 animation_id = 3;
  if (this->animation_id() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartAnimationAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.StartAnimationAck)
  GOOGLE_DCHECK_NE(&from, this);
  const StartAnimationAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartAnimationAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.StartAnimationAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.StartAnimationAck)
    MergeFrom(*source);
  }
}

void StartAnimationAck::MergeFrom(const StartAnimationAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.StartAnimationAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.animation_id() != 0) {
    set_animation_id(from.animation_id());
  }
}

void StartAnimationAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.StartAnimationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartAnimationAck::CopyFrom(const StartAnimationAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.StartAnimationAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAnimationAck::IsInitialized() const {
  return true;
}

void StartAnimationAck::Swap(StartAnimationAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartAnimationAck::InternalSwap(StartAnimationAck* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(animation_id_, other->animation_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StartAnimationAck::GetMetadata() const {
  protobuf_animation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_animation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AnimationFlowControl::InitAsDefaultInstance() {
  ::CARTA::_AnimationFlowControl_default_instance_._instance.get_mutable()->received_frame_ = const_cast< ::CARTA::AnimationFrame*>(
      ::CARTA::AnimationFrame::internal_default_instance());
}
void AnimationFlowControl::clear_received_frame() {
  if (GetArenaNoVirtual() == NULL && received_frame_ != NULL) {
    delete received_frame_;
  }
  received_frame_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnimationFlowControl::kFileIdFieldNumber;
const int AnimationFlowControl::kReceivedFrameFieldNumber;
const int AnimationFlowControl::kAnimationIdFieldNumber;
const int AnimationFlowControl::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnimationFlowControl::AnimationFlowControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_animation_2eproto::scc_info_AnimationFlowControl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.AnimationFlowControl)
}
AnimationFlowControl::AnimationFlowControl(const AnimationFlowControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_received_frame()) {
    received_frame_ = new ::CARTA::AnimationFrame(*from.received_frame_);
  } else {
    received_frame_ = NULL;
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CARTA.AnimationFlowControl)
}

void AnimationFlowControl::SharedCtor() {
  ::memset(&received_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&received_frame_)) + sizeof(timestamp_));
}

AnimationFlowControl::~AnimationFlowControl() {
  // @@protoc_insertion_point(destructor:CARTA.AnimationFlowControl)
  SharedDtor();
}

void AnimationFlowControl::SharedDtor() {
  if (this != internal_default_instance()) delete received_frame_;
}

void AnimationFlowControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AnimationFlowControl::descriptor() {
  ::protobuf_animation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_animation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnimationFlowControl& AnimationFlowControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_animation_2eproto::scc_info_AnimationFlowControl.base);
  return *internal_default_instance();
}


void AnimationFlowControl::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.AnimationFlowControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && received_frame_ != NULL) {
    delete received_frame_;
  }
  received_frame_ = NULL;
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool AnimationFlowControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.AnimationFlowControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.AnimationFrame received_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_received_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 animation_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &animation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.AnimationFlowControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.AnimationFlowControl)
  return false;
#undef DO_
}

void AnimationFlowControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.AnimationFlowControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // .CARTA.AnimationFrame received_frame = 2;
  if (this->has_received_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_received_frame(), output);
  }

  // sfixed32 animation_id = 3;
  if (this->animation_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->animation_id(), output);
  }

  // sfixed64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.AnimationFlowControl)
}

::google::protobuf::uint8* AnimationFlowControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.AnimationFlowControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // .CARTA.AnimationFrame received_frame = 2;
  if (this->has_received_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_received_frame(), deterministic, target);
  }

  // sfixed32 animation_id = 3;
  if (this->animation_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->animation_id(), target);
  }

  // sfixed64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.AnimationFlowControl)
  return target;
}

size_t AnimationFlowControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.AnimationFlowControl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .CARTA.AnimationFrame received_frame = 2;
  if (this->has_received_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *received_frame_);
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 animation_id = 3;
  if (this->animation_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimationFlowControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.AnimationFlowControl)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimationFlowControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnimationFlowControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.AnimationFlowControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.AnimationFlowControl)
    MergeFrom(*source);
  }
}

void AnimationFlowControl::MergeFrom(const AnimationFlowControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.AnimationFlowControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_received_frame()) {
    mutable_received_frame()->::CARTA::AnimationFrame::MergeFrom(from.received_frame());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.animation_id() != 0) {
    set_animation_id(from.animation_id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void AnimationFlowControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.AnimationFlowControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationFlowControl::CopyFrom(const AnimationFlowControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.AnimationFlowControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationFlowControl::IsInitialized() const {
  return true;
}

void AnimationFlowControl::Swap(AnimationFlowControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnimationFlowControl::InternalSwap(AnimationFlowControl* other) {
  using std::swap;
  swap(received_frame_, other->received_frame_);
  swap(file_id_, other->file_id_);
  swap(animation_id_, other->animation_id_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AnimationFlowControl::GetMetadata() const {
  protobuf_animation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_animation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StopAnimation::InitAsDefaultInstance() {
  ::CARTA::_StopAnimation_default_instance_._instance.get_mutable()->end_frame_ = const_cast< ::CARTA::AnimationFrame*>(
      ::CARTA::AnimationFrame::internal_default_instance());
}
void StopAnimation::clear_end_frame() {
  if (GetArenaNoVirtual() == NULL && end_frame_ != NULL) {
    delete end_frame_;
  }
  end_frame_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopAnimation::kFileIdFieldNumber;
const int StopAnimation::kEndFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopAnimation::StopAnimation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_animation_2eproto::scc_info_StopAnimation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.StopAnimation)
}
StopAnimation::StopAnimation(const StopAnimation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_end_frame()) {
    end_frame_ = new ::CARTA::AnimationFrame(*from.end_frame_);
  } else {
    end_frame_ = NULL;
  }
  file_id_ = from.file_id_;
  // @@protoc_insertion_point(copy_constructor:CARTA.StopAnimation)
}

void StopAnimation::SharedCtor() {
  ::memset(&end_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_id_) -
      reinterpret_cast<char*>(&end_frame_)) + sizeof(file_id_));
}

StopAnimation::~StopAnimation() {
  // @@protoc_insertion_point(destructor:CARTA.StopAnimation)
  SharedDtor();
}

void StopAnimation::SharedDtor() {
  if (this != internal_default_instance()) delete end_frame_;
}

void StopAnimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StopAnimation::descriptor() {
  ::protobuf_animation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_animation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopAnimation& StopAnimation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_animation_2eproto::scc_info_StopAnimation.base);
  return *internal_default_instance();
}


void StopAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.StopAnimation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && end_frame_ != NULL) {
    delete end_frame_;
  }
  end_frame_ = NULL;
  file_id_ = 0;
  _internal_metadata_.Clear();
}

bool StopAnimation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.StopAnimation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.AnimationFrame end_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.StopAnimation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.StopAnimation)
  return false;
#undef DO_
}

void StopAnimation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.StopAnimation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // .CARTA.AnimationFrame end_frame = 2;
  if (this->has_end_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_end_frame(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.StopAnimation)
}

::google::protobuf::uint8* StopAnimation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.StopAnimation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // .CARTA.AnimationFrame end_frame = 2;
  if (this->has_end_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_end_frame(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.StopAnimation)
  return target;
}

size_t StopAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.StopAnimation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .CARTA.AnimationFrame end_frame = 2;
  if (this->has_end_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_frame_);
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopAnimation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.StopAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  const StopAnimation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopAnimation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.StopAnimation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.StopAnimation)
    MergeFrom(*source);
  }
}

void StopAnimation::MergeFrom(const StopAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.StopAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_end_frame()) {
    mutable_end_frame()->::CARTA::AnimationFrame::MergeFrom(from.end_frame());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
}

void StopAnimation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.StopAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAnimation::CopyFrom(const StopAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.StopAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAnimation::IsInitialized() const {
  return true;
}

void StopAnimation::Swap(StopAnimation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopAnimation::InternalSwap(StopAnimation* other) {
  using std::swap;
  swap(end_frame_, other->end_frame_);
  swap(file_id_, other->file_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopAnimation::GetMetadata() const {
  protobuf_animation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_animation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse* Arena::CreateMaybeMessage< ::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::StartAnimation* Arena::CreateMaybeMessage< ::CARTA::StartAnimation >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::StartAnimation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::StartAnimationAck* Arena::CreateMaybeMessage< ::CARTA::StartAnimationAck >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::StartAnimationAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::AnimationFlowControl* Arena::CreateMaybeMessage< ::CARTA::AnimationFlowControl >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::AnimationFlowControl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::StopAnimation* Arena::CreateMaybeMessage< ::CARTA::StopAnimation >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::StopAnimation >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
