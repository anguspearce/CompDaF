// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raster_tile.proto

#ifndef PROTOBUF_INCLUDED_raster_5ftile_2eproto
#define PROTOBUF_INCLUDED_raster_5ftile_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_raster_5ftile_2eproto 

namespace protobuf_raster_5ftile_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_raster_5ftile_2eproto
namespace CARTA {
class RasterTileData;
class RasterTileDataDefaultTypeInternal;
extern RasterTileDataDefaultTypeInternal _RasterTileData_default_instance_;
class RasterTileSync;
class RasterTileSyncDefaultTypeInternal;
extern RasterTileSyncDefaultTypeInternal _RasterTileSync_default_instance_;
class TileData;
class TileDataDefaultTypeInternal;
extern TileDataDefaultTypeInternal _TileData_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::RasterTileData* Arena::CreateMaybeMessage<::CARTA::RasterTileData>(Arena*);
template<> ::CARTA::RasterTileSync* Arena::CreateMaybeMessage<::CARTA::RasterTileSync>(Arena*);
template<> ::CARTA::TileData* Arena::CreateMaybeMessage<::CARTA::TileData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class RasterTileSync : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.RasterTileSync) */ {
 public:
  RasterTileSync();
  virtual ~RasterTileSync();

  RasterTileSync(const RasterTileSync& from);

  inline RasterTileSync& operator=(const RasterTileSync& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RasterTileSync(RasterTileSync&& from) noexcept
    : RasterTileSync() {
    *this = ::std::move(from);
  }

  inline RasterTileSync& operator=(RasterTileSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RasterTileSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RasterTileSync* internal_default_instance() {
    return reinterpret_cast<const RasterTileSync*>(
               &_RasterTileSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RasterTileSync* other);
  friend void swap(RasterTileSync& a, RasterTileSync& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RasterTileSync* New() const final {
    return CreateMaybeMessage<RasterTileSync>(NULL);
  }

  RasterTileSync* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RasterTileSync>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RasterTileSync& from);
  void MergeFrom(const RasterTileSync& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RasterTileSync* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // sfixed32 stokes = 3;
  void clear_stokes();
  static const int kStokesFieldNumber = 3;
  ::google::protobuf::int32 stokes() const;
  void set_stokes(::google::protobuf::int32 value);

  // sfixed32 animation_id = 4;
  void clear_animation_id();
  static const int kAnimationIdFieldNumber = 4;
  ::google::protobuf::int32 animation_id() const;
  void set_animation_id(::google::protobuf::int32 value);

  // bool end_sync = 5;
  void clear_end_sync();
  static const int kEndSyncFieldNumber = 5;
  bool end_sync() const;
  void set_end_sync(bool value);

  // @@protoc_insertion_point(class_scope:CARTA.RasterTileSync)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 stokes_;
  ::google::protobuf::int32 animation_id_;
  bool end_sync_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raster_5ftile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RasterTileData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.RasterTileData) */ {
 public:
  RasterTileData();
  virtual ~RasterTileData();

  RasterTileData(const RasterTileData& from);

  inline RasterTileData& operator=(const RasterTileData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RasterTileData(RasterTileData&& from) noexcept
    : RasterTileData() {
    *this = ::std::move(from);
  }

  inline RasterTileData& operator=(RasterTileData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RasterTileData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RasterTileData* internal_default_instance() {
    return reinterpret_cast<const RasterTileData*>(
               &_RasterTileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RasterTileData* other);
  friend void swap(RasterTileData& a, RasterTileData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RasterTileData* New() const final {
    return CreateMaybeMessage<RasterTileData>(NULL);
  }

  RasterTileData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RasterTileData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RasterTileData& from);
  void MergeFrom(const RasterTileData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RasterTileData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARTA.TileData tiles = 7;
  int tiles_size() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 7;
  ::CARTA::TileData* mutable_tiles(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::TileData >*
      mutable_tiles();
  const ::CARTA::TileData& tiles(int index) const;
  ::CARTA::TileData* add_tiles();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::TileData >&
      tiles() const;

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // sfixed32 stokes = 3;
  void clear_stokes();
  static const int kStokesFieldNumber = 3;
  ::google::protobuf::int32 stokes() const;
  void set_stokes(::google::protobuf::int32 value);

  // .CARTA.CompressionType compression_type = 4;
  void clear_compression_type();
  static const int kCompressionTypeFieldNumber = 4;
  ::CARTA::CompressionType compression_type() const;
  void set_compression_type(::CARTA::CompressionType value);

  // float compression_quality = 5;
  void clear_compression_quality();
  static const int kCompressionQualityFieldNumber = 5;
  float compression_quality() const;
  void set_compression_quality(float value);

  // sfixed32 animation_id = 6;
  void clear_animation_id();
  static const int kAnimationIdFieldNumber = 6;
  ::google::protobuf::int32 animation_id() const;
  void set_animation_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.RasterTileData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::TileData > tiles_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 stokes_;
  int compression_type_;
  float compression_quality_;
  ::google::protobuf::int32 animation_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raster_5ftile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TileData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.TileData) */ {
 public:
  TileData();
  virtual ~TileData();

  TileData(const TileData& from);

  inline TileData& operator=(const TileData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TileData(TileData&& from) noexcept
    : TileData() {
    *this = ::std::move(from);
  }

  inline TileData& operator=(TileData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TileData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileData* internal_default_instance() {
    return reinterpret_cast<const TileData*>(
               &_TileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TileData* other);
  friend void swap(TileData& a, TileData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TileData* New() const final {
    return CreateMaybeMessage<TileData>(NULL);
  }

  TileData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TileData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TileData& from);
  void MergeFrom(const TileData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes image_data = 6;
  void clear_image_data();
  static const int kImageDataFieldNumber = 6;
  const ::std::string& image_data() const;
  void set_image_data(const ::std::string& value);
  #if LANG_CXX11
  void set_image_data(::std::string&& value);
  #endif
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  ::std::string* mutable_image_data();
  ::std::string* release_image_data();
  void set_allocated_image_data(::std::string* image_data);

  // bytes nan_encodings = 7;
  void clear_nan_encodings();
  static const int kNanEncodingsFieldNumber = 7;
  const ::std::string& nan_encodings() const;
  void set_nan_encodings(const ::std::string& value);
  #if LANG_CXX11
  void set_nan_encodings(::std::string&& value);
  #endif
  void set_nan_encodings(const char* value);
  void set_nan_encodings(const void* value, size_t size);
  ::std::string* mutable_nan_encodings();
  ::std::string* release_nan_encodings();
  void set_allocated_nan_encodings(::std::string* nan_encodings);

  // sfixed32 layer = 1;
  void clear_layer();
  static const int kLayerFieldNumber = 1;
  ::google::protobuf::int32 layer() const;
  void set_layer(::google::protobuf::int32 value);

  // sfixed32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // sfixed32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // sfixed32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // sfixed32 height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.TileData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_data_;
  ::google::protobuf::internal::ArenaStringPtr nan_encodings_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raster_5ftile_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RasterTileSync

// sfixed32 file_id = 1;
inline void RasterTileSync::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 RasterTileSync::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileSync.file_id)
  return file_id_;
}
inline void RasterTileSync::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RasterTileSync.file_id)
}

// sfixed32 channel = 2;
inline void RasterTileSync::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 RasterTileSync::channel() const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileSync.channel)
  return channel_;
}
inline void RasterTileSync::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RasterTileSync.channel)
}

// sfixed32 stokes = 3;
inline void RasterTileSync::clear_stokes() {
  stokes_ = 0;
}
inline ::google::protobuf::int32 RasterTileSync::stokes() const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileSync.stokes)
  return stokes_;
}
inline void RasterTileSync::set_stokes(::google::protobuf::int32 value) {
  
  stokes_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RasterTileSync.stokes)
}

// sfixed32 animation_id = 4;
inline void RasterTileSync::clear_animation_id() {
  animation_id_ = 0;
}
inline ::google::protobuf::int32 RasterTileSync::animation_id() const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileSync.animation_id)
  return animation_id_;
}
inline void RasterTileSync::set_animation_id(::google::protobuf::int32 value) {
  
  animation_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RasterTileSync.animation_id)
}

// bool end_sync = 5;
inline void RasterTileSync::clear_end_sync() {
  end_sync_ = false;
}
inline bool RasterTileSync::end_sync() const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileSync.end_sync)
  return end_sync_;
}
inline void RasterTileSync::set_end_sync(bool value) {
  
  end_sync_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RasterTileSync.end_sync)
}

// -------------------------------------------------------------------

// RasterTileData

// sfixed32 file_id = 1;
inline void RasterTileData::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 RasterTileData::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileData.file_id)
  return file_id_;
}
inline void RasterTileData::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RasterTileData.file_id)
}

// sfixed32 channel = 2;
inline void RasterTileData::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 RasterTileData::channel() const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileData.channel)
  return channel_;
}
inline void RasterTileData::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RasterTileData.channel)
}

// sfixed32 stokes = 3;
inline void RasterTileData::clear_stokes() {
  stokes_ = 0;
}
inline ::google::protobuf::int32 RasterTileData::stokes() const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileData.stokes)
  return stokes_;
}
inline void RasterTileData::set_stokes(::google::protobuf::int32 value) {
  
  stokes_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RasterTileData.stokes)
}

// .CARTA.CompressionType compression_type = 4;
inline void RasterTileData::clear_compression_type() {
  compression_type_ = 0;
}
inline ::CARTA::CompressionType RasterTileData::compression_type() const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileData.compression_type)
  return static_cast< ::CARTA::CompressionType >(compression_type_);
}
inline void RasterTileData::set_compression_type(::CARTA::CompressionType value) {
  
  compression_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RasterTileData.compression_type)
}

// float compression_quality = 5;
inline void RasterTileData::clear_compression_quality() {
  compression_quality_ = 0;
}
inline float RasterTileData::compression_quality() const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileData.compression_quality)
  return compression_quality_;
}
inline void RasterTileData::set_compression_quality(float value) {
  
  compression_quality_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RasterTileData.compression_quality)
}

// sfixed32 animation_id = 6;
inline void RasterTileData::clear_animation_id() {
  animation_id_ = 0;
}
inline ::google::protobuf::int32 RasterTileData::animation_id() const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileData.animation_id)
  return animation_id_;
}
inline void RasterTileData::set_animation_id(::google::protobuf::int32 value) {
  
  animation_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RasterTileData.animation_id)
}

// repeated .CARTA.TileData tiles = 7;
inline int RasterTileData::tiles_size() const {
  return tiles_.size();
}
inline void RasterTileData::clear_tiles() {
  tiles_.Clear();
}
inline ::CARTA::TileData* RasterTileData::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.RasterTileData.tiles)
  return tiles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::TileData >*
RasterTileData::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.RasterTileData.tiles)
  return &tiles_;
}
inline const ::CARTA::TileData& RasterTileData::tiles(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.RasterTileData.tiles)
  return tiles_.Get(index);
}
inline ::CARTA::TileData* RasterTileData::add_tiles() {
  // @@protoc_insertion_point(field_add:CARTA.RasterTileData.tiles)
  return tiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::TileData >&
RasterTileData::tiles() const {
  // @@protoc_insertion_point(field_list:CARTA.RasterTileData.tiles)
  return tiles_;
}

// -------------------------------------------------------------------

// TileData

// sfixed32 layer = 1;
inline void TileData::clear_layer() {
  layer_ = 0;
}
inline ::google::protobuf::int32 TileData::layer() const {
  // @@protoc_insertion_point(field_get:CARTA.TileData.layer)
  return layer_;
}
inline void TileData::set_layer(::google::protobuf::int32 value) {
  
  layer_ = value;
  // @@protoc_insertion_point(field_set:CARTA.TileData.layer)
}

// sfixed32 x = 2;
inline void TileData::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 TileData::x() const {
  // @@protoc_insertion_point(field_get:CARTA.TileData.x)
  return x_;
}
inline void TileData::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:CARTA.TileData.x)
}

// sfixed32 y = 3;
inline void TileData::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 TileData::y() const {
  // @@protoc_insertion_point(field_get:CARTA.TileData.y)
  return y_;
}
inline void TileData::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:CARTA.TileData.y)
}

// sfixed32 width = 4;
inline void TileData::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 TileData::width() const {
  // @@protoc_insertion_point(field_get:CARTA.TileData.width)
  return width_;
}
inline void TileData::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:CARTA.TileData.width)
}

// sfixed32 height = 5;
inline void TileData::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 TileData::height() const {
  // @@protoc_insertion_point(field_get:CARTA.TileData.height)
  return height_;
}
inline void TileData::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:CARTA.TileData.height)
}

// bytes image_data = 6;
inline void TileData::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TileData::image_data() const {
  // @@protoc_insertion_point(field_get:CARTA.TileData.image_data)
  return image_data_.GetNoArena();
}
inline void TileData::set_image_data(const ::std::string& value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.TileData.image_data)
}
#if LANG_CXX11
inline void TileData::set_image_data(::std::string&& value) {
  
  image_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.TileData.image_data)
}
#endif
inline void TileData::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.TileData.image_data)
}
inline void TileData::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.TileData.image_data)
}
inline ::std::string* TileData::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.TileData.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TileData::release_image_data() {
  // @@protoc_insertion_point(field_release:CARTA.TileData.image_data)
  
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TileData::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:CARTA.TileData.image_data)
}

// bytes nan_encodings = 7;
inline void TileData::clear_nan_encodings() {
  nan_encodings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TileData::nan_encodings() const {
  // @@protoc_insertion_point(field_get:CARTA.TileData.nan_encodings)
  return nan_encodings_.GetNoArena();
}
inline void TileData::set_nan_encodings(const ::std::string& value) {
  
  nan_encodings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.TileData.nan_encodings)
}
#if LANG_CXX11
inline void TileData::set_nan_encodings(::std::string&& value) {
  
  nan_encodings_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.TileData.nan_encodings)
}
#endif
inline void TileData::set_nan_encodings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nan_encodings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.TileData.nan_encodings)
}
inline void TileData::set_nan_encodings(const void* value, size_t size) {
  
  nan_encodings_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.TileData.nan_encodings)
}
inline ::std::string* TileData::mutable_nan_encodings() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.TileData.nan_encodings)
  return nan_encodings_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TileData::release_nan_encodings() {
  // @@protoc_insertion_point(field_release:CARTA.TileData.nan_encodings)
  
  return nan_encodings_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TileData::set_allocated_nan_encodings(::std::string* nan_encodings) {
  if (nan_encodings != NULL) {
    
  } else {
    
  }
  nan_encodings_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nan_encodings);
  // @@protoc_insertion_point(field_set_allocated:CARTA.TileData.nan_encodings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_raster_5ftile_2eproto
