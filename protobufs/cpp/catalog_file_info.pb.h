// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: catalog_file_info.proto

#ifndef PROTOBUF_INCLUDED_catalog_5ffile_5finfo_2eproto
#define PROTOBUF_INCLUDED_catalog_5ffile_5finfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "defs.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_catalog_5ffile_5finfo_2eproto 

namespace protobuf_catalog_5ffile_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_catalog_5ffile_5finfo_2eproto
namespace CARTA {
class CatalogFileInfoRequest;
class CatalogFileInfoRequestDefaultTypeInternal;
extern CatalogFileInfoRequestDefaultTypeInternal _CatalogFileInfoRequest_default_instance_;
class CatalogFileInfoResponse;
class CatalogFileInfoResponseDefaultTypeInternal;
extern CatalogFileInfoResponseDefaultTypeInternal _CatalogFileInfoResponse_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::CatalogFileInfoRequest* Arena::CreateMaybeMessage<::CARTA::CatalogFileInfoRequest>(Arena*);
template<> ::CARTA::CatalogFileInfoResponse* Arena::CreateMaybeMessage<::CARTA::CatalogFileInfoResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class CatalogFileInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.CatalogFileInfoRequest) */ {
 public:
  CatalogFileInfoRequest();
  virtual ~CatalogFileInfoRequest();

  CatalogFileInfoRequest(const CatalogFileInfoRequest& from);

  inline CatalogFileInfoRequest& operator=(const CatalogFileInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CatalogFileInfoRequest(CatalogFileInfoRequest&& from) noexcept
    : CatalogFileInfoRequest() {
    *this = ::std::move(from);
  }

  inline CatalogFileInfoRequest& operator=(CatalogFileInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CatalogFileInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CatalogFileInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CatalogFileInfoRequest*>(
               &_CatalogFileInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CatalogFileInfoRequest* other);
  friend void swap(CatalogFileInfoRequest& a, CatalogFileInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CatalogFileInfoRequest* New() const final {
    return CreateMaybeMessage<CatalogFileInfoRequest>(NULL);
  }

  CatalogFileInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CatalogFileInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CatalogFileInfoRequest& from);
  void MergeFrom(const CatalogFileInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogFileInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string directory = 1;
  void clear_directory();
  static const int kDirectoryFieldNumber = 1;
  const ::std::string& directory() const;
  void set_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_directory(::std::string&& value);
  #endif
  void set_directory(const char* value);
  void set_directory(const char* value, size_t size);
  ::std::string* mutable_directory();
  ::std::string* release_directory();
  void set_allocated_directory(::std::string* directory);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:CARTA.CatalogFileInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr directory_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_catalog_5ffile_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CatalogFileInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.CatalogFileInfoResponse) */ {
 public:
  CatalogFileInfoResponse();
  virtual ~CatalogFileInfoResponse();

  CatalogFileInfoResponse(const CatalogFileInfoResponse& from);

  inline CatalogFileInfoResponse& operator=(const CatalogFileInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CatalogFileInfoResponse(CatalogFileInfoResponse&& from) noexcept
    : CatalogFileInfoResponse() {
    *this = ::std::move(from);
  }

  inline CatalogFileInfoResponse& operator=(CatalogFileInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CatalogFileInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CatalogFileInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CatalogFileInfoResponse*>(
               &_CatalogFileInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CatalogFileInfoResponse* other);
  friend void swap(CatalogFileInfoResponse& a, CatalogFileInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CatalogFileInfoResponse* New() const final {
    return CreateMaybeMessage<CatalogFileInfoResponse>(NULL);
  }

  CatalogFileInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CatalogFileInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CatalogFileInfoResponse& from);
  void MergeFrom(const CatalogFileInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogFileInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARTA.CatalogHeader headers = 4;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 4;
  ::CARTA::CatalogHeader* mutable_headers(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogHeader >*
      mutable_headers();
  const ::CARTA::CatalogHeader& headers(int index) const;
  ::CARTA::CatalogHeader* add_headers();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogHeader >&
      headers() const;

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .CARTA.CatalogFileInfo file_info = 3;
  bool has_file_info() const;
  void clear_file_info();
  static const int kFileInfoFieldNumber = 3;
  private:
  const ::CARTA::CatalogFileInfo& _internal_file_info() const;
  public:
  const ::CARTA::CatalogFileInfo& file_info() const;
  ::CARTA::CatalogFileInfo* release_file_info();
  ::CARTA::CatalogFileInfo* mutable_file_info();
  void set_allocated_file_info(::CARTA::CatalogFileInfo* file_info);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:CARTA.CatalogFileInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogHeader > headers_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::CARTA::CatalogFileInfo* file_info_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_catalog_5ffile_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CatalogFileInfoRequest

// string directory = 1;
inline void CatalogFileInfoRequest::clear_directory() {
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogFileInfoRequest::directory() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfoRequest.directory)
  return directory_.GetNoArena();
}
inline void CatalogFileInfoRequest::set_directory(const ::std::string& value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogFileInfoRequest.directory)
}
#if LANG_CXX11
inline void CatalogFileInfoRequest::set_directory(::std::string&& value) {
  
  directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogFileInfoRequest.directory)
}
#endif
inline void CatalogFileInfoRequest::set_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogFileInfoRequest.directory)
}
inline void CatalogFileInfoRequest::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogFileInfoRequest.directory)
}
inline ::std::string* CatalogFileInfoRequest::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogFileInfoRequest.directory)
  return directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogFileInfoRequest::release_directory() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogFileInfoRequest.directory)
  
  return directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogFileInfoRequest::set_allocated_directory(::std::string* directory) {
  if (directory != NULL) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogFileInfoRequest.directory)
}

// string name = 2;
inline void CatalogFileInfoRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogFileInfoRequest::name() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfoRequest.name)
  return name_.GetNoArena();
}
inline void CatalogFileInfoRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogFileInfoRequest.name)
}
#if LANG_CXX11
inline void CatalogFileInfoRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogFileInfoRequest.name)
}
#endif
inline void CatalogFileInfoRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogFileInfoRequest.name)
}
inline void CatalogFileInfoRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogFileInfoRequest.name)
}
inline ::std::string* CatalogFileInfoRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogFileInfoRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogFileInfoRequest::release_name() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogFileInfoRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogFileInfoRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogFileInfoRequest.name)
}

// -------------------------------------------------------------------

// CatalogFileInfoResponse

// bool success = 1;
inline void CatalogFileInfoResponse::clear_success() {
  success_ = false;
}
inline bool CatalogFileInfoResponse::success() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfoResponse.success)
  return success_;
}
inline void CatalogFileInfoResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFileInfoResponse.success)
}

// string message = 2;
inline void CatalogFileInfoResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogFileInfoResponse::message() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfoResponse.message)
  return message_.GetNoArena();
}
inline void CatalogFileInfoResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogFileInfoResponse.message)
}
#if LANG_CXX11
inline void CatalogFileInfoResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogFileInfoResponse.message)
}
#endif
inline void CatalogFileInfoResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogFileInfoResponse.message)
}
inline void CatalogFileInfoResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogFileInfoResponse.message)
}
inline ::std::string* CatalogFileInfoResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogFileInfoResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogFileInfoResponse::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogFileInfoResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogFileInfoResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogFileInfoResponse.message)
}

// .CARTA.CatalogFileInfo file_info = 3;
inline bool CatalogFileInfoResponse::has_file_info() const {
  return this != internal_default_instance() && file_info_ != NULL;
}
inline const ::CARTA::CatalogFileInfo& CatalogFileInfoResponse::_internal_file_info() const {
  return *file_info_;
}
inline const ::CARTA::CatalogFileInfo& CatalogFileInfoResponse::file_info() const {
  const ::CARTA::CatalogFileInfo* p = file_info_;
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfoResponse.file_info)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::CatalogFileInfo*>(
      &::CARTA::_CatalogFileInfo_default_instance_);
}
inline ::CARTA::CatalogFileInfo* CatalogFileInfoResponse::release_file_info() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogFileInfoResponse.file_info)
  
  ::CARTA::CatalogFileInfo* temp = file_info_;
  file_info_ = NULL;
  return temp;
}
inline ::CARTA::CatalogFileInfo* CatalogFileInfoResponse::mutable_file_info() {
  
  if (file_info_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::CatalogFileInfo>(GetArenaNoVirtual());
    file_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogFileInfoResponse.file_info)
  return file_info_;
}
inline void CatalogFileInfoResponse::set_allocated_file_info(::CARTA::CatalogFileInfo* file_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_info_);
  }
  if (file_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_info, submessage_arena);
    }
    
  } else {
    
  }
  file_info_ = file_info;
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogFileInfoResponse.file_info)
}

// repeated .CARTA.CatalogHeader headers = 4;
inline int CatalogFileInfoResponse::headers_size() const {
  return headers_.size();
}
inline ::CARTA::CatalogHeader* CatalogFileInfoResponse::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogFileInfoResponse.headers)
  return headers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogHeader >*
CatalogFileInfoResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.CatalogFileInfoResponse.headers)
  return &headers_;
}
inline const ::CARTA::CatalogHeader& CatalogFileInfoResponse::headers(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfoResponse.headers)
  return headers_.Get(index);
}
inline ::CARTA::CatalogHeader* CatalogFileInfoResponse::add_headers() {
  // @@protoc_insertion_point(field_add:CARTA.CatalogFileInfoResponse.headers)
  return headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogHeader >&
CatalogFileInfoResponse::headers() const {
  // @@protoc_insertion_point(field_list:CARTA.CatalogFileInfoResponse.headers)
  return headers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_catalog_5ffile_5finfo_2eproto
