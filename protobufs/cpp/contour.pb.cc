// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contour.proto

#include "contour.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_defs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ImageBounds;
}  // namespace protobuf_defs_2eproto
namespace CARTA {
class SetContourParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetContourParameters>
      _instance;
} _SetContourParameters_default_instance_;
}  // namespace CARTA
namespace protobuf_contour_2eproto {
static void InitDefaultsSetContourParameters() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SetContourParameters_default_instance_;
    new (ptr) ::CARTA::SetContourParameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SetContourParameters::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetContourParameters =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetContourParameters}, {
      &protobuf_defs_2eproto::scc_info_ImageBounds.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SetContourParameters.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetContourParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetContourParameters, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetContourParameters, reference_file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetContourParameters, image_bounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetContourParameters, levels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetContourParameters, smoothing_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetContourParameters, smoothing_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetContourParameters, decimation_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetContourParameters, compression_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetContourParameters, contour_chunk_size_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::SetContourParameters)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SetContourParameters_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "contour.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rcontour.proto\022\005CARTA\032\013enums.proto\032\ndef"
      "s.proto\"\226\002\n\024SetContourParameters\022\017\n\007file"
      "_id\030\001 \001(\007\022\031\n\021reference_file_id\030\002 \001(\007\022(\n\014"
      "image_bounds\030\003 \001(\0132\022.CARTA.ImageBounds\022\016"
      "\n\006levels\030\004 \003(\001\022,\n\016smoothing_mode\030\005 \001(\0162\024"
      ".CARTA.SmoothingMode\022\030\n\020smoothing_factor"
      "\030\006 \001(\005\022\031\n\021decimation_factor\030\007 \001(\005\022\031\n\021com"
      "pression_level\030\010 \001(\005\022\032\n\022contour_chunk_si"
      "ze\030\t \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 336);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "contour.proto", &protobuf_RegisterTypes);
  ::protobuf_enums_2eproto::AddDescriptors();
  ::protobuf_defs_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_contour_2eproto
namespace CARTA {

// ===================================================================

void SetContourParameters::InitAsDefaultInstance() {
  ::CARTA::_SetContourParameters_default_instance_._instance.get_mutable()->image_bounds_ = const_cast< ::CARTA::ImageBounds*>(
      ::CARTA::ImageBounds::internal_default_instance());
}
void SetContourParameters::clear_image_bounds() {
  if (GetArenaNoVirtual() == NULL && image_bounds_ != NULL) {
    delete image_bounds_;
  }
  image_bounds_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetContourParameters::kFileIdFieldNumber;
const int SetContourParameters::kReferenceFileIdFieldNumber;
const int SetContourParameters::kImageBoundsFieldNumber;
const int SetContourParameters::kLevelsFieldNumber;
const int SetContourParameters::kSmoothingModeFieldNumber;
const int SetContourParameters::kSmoothingFactorFieldNumber;
const int SetContourParameters::kDecimationFactorFieldNumber;
const int SetContourParameters::kCompressionLevelFieldNumber;
const int SetContourParameters::kContourChunkSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetContourParameters::SetContourParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_contour_2eproto::scc_info_SetContourParameters.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SetContourParameters)
}
SetContourParameters::SetContourParameters(const SetContourParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      levels_(from.levels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image_bounds()) {
    image_bounds_ = new ::CARTA::ImageBounds(*from.image_bounds_);
  } else {
    image_bounds_ = NULL;
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&contour_chunk_size_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(contour_chunk_size_));
  // @@protoc_insertion_point(copy_constructor:CARTA.SetContourParameters)
}

void SetContourParameters::SharedCtor() {
  ::memset(&image_bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contour_chunk_size_) -
      reinterpret_cast<char*>(&image_bounds_)) + sizeof(contour_chunk_size_));
}

SetContourParameters::~SetContourParameters() {
  // @@protoc_insertion_point(destructor:CARTA.SetContourParameters)
  SharedDtor();
}

void SetContourParameters::SharedDtor() {
  if (this != internal_default_instance()) delete image_bounds_;
}

void SetContourParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetContourParameters::descriptor() {
  ::protobuf_contour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_contour_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetContourParameters& SetContourParameters::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_contour_2eproto::scc_info_SetContourParameters.base);
  return *internal_default_instance();
}


void SetContourParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SetContourParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  levels_.Clear();
  if (GetArenaNoVirtual() == NULL && image_bounds_ != NULL) {
    delete image_bounds_;
  }
  image_bounds_ = NULL;
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contour_chunk_size_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(contour_chunk_size_));
  _internal_metadata_.Clear();
}

bool SetContourParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SetContourParameters)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 reference_file_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &reference_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.ImageBounds image_bounds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double levels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_levels())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_levels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.SmoothingMode smoothing_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_smoothing_mode(static_cast< ::CARTA::SmoothingMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 smoothing_factor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smoothing_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 decimation_factor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decimation_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 compression_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compression_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 contour_chunk_size = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contour_chunk_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SetContourParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SetContourParameters)
  return false;
#undef DO_
}

void SetContourParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SetContourParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->file_id(), output);
  }

  // fixed32 reference_file_id = 2;
  if (this->reference_file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->reference_file_id(), output);
  }

  // .CARTA.ImageBounds image_bounds = 3;
  if (this->has_image_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_image_bounds(), output);
  }

  // repeated double levels = 4;
  if (this->levels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _levels_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->levels().data(), this->levels_size(), output);
  }

  // .CARTA.SmoothingMode smoothing_mode = 5;
  if (this->smoothing_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->smoothing_mode(), output);
  }

  // int32 smoothing_factor = 6;
  if (this->smoothing_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->smoothing_factor(), output);
  }

  // int32 decimation_factor = 7;
  if (this->decimation_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->decimation_factor(), output);
  }

  // int32 compression_level = 8;
  if (this->compression_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->compression_level(), output);
  }

  // int32 contour_chunk_size = 9;
  if (this->contour_chunk_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->contour_chunk_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SetContourParameters)
}

::google::protobuf::uint8* SetContourParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SetContourParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->file_id(), target);
  }

  // fixed32 reference_file_id = 2;
  if (this->reference_file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->reference_file_id(), target);
  }

  // .CARTA.ImageBounds image_bounds = 3;
  if (this->has_image_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_image_bounds(), deterministic, target);
  }

  // repeated double levels = 4;
  if (this->levels_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _levels_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->levels_, target);
  }

  // .CARTA.SmoothingMode smoothing_mode = 5;
  if (this->smoothing_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->smoothing_mode(), target);
  }

  // int32 smoothing_factor = 6;
  if (this->smoothing_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->smoothing_factor(), target);
  }

  // int32 decimation_factor = 7;
  if (this->decimation_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->decimation_factor(), target);
  }

  // int32 compression_level = 8;
  if (this->compression_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->compression_level(), target);
  }

  // int32 contour_chunk_size = 9;
  if (this->contour_chunk_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->contour_chunk_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SetContourParameters)
  return target;
}

size_t SetContourParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SetContourParameters)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double levels = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->levels_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _levels_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .CARTA.ImageBounds image_bounds = 3;
  if (this->has_image_bounds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *image_bounds_);
  }

  // fixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 reference_file_id = 2;
  if (this->reference_file_id() != 0) {
    total_size += 1 + 4;
  }

  // .CARTA.SmoothingMode smoothing_mode = 5;
  if (this->smoothing_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->smoothing_mode());
  }

  // int32 smoothing_factor = 6;
  if (this->smoothing_factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->smoothing_factor());
  }

  // int32 decimation_factor = 7;
  if (this->decimation_factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->decimation_factor());
  }

  // int32 compression_level = 8;
  if (this->compression_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compression_level());
  }

  // int32 contour_chunk_size = 9;
  if (this->contour_chunk_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->contour_chunk_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetContourParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SetContourParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const SetContourParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetContourParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SetContourParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SetContourParameters)
    MergeFrom(*source);
  }
}

void SetContourParameters::MergeFrom(const SetContourParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SetContourParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  levels_.MergeFrom(from.levels_);
  if (from.has_image_bounds()) {
    mutable_image_bounds()->::CARTA::ImageBounds::MergeFrom(from.image_bounds());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.reference_file_id() != 0) {
    set_reference_file_id(from.reference_file_id());
  }
  if (from.smoothing_mode() != 0) {
    set_smoothing_mode(from.smoothing_mode());
  }
  if (from.smoothing_factor() != 0) {
    set_smoothing_factor(from.smoothing_factor());
  }
  if (from.decimation_factor() != 0) {
    set_decimation_factor(from.decimation_factor());
  }
  if (from.compression_level() != 0) {
    set_compression_level(from.compression_level());
  }
  if (from.contour_chunk_size() != 0) {
    set_contour_chunk_size(from.contour_chunk_size());
  }
}

void SetContourParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SetContourParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetContourParameters::CopyFrom(const SetContourParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SetContourParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetContourParameters::IsInitialized() const {
  return true;
}

void SetContourParameters::Swap(SetContourParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetContourParameters::InternalSwap(SetContourParameters* other) {
  using std::swap;
  levels_.InternalSwap(&other->levels_);
  swap(image_bounds_, other->image_bounds_);
  swap(file_id_, other->file_id_);
  swap(reference_file_id_, other->reference_file_id_);
  swap(smoothing_mode_, other->smoothing_mode_);
  swap(smoothing_factor_, other->smoothing_factor_);
  swap(decimation_factor_, other->decimation_factor_);
  swap(compression_level_, other->compression_level_);
  swap(contour_chunk_size_, other->contour_chunk_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetContourParameters::GetMetadata() const {
  protobuf_contour_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_contour_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SetContourParameters* Arena::CreateMaybeMessage< ::CARTA::SetContourParameters >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SetContourParameters >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
