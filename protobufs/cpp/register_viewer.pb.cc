// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register_viewer.proto

#include "register_viewer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_register_5fviewer_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_register_5fviewer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RegisterViewerAck_UserLayoutsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_register_5fviewer_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RegisterViewerAck_UserPreferencesEntry_DoNotUse;
}  // namespace protobuf_register_5fviewer_2eproto
namespace CARTA {
class RegisterViewerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterViewer>
      _instance;
} _RegisterViewer_default_instance_;
class RegisterViewerAck_UserPreferencesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterViewerAck_UserPreferencesEntry_DoNotUse>
      _instance;
} _RegisterViewerAck_UserPreferencesEntry_DoNotUse_default_instance_;
class RegisterViewerAck_UserLayoutsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterViewerAck_UserLayoutsEntry_DoNotUse>
      _instance;
} _RegisterViewerAck_UserLayoutsEntry_DoNotUse_default_instance_;
class RegisterViewerAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterViewerAck>
      _instance;
} _RegisterViewerAck_default_instance_;
}  // namespace CARTA
namespace protobuf_register_5fviewer_2eproto {
static void InitDefaultsRegisterViewer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_RegisterViewer_default_instance_;
    new (ptr) ::CARTA::RegisterViewer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::RegisterViewer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterViewer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterViewer}, {}};

static void InitDefaultsRegisterViewerAck_UserPreferencesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_RegisterViewerAck_UserPreferencesEntry_DoNotUse_default_instance_;
    new (ptr) ::CARTA::RegisterViewerAck_UserPreferencesEntry_DoNotUse();
  }
  ::CARTA::RegisterViewerAck_UserPreferencesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterViewerAck_UserPreferencesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterViewerAck_UserPreferencesEntry_DoNotUse}, {}};

static void InitDefaultsRegisterViewerAck_UserLayoutsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_RegisterViewerAck_UserLayoutsEntry_DoNotUse_default_instance_;
    new (ptr) ::CARTA::RegisterViewerAck_UserLayoutsEntry_DoNotUse();
  }
  ::CARTA::RegisterViewerAck_UserLayoutsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterViewerAck_UserLayoutsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterViewerAck_UserLayoutsEntry_DoNotUse}, {}};

static void InitDefaultsRegisterViewerAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_RegisterViewerAck_default_instance_;
    new (ptr) ::CARTA::RegisterViewerAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::RegisterViewerAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RegisterViewerAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRegisterViewerAck}, {
      &protobuf_register_5fviewer_2eproto::scc_info_RegisterViewerAck_UserPreferencesEntry_DoNotUse.base,
      &protobuf_register_5fviewer_2eproto::scc_info_RegisterViewerAck_UserLayoutsEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterViewer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterViewerAck_UserPreferencesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterViewerAck_UserLayoutsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterViewerAck.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewer, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewer, api_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewer, client_feature_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck_UserPreferencesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck_UserPreferencesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck_UserPreferencesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck_UserPreferencesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck_UserLayoutsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck_UserLayoutsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck_UserLayoutsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck_UserLayoutsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck, session_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck, server_feature_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck, user_preferences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck, user_layouts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RegisterViewerAck, grpc_port_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::RegisterViewer)},
  { 8, 15, sizeof(::CARTA::RegisterViewerAck_UserPreferencesEntry_DoNotUse)},
  { 17, 24, sizeof(::CARTA::RegisterViewerAck_UserLayoutsEntry_DoNotUse)},
  { 26, -1, sizeof(::CARTA::RegisterViewerAck)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_RegisterViewer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_RegisterViewerAck_UserPreferencesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_RegisterViewerAck_UserLayoutsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_RegisterViewerAck_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "register_viewer.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025register_viewer.proto\022\005CARTA\032\013enums.pr"
      "oto\"S\n\016RegisterViewer\022\022\n\nsession_id\030\001 \001("
      "\007\022\017\n\007api_key\030\002 \001(\t\022\034\n\024client_feature_fla"
      "gs\030\003 \001(\007\"\232\003\n\021RegisterViewerAck\022\022\n\nsessio"
      "n_id\030\001 \001(\007\022\017\n\007success\030\002 \001(\010\022\017\n\007message\030\003"
      " \001(\t\022(\n\014session_type\030\004 \001(\0162\022.CARTA.Sessi"
      "onType\022\034\n\024server_feature_flags\030\005 \001(\007\022G\n\020"
      "user_preferences\030\006 \003(\0132-.CARTA.RegisterV"
      "iewerAck.UserPreferencesEntry\022\?\n\014user_la"
      "youts\030\007 \003(\0132).CARTA.RegisterViewerAck.Us"
      "erLayoutsEntry\022\021\n\tgrpc_port\030\010 \001(\007\0326\n\024Use"
      "rPreferencesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
      "\002 \001(\t:\0028\001\0322\n\020UserLayoutsEntry\022\013\n\003key\030\001 \001"
      "(\t\022\r\n\005value\030\002 \001(\t:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 549);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "register_viewer.proto", &protobuf_RegisterTypes);
  ::protobuf_enums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_register_5fviewer_2eproto
namespace CARTA {

// ===================================================================

void RegisterViewer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterViewer::kSessionIdFieldNumber;
const int RegisterViewer::kApiKeyFieldNumber;
const int RegisterViewer::kClientFeatureFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterViewer::RegisterViewer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_register_5fviewer_2eproto::scc_info_RegisterViewer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.RegisterViewer)
}
RegisterViewer::RegisterViewer(const RegisterViewer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  api_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.api_key().size() > 0) {
    api_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_key_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_feature_flags_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(client_feature_flags_));
  // @@protoc_insertion_point(copy_constructor:CARTA.RegisterViewer)
}

void RegisterViewer::SharedCtor() {
  api_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_feature_flags_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(client_feature_flags_));
}

RegisterViewer::~RegisterViewer() {
  // @@protoc_insertion_point(destructor:CARTA.RegisterViewer)
  SharedDtor();
}

void RegisterViewer::SharedDtor() {
  api_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterViewer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterViewer::descriptor() {
  ::protobuf_register_5fviewer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_register_5fviewer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterViewer& RegisterViewer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_register_5fviewer_2eproto::scc_info_RegisterViewer.base);
  return *internal_default_instance();
}


void RegisterViewer::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.RegisterViewer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  api_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_feature_flags_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(client_feature_flags_));
  _internal_metadata_.Clear();
}

bool RegisterViewer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.RegisterViewer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string api_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_api_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->api_key().data(), static_cast<int>(this->api_key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.RegisterViewer.api_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 client_feature_flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_feature_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.RegisterViewer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.RegisterViewer)
  return false;
#undef DO_
}

void RegisterViewer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.RegisterViewer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 session_id = 1;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->session_id(), output);
  }

  // string api_key = 2;
  if (this->api_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_key().data(), static_cast<int>(this->api_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.RegisterViewer.api_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->api_key(), output);
  }

  // fixed32 client_feature_flags = 3;
  if (this->client_feature_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_feature_flags(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.RegisterViewer)
}

::google::protobuf::uint8* RegisterViewer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.RegisterViewer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 session_id = 1;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->session_id(), target);
  }

  // string api_key = 2;
  if (this->api_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->api_key().data(), static_cast<int>(this->api_key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.RegisterViewer.api_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->api_key(), target);
  }

  // fixed32 client_feature_flags = 3;
  if (this->client_feature_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_feature_flags(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.RegisterViewer)
  return target;
}

size_t RegisterViewer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.RegisterViewer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string api_key = 2;
  if (this->api_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->api_key());
  }

  // fixed32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 client_feature_flags = 3;
  if (this->client_feature_flags() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterViewer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.RegisterViewer)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterViewer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterViewer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.RegisterViewer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.RegisterViewer)
    MergeFrom(*source);
  }
}

void RegisterViewer::MergeFrom(const RegisterViewer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.RegisterViewer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.api_key().size() > 0) {

    api_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.api_key_);
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.client_feature_flags() != 0) {
    set_client_feature_flags(from.client_feature_flags());
  }
}

void RegisterViewer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.RegisterViewer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterViewer::CopyFrom(const RegisterViewer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.RegisterViewer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterViewer::IsInitialized() const {
  return true;
}

void RegisterViewer::Swap(RegisterViewer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterViewer::InternalSwap(RegisterViewer* other) {
  using std::swap;
  api_key_.Swap(&other->api_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_id_, other->session_id_);
  swap(client_feature_flags_, other->client_feature_flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterViewer::GetMetadata() const {
  protobuf_register_5fviewer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_register_5fviewer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

RegisterViewerAck_UserPreferencesEntry_DoNotUse::RegisterViewerAck_UserPreferencesEntry_DoNotUse() {}
RegisterViewerAck_UserPreferencesEntry_DoNotUse::RegisterViewerAck_UserPreferencesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void RegisterViewerAck_UserPreferencesEntry_DoNotUse::MergeFrom(const RegisterViewerAck_UserPreferencesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata RegisterViewerAck_UserPreferencesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_register_5fviewer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_register_5fviewer_2eproto::file_level_metadata[1];
}
void RegisterViewerAck_UserPreferencesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

RegisterViewerAck_UserLayoutsEntry_DoNotUse::RegisterViewerAck_UserLayoutsEntry_DoNotUse() {}
RegisterViewerAck_UserLayoutsEntry_DoNotUse::RegisterViewerAck_UserLayoutsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void RegisterViewerAck_UserLayoutsEntry_DoNotUse::MergeFrom(const RegisterViewerAck_UserLayoutsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata RegisterViewerAck_UserLayoutsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_register_5fviewer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_register_5fviewer_2eproto::file_level_metadata[2];
}
void RegisterViewerAck_UserLayoutsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void RegisterViewerAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterViewerAck::kSessionIdFieldNumber;
const int RegisterViewerAck::kSuccessFieldNumber;
const int RegisterViewerAck::kMessageFieldNumber;
const int RegisterViewerAck::kSessionTypeFieldNumber;
const int RegisterViewerAck::kServerFeatureFlagsFieldNumber;
const int RegisterViewerAck::kUserPreferencesFieldNumber;
const int RegisterViewerAck::kUserLayoutsFieldNumber;
const int RegisterViewerAck::kGrpcPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterViewerAck::RegisterViewerAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_register_5fviewer_2eproto::scc_info_RegisterViewerAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.RegisterViewerAck)
}
RegisterViewerAck::RegisterViewerAck(const RegisterViewerAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_preferences_.MergeFrom(from.user_preferences_);
  user_layouts_.MergeFrom(from.user_layouts_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&grpc_port_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(grpc_port_));
  // @@protoc_insertion_point(copy_constructor:CARTA.RegisterViewerAck)
}

void RegisterViewerAck::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grpc_port_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(grpc_port_));
}

RegisterViewerAck::~RegisterViewerAck() {
  // @@protoc_insertion_point(destructor:CARTA.RegisterViewerAck)
  SharedDtor();
}

void RegisterViewerAck::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterViewerAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterViewerAck::descriptor() {
  ::protobuf_register_5fviewer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_register_5fviewer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterViewerAck& RegisterViewerAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_register_5fviewer_2eproto::scc_info_RegisterViewerAck.base);
  return *internal_default_instance();
}


void RegisterViewerAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.RegisterViewerAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_preferences_.Clear();
  user_layouts_.Clear();
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grpc_port_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(grpc_port_));
  _internal_metadata_.Clear();
}

bool RegisterViewerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.RegisterViewerAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 session_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.RegisterViewerAck.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.SessionType session_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::CARTA::SessionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 server_feature_flags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_feature_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> user_preferences = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          RegisterViewerAck_UserPreferencesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              RegisterViewerAck_UserPreferencesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&user_preferences_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.RegisterViewerAck.UserPreferencesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.RegisterViewerAck.UserPreferencesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> user_layouts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          RegisterViewerAck_UserLayoutsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              RegisterViewerAck_UserLayoutsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&user_layouts_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.RegisterViewerAck.UserLayoutsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.RegisterViewerAck.UserLayoutsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 grpc_port = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &grpc_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.RegisterViewerAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.RegisterViewerAck)
  return false;
#undef DO_
}

void RegisterViewerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.RegisterViewerAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 session_id = 1;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->session_id(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.RegisterViewerAck.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // .CARTA.SessionType session_type = 4;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->session_type(), output);
  }

  // fixed32 server_feature_flags = 5;
  if (this->server_feature_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->server_feature_flags(), output);
  }

  // map<string, string> user_preferences = 6;
  if (!this->user_preferences().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CARTA.RegisterViewerAck.UserPreferencesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CARTA.RegisterViewerAck.UserPreferencesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->user_preferences().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->user_preferences().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->user_preferences().begin();
          it != this->user_preferences().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RegisterViewerAck_UserPreferencesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(user_preferences_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<RegisterViewerAck_UserPreferencesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->user_preferences().begin();
          it != this->user_preferences().end(); ++it) {
        entry.reset(user_preferences_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> user_layouts = 7;
  if (!this->user_layouts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CARTA.RegisterViewerAck.UserLayoutsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CARTA.RegisterViewerAck.UserLayoutsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->user_layouts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->user_layouts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->user_layouts().begin();
          it != this->user_layouts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RegisterViewerAck_UserLayoutsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(user_layouts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<RegisterViewerAck_UserLayoutsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->user_layouts().begin();
          it != this->user_layouts().end(); ++it) {
        entry.reset(user_layouts_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // fixed32 grpc_port = 8;
  if (this->grpc_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->grpc_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.RegisterViewerAck)
}

::google::protobuf::uint8* RegisterViewerAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.RegisterViewerAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 session_id = 1;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->session_id(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.RegisterViewerAck.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // .CARTA.SessionType session_type = 4;
  if (this->session_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->session_type(), target);
  }

  // fixed32 server_feature_flags = 5;
  if (this->server_feature_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->server_feature_flags(), target);
  }

  // map<string, string> user_preferences = 6;
  if (!this->user_preferences().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CARTA.RegisterViewerAck.UserPreferencesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CARTA.RegisterViewerAck.UserPreferencesEntry.value");
      }
    };

    if (deterministic &&
        this->user_preferences().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->user_preferences().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->user_preferences().begin();
          it != this->user_preferences().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RegisterViewerAck_UserPreferencesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(user_preferences_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<RegisterViewerAck_UserPreferencesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->user_preferences().begin();
          it != this->user_preferences().end(); ++it) {
        entry.reset(user_preferences_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> user_layouts = 7;
  if (!this->user_layouts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CARTA.RegisterViewerAck.UserLayoutsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "CARTA.RegisterViewerAck.UserLayoutsEntry.value");
      }
    };

    if (deterministic &&
        this->user_layouts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->user_layouts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->user_layouts().begin();
          it != this->user_layouts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RegisterViewerAck_UserLayoutsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(user_layouts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<RegisterViewerAck_UserLayoutsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->user_layouts().begin();
          it != this->user_layouts().end(); ++it) {
        entry.reset(user_layouts_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // fixed32 grpc_port = 8;
  if (this->grpc_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->grpc_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.RegisterViewerAck)
  return target;
}

size_t RegisterViewerAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.RegisterViewerAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> user_preferences = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_preferences_size());
  {
    ::std::unique_ptr<RegisterViewerAck_UserPreferencesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->user_preferences().begin();
        it != this->user_preferences().end(); ++it) {
      entry.reset(user_preferences_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> user_layouts = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_layouts_size());
  {
    ::std::unique_ptr<RegisterViewerAck_UserLayoutsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->user_layouts().begin();
        it != this->user_layouts().end(); ++it) {
      entry.reset(user_layouts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // fixed32 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 + 4;
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // .CARTA.SessionType session_type = 4;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  // fixed32 server_feature_flags = 5;
  if (this->server_feature_flags() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 grpc_port = 8;
  if (this->grpc_port() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterViewerAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.RegisterViewerAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterViewerAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterViewerAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.RegisterViewerAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.RegisterViewerAck)
    MergeFrom(*source);
  }
}

void RegisterViewerAck::MergeFrom(const RegisterViewerAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.RegisterViewerAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_preferences_.MergeFrom(from.user_preferences_);
  user_layouts_.MergeFrom(from.user_layouts_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.server_feature_flags() != 0) {
    set_server_feature_flags(from.server_feature_flags());
  }
  if (from.grpc_port() != 0) {
    set_grpc_port(from.grpc_port());
  }
}

void RegisterViewerAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.RegisterViewerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterViewerAck::CopyFrom(const RegisterViewerAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.RegisterViewerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterViewerAck::IsInitialized() const {
  return true;
}

void RegisterViewerAck::Swap(RegisterViewerAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterViewerAck::InternalSwap(RegisterViewerAck* other) {
  using std::swap;
  user_preferences_.Swap(&other->user_preferences_);
  user_layouts_.Swap(&other->user_layouts_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_id_, other->session_id_);
  swap(success_, other->success_);
  swap(session_type_, other->session_type_);
  swap(server_feature_flags_, other->server_feature_flags_);
  swap(grpc_port_, other->grpc_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterViewerAck::GetMetadata() const {
  protobuf_register_5fviewer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_register_5fviewer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::RegisterViewer* Arena::CreateMaybeMessage< ::CARTA::RegisterViewer >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::RegisterViewer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::RegisterViewerAck_UserPreferencesEntry_DoNotUse* Arena::CreateMaybeMessage< ::CARTA::RegisterViewerAck_UserPreferencesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::RegisterViewerAck_UserPreferencesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::RegisterViewerAck_UserLayoutsEntry_DoNotUse* Arena::CreateMaybeMessage< ::CARTA::RegisterViewerAck_UserLayoutsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::RegisterViewerAck_UserLayoutsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::RegisterViewerAck* Arena::CreateMaybeMessage< ::CARTA::RegisterViewerAck >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::RegisterViewerAck >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
