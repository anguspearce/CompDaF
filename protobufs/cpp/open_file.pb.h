// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_file.proto

#ifndef PROTOBUF_INCLUDED_open_5ffile_2eproto
#define PROTOBUF_INCLUDED_open_5ffile_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "defs.pb.h"
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_open_5ffile_2eproto 

namespace protobuf_open_5ffile_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_open_5ffile_2eproto
namespace CARTA {
class OpenFile;
class OpenFileDefaultTypeInternal;
extern OpenFileDefaultTypeInternal _OpenFile_default_instance_;
class OpenFileAck;
class OpenFileAckDefaultTypeInternal;
extern OpenFileAckDefaultTypeInternal _OpenFileAck_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::OpenFile* Arena::CreateMaybeMessage<::CARTA::OpenFile>(Arena*);
template<> ::CARTA::OpenFileAck* Arena::CreateMaybeMessage<::CARTA::OpenFileAck>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class OpenFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.OpenFile) */ {
 public:
  OpenFile();
  virtual ~OpenFile();

  OpenFile(const OpenFile& from);

  inline OpenFile& operator=(const OpenFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenFile(OpenFile&& from) noexcept
    : OpenFile() {
    *this = ::std::move(from);
  }

  inline OpenFile& operator=(OpenFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenFile* internal_default_instance() {
    return reinterpret_cast<const OpenFile*>(
               &_OpenFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OpenFile* other);
  friend void swap(OpenFile& a, OpenFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenFile* New() const final {
    return CreateMaybeMessage<OpenFile>(NULL);
  }

  OpenFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenFile& from);
  void MergeFrom(const OpenFile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string directory = 1;
  void clear_directory();
  static const int kDirectoryFieldNumber = 1;
  const ::std::string& directory() const;
  void set_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_directory(::std::string&& value);
  #endif
  void set_directory(const char* value);
  void set_directory(const char* value, size_t size);
  ::std::string* mutable_directory();
  ::std::string* release_directory();
  void set_allocated_directory(::std::string* directory);

  // string file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // string hdu = 3;
  void clear_hdu();
  static const int kHduFieldNumber = 3;
  const ::std::string& hdu() const;
  void set_hdu(const ::std::string& value);
  #if LANG_CXX11
  void set_hdu(::std::string&& value);
  #endif
  void set_hdu(const char* value);
  void set_hdu(const char* value, size_t size);
  ::std::string* mutable_hdu();
  ::std::string* release_hdu();
  void set_allocated_hdu(::std::string* hdu);

  // sfixed32 file_id = 4;
  void clear_file_id();
  static const int kFileIdFieldNumber = 4;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // .CARTA.RenderMode render_mode = 5;
  void clear_render_mode();
  static const int kRenderModeFieldNumber = 5;
  ::CARTA::RenderMode render_mode() const;
  void set_render_mode(::CARTA::RenderMode value);

  // @@protoc_insertion_point(class_scope:CARTA.OpenFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr directory_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr hdu_;
  ::google::protobuf::int32 file_id_;
  int render_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_open_5ffile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpenFileAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.OpenFileAck) */ {
 public:
  OpenFileAck();
  virtual ~OpenFileAck();

  OpenFileAck(const OpenFileAck& from);

  inline OpenFileAck& operator=(const OpenFileAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenFileAck(OpenFileAck&& from) noexcept
    : OpenFileAck() {
    *this = ::std::move(from);
  }

  inline OpenFileAck& operator=(OpenFileAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenFileAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenFileAck* internal_default_instance() {
    return reinterpret_cast<const OpenFileAck*>(
               &_OpenFileAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OpenFileAck* other);
  friend void swap(OpenFileAck& a, OpenFileAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenFileAck* New() const final {
    return CreateMaybeMessage<OpenFileAck>(NULL);
  }

  OpenFileAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenFileAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenFileAck& from);
  void MergeFrom(const OpenFileAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenFileAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARTA.Beam beam_table = 7;
  int beam_table_size() const;
  void clear_beam_table();
  static const int kBeamTableFieldNumber = 7;
  ::CARTA::Beam* mutable_beam_table(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::Beam >*
      mutable_beam_table();
  const ::CARTA::Beam& beam_table(int index) const;
  ::CARTA::Beam* add_beam_table();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::Beam >&
      beam_table() const;

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .CARTA.FileInfo file_info = 4;
  bool has_file_info() const;
  void clear_file_info();
  static const int kFileInfoFieldNumber = 4;
  private:
  const ::CARTA::FileInfo& _internal_file_info() const;
  public:
  const ::CARTA::FileInfo& file_info() const;
  ::CARTA::FileInfo* release_file_info();
  ::CARTA::FileInfo* mutable_file_info();
  void set_allocated_file_info(::CARTA::FileInfo* file_info);

  // .CARTA.FileInfoExtended file_info_extended = 5;
  bool has_file_info_extended() const;
  void clear_file_info_extended();
  static const int kFileInfoExtendedFieldNumber = 5;
  private:
  const ::CARTA::FileInfoExtended& _internal_file_info_extended() const;
  public:
  const ::CARTA::FileInfoExtended& file_info_extended() const;
  ::CARTA::FileInfoExtended* release_file_info_extended();
  ::CARTA::FileInfoExtended* mutable_file_info_extended();
  void set_allocated_file_info_extended(::CARTA::FileInfoExtended* file_info_extended);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // sfixed32 file_id = 2;
  void clear_file_id();
  static const int kFileIdFieldNumber = 2;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // fixed32 file_feature_flags = 6;
  void clear_file_feature_flags();
  static const int kFileFeatureFlagsFieldNumber = 6;
  ::google::protobuf::uint32 file_feature_flags() const;
  void set_file_feature_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CARTA.OpenFileAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::Beam > beam_table_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::CARTA::FileInfo* file_info_;
  ::CARTA::FileInfoExtended* file_info_extended_;
  bool success_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::uint32 file_feature_flags_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_open_5ffile_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenFile

// string directory = 1;
inline void OpenFile::clear_directory() {
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenFile::directory() const {
  // @@protoc_insertion_point(field_get:CARTA.OpenFile.directory)
  return directory_.GetNoArena();
}
inline void OpenFile::set_directory(const ::std::string& value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.OpenFile.directory)
}
#if LANG_CXX11
inline void OpenFile::set_directory(::std::string&& value) {
  
  directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.OpenFile.directory)
}
#endif
inline void OpenFile::set_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.OpenFile.directory)
}
inline void OpenFile::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.OpenFile.directory)
}
inline ::std::string* OpenFile::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.OpenFile.directory)
  return directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenFile::release_directory() {
  // @@protoc_insertion_point(field_release:CARTA.OpenFile.directory)
  
  return directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenFile::set_allocated_directory(::std::string* directory) {
  if (directory != NULL) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:CARTA.OpenFile.directory)
}

// string file = 2;
inline void OpenFile::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenFile::file() const {
  // @@protoc_insertion_point(field_get:CARTA.OpenFile.file)
  return file_.GetNoArena();
}
inline void OpenFile::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.OpenFile.file)
}
#if LANG_CXX11
inline void OpenFile::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.OpenFile.file)
}
#endif
inline void OpenFile::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.OpenFile.file)
}
inline void OpenFile::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.OpenFile.file)
}
inline ::std::string* OpenFile::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.OpenFile.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenFile::release_file() {
  // @@protoc_insertion_point(field_release:CARTA.OpenFile.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenFile::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:CARTA.OpenFile.file)
}

// string hdu = 3;
inline void OpenFile::clear_hdu() {
  hdu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenFile::hdu() const {
  // @@protoc_insertion_point(field_get:CARTA.OpenFile.hdu)
  return hdu_.GetNoArena();
}
inline void OpenFile::set_hdu(const ::std::string& value) {
  
  hdu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.OpenFile.hdu)
}
#if LANG_CXX11
inline void OpenFile::set_hdu(::std::string&& value) {
  
  hdu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.OpenFile.hdu)
}
#endif
inline void OpenFile::set_hdu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hdu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.OpenFile.hdu)
}
inline void OpenFile::set_hdu(const char* value, size_t size) {
  
  hdu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.OpenFile.hdu)
}
inline ::std::string* OpenFile::mutable_hdu() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.OpenFile.hdu)
  return hdu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenFile::release_hdu() {
  // @@protoc_insertion_point(field_release:CARTA.OpenFile.hdu)
  
  return hdu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenFile::set_allocated_hdu(::std::string* hdu) {
  if (hdu != NULL) {
    
  } else {
    
  }
  hdu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hdu);
  // @@protoc_insertion_point(field_set_allocated:CARTA.OpenFile.hdu)
}

// sfixed32 file_id = 4;
inline void OpenFile::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 OpenFile::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.OpenFile.file_id)
  return file_id_;
}
inline void OpenFile::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.OpenFile.file_id)
}

// .CARTA.RenderMode render_mode = 5;
inline void OpenFile::clear_render_mode() {
  render_mode_ = 0;
}
inline ::CARTA::RenderMode OpenFile::render_mode() const {
  // @@protoc_insertion_point(field_get:CARTA.OpenFile.render_mode)
  return static_cast< ::CARTA::RenderMode >(render_mode_);
}
inline void OpenFile::set_render_mode(::CARTA::RenderMode value) {
  
  render_mode_ = value;
  // @@protoc_insertion_point(field_set:CARTA.OpenFile.render_mode)
}

// -------------------------------------------------------------------

// OpenFileAck

// bool success = 1;
inline void OpenFileAck::clear_success() {
  success_ = false;
}
inline bool OpenFileAck::success() const {
  // @@protoc_insertion_point(field_get:CARTA.OpenFileAck.success)
  return success_;
}
inline void OpenFileAck::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:CARTA.OpenFileAck.success)
}

// sfixed32 file_id = 2;
inline void OpenFileAck::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 OpenFileAck::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.OpenFileAck.file_id)
  return file_id_;
}
inline void OpenFileAck::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.OpenFileAck.file_id)
}

// string message = 3;
inline void OpenFileAck::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OpenFileAck::message() const {
  // @@protoc_insertion_point(field_get:CARTA.OpenFileAck.message)
  return message_.GetNoArena();
}
inline void OpenFileAck::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.OpenFileAck.message)
}
#if LANG_CXX11
inline void OpenFileAck::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.OpenFileAck.message)
}
#endif
inline void OpenFileAck::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.OpenFileAck.message)
}
inline void OpenFileAck::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.OpenFileAck.message)
}
inline ::std::string* OpenFileAck::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.OpenFileAck.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OpenFileAck::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.OpenFileAck.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OpenFileAck::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.OpenFileAck.message)
}

// .CARTA.FileInfo file_info = 4;
inline bool OpenFileAck::has_file_info() const {
  return this != internal_default_instance() && file_info_ != NULL;
}
inline const ::CARTA::FileInfo& OpenFileAck::_internal_file_info() const {
  return *file_info_;
}
inline const ::CARTA::FileInfo& OpenFileAck::file_info() const {
  const ::CARTA::FileInfo* p = file_info_;
  // @@protoc_insertion_point(field_get:CARTA.OpenFileAck.file_info)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::FileInfo*>(
      &::CARTA::_FileInfo_default_instance_);
}
inline ::CARTA::FileInfo* OpenFileAck::release_file_info() {
  // @@protoc_insertion_point(field_release:CARTA.OpenFileAck.file_info)
  
  ::CARTA::FileInfo* temp = file_info_;
  file_info_ = NULL;
  return temp;
}
inline ::CARTA::FileInfo* OpenFileAck::mutable_file_info() {
  
  if (file_info_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::FileInfo>(GetArenaNoVirtual());
    file_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.OpenFileAck.file_info)
  return file_info_;
}
inline void OpenFileAck::set_allocated_file_info(::CARTA::FileInfo* file_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_info_);
  }
  if (file_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_info, submessage_arena);
    }
    
  } else {
    
  }
  file_info_ = file_info;
  // @@protoc_insertion_point(field_set_allocated:CARTA.OpenFileAck.file_info)
}

// .CARTA.FileInfoExtended file_info_extended = 5;
inline bool OpenFileAck::has_file_info_extended() const {
  return this != internal_default_instance() && file_info_extended_ != NULL;
}
inline const ::CARTA::FileInfoExtended& OpenFileAck::_internal_file_info_extended() const {
  return *file_info_extended_;
}
inline const ::CARTA::FileInfoExtended& OpenFileAck::file_info_extended() const {
  const ::CARTA::FileInfoExtended* p = file_info_extended_;
  // @@protoc_insertion_point(field_get:CARTA.OpenFileAck.file_info_extended)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::FileInfoExtended*>(
      &::CARTA::_FileInfoExtended_default_instance_);
}
inline ::CARTA::FileInfoExtended* OpenFileAck::release_file_info_extended() {
  // @@protoc_insertion_point(field_release:CARTA.OpenFileAck.file_info_extended)
  
  ::CARTA::FileInfoExtended* temp = file_info_extended_;
  file_info_extended_ = NULL;
  return temp;
}
inline ::CARTA::FileInfoExtended* OpenFileAck::mutable_file_info_extended() {
  
  if (file_info_extended_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::FileInfoExtended>(GetArenaNoVirtual());
    file_info_extended_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.OpenFileAck.file_info_extended)
  return file_info_extended_;
}
inline void OpenFileAck::set_allocated_file_info_extended(::CARTA::FileInfoExtended* file_info_extended) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_info_extended_);
  }
  if (file_info_extended) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_info_extended = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_info_extended, submessage_arena);
    }
    
  } else {
    
  }
  file_info_extended_ = file_info_extended;
  // @@protoc_insertion_point(field_set_allocated:CARTA.OpenFileAck.file_info_extended)
}

// fixed32 file_feature_flags = 6;
inline void OpenFileAck::clear_file_feature_flags() {
  file_feature_flags_ = 0u;
}
inline ::google::protobuf::uint32 OpenFileAck::file_feature_flags() const {
  // @@protoc_insertion_point(field_get:CARTA.OpenFileAck.file_feature_flags)
  return file_feature_flags_;
}
inline void OpenFileAck::set_file_feature_flags(::google::protobuf::uint32 value) {
  
  file_feature_flags_ = value;
  // @@protoc_insertion_point(field_set:CARTA.OpenFileAck.file_feature_flags)
}

// repeated .CARTA.Beam beam_table = 7;
inline int OpenFileAck::beam_table_size() const {
  return beam_table_.size();
}
inline ::CARTA::Beam* OpenFileAck::mutable_beam_table(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.OpenFileAck.beam_table)
  return beam_table_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::Beam >*
OpenFileAck::mutable_beam_table() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.OpenFileAck.beam_table)
  return &beam_table_;
}
inline const ::CARTA::Beam& OpenFileAck::beam_table(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.OpenFileAck.beam_table)
  return beam_table_.Get(index);
}
inline ::CARTA::Beam* OpenFileAck::add_beam_table() {
  // @@protoc_insertion_point(field_add:CARTA.OpenFileAck.beam_table)
  return beam_table_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::Beam >&
OpenFileAck::beam_table() const {
  // @@protoc_insertion_point(field_list:CARTA.OpenFileAck.beam_table)
  return beam_table_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_open_5ffile_2eproto
