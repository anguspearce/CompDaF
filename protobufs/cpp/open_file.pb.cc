// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_file.proto

#include "open_file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_defs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Beam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FileInfoExtended;
}  // namespace protobuf_defs_2eproto
namespace CARTA {
class OpenFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenFile>
      _instance;
} _OpenFile_default_instance_;
class OpenFileAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenFileAck>
      _instance;
} _OpenFileAck_default_instance_;
}  // namespace CARTA
namespace protobuf_open_5ffile_2eproto {
static void InitDefaultsOpenFile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_OpenFile_default_instance_;
    new (ptr) ::CARTA::OpenFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::OpenFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenFile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenFile}, {}};

static void InitDefaultsOpenFileAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_OpenFileAck_default_instance_;
    new (ptr) ::CARTA::OpenFileAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::OpenFileAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_OpenFileAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsOpenFileAck}, {
      &protobuf_defs_2eproto::scc_info_FileInfo.base,
      &protobuf_defs_2eproto::scc_info_FileInfoExtended.base,
      &protobuf_defs_2eproto::scc_info_Beam.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OpenFile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenFileAck.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFile, directory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFile, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFile, hdu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFile, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFile, render_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFileAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFileAck, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFileAck, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFileAck, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFileAck, file_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFileAck, file_info_extended_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFileAck, file_feature_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenFileAck, beam_table_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::OpenFile)},
  { 10, -1, sizeof(::CARTA::OpenFileAck)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_OpenFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_OpenFileAck_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "open_file.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017open_file.proto\022\005CARTA\032\ndefs.proto\032\013en"
      "ums.proto\"q\n\010OpenFile\022\021\n\tdirectory\030\001 \001(\t"
      "\022\014\n\004file\030\002 \001(\t\022\013\n\003hdu\030\003 \001(\t\022\017\n\007file_id\030\004"
      " \001(\017\022&\n\013render_mode\030\005 \001(\0162\021.CARTA.Render"
      "Mode\"\326\001\n\013OpenFileAck\022\017\n\007success\030\001 \001(\010\022\017\n"
      "\007file_id\030\002 \001(\017\022\017\n\007message\030\003 \001(\t\022\"\n\tfile_"
      "info\030\004 \001(\0132\017.CARTA.FileInfo\0223\n\022file_info"
      "_extended\030\005 \001(\0132\027.CARTA.FileInfoExtended"
      "\022\032\n\022file_feature_flags\030\006 \001(\007\022\037\n\nbeam_tab"
      "le\030\007 \003(\0132\013.CARTA.Beamb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "open_file.proto", &protobuf_RegisterTypes);
  ::protobuf_defs_2eproto::AddDescriptors();
  ::protobuf_enums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_open_5ffile_2eproto
namespace CARTA {

// ===================================================================

void OpenFile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenFile::kDirectoryFieldNumber;
const int OpenFile::kFileFieldNumber;
const int OpenFile::kHduFieldNumber;
const int OpenFile::kFileIdFieldNumber;
const int OpenFile::kRenderModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenFile::OpenFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_open_5ffile_2eproto::scc_info_OpenFile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.OpenFile)
}
OpenFile::OpenFile(const OpenFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.directory().size() > 0) {
    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  hdu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hdu().size() > 0) {
    hdu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdu_);
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&render_mode_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(render_mode_));
  // @@protoc_insertion_point(copy_constructor:CARTA.OpenFile)
}

void OpenFile::SharedCtor() {
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&render_mode_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(render_mode_));
}

OpenFile::~OpenFile() {
  // @@protoc_insertion_point(destructor:CARTA.OpenFile)
  SharedDtor();
}

void OpenFile::SharedDtor() {
  directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenFile::descriptor() {
  ::protobuf_open_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_open_5ffile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenFile& OpenFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_open_5ffile_2eproto::scc_info_OpenFile.base);
  return *internal_default_instance();
}


void OpenFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.OpenFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&render_mode_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(render_mode_));
  _internal_metadata_.Clear();
}

bool OpenFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.OpenFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string directory = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->directory().data(), static_cast<int>(this->directory().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.OpenFile.directory"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), static_cast<int>(this->file().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.OpenFile.file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hdu = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdu()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hdu().data(), static_cast<int>(this->hdu().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.OpenFile.hdu"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 file_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.RenderMode render_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_render_mode(static_cast< ::CARTA::RenderMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.OpenFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.OpenFile)
  return false;
#undef DO_
}

void OpenFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.OpenFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), static_cast<int>(this->directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenFile.directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->directory(), output);
  }

  // string file = 2;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenFile.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file(), output);
  }

  // string hdu = 3;
  if (this->hdu().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdu().data(), static_cast<int>(this->hdu().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenFile.hdu");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hdu(), output);
  }

  // sfixed32 file_id = 4;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->file_id(), output);
  }

  // .CARTA.RenderMode render_mode = 5;
  if (this->render_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->render_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.OpenFile)
}

::google::protobuf::uint8* OpenFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.OpenFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), static_cast<int>(this->directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenFile.directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->directory(), target);
  }

  // string file = 2;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenFile.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }

  // string hdu = 3;
  if (this->hdu().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdu().data(), static_cast<int>(this->hdu().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenFile.hdu");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hdu(), target);
  }

  // sfixed32 file_id = 4;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->file_id(), target);
  }

  // .CARTA.RenderMode render_mode = 5;
  if (this->render_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->render_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.OpenFile)
  return target;
}

size_t OpenFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.OpenFile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string directory = 1;
  if (this->directory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->directory());
  }

  // string file = 2;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // string hdu = 3;
  if (this->hdu().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hdu());
  }

  // sfixed32 file_id = 4;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // .CARTA.RenderMode render_mode = 5;
  if (this->render_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->render_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.OpenFile)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.OpenFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.OpenFile)
    MergeFrom(*source);
  }
}

void OpenFile::MergeFrom(const OpenFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.OpenFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directory().size() > 0) {

    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.hdu().size() > 0) {

    hdu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdu_);
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.render_mode() != 0) {
    set_render_mode(from.render_mode());
  }
}

void OpenFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.OpenFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenFile::CopyFrom(const OpenFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.OpenFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenFile::IsInitialized() const {
  return true;
}

void OpenFile::Swap(OpenFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenFile::InternalSwap(OpenFile* other) {
  using std::swap;
  directory_.Swap(&other->directory_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_.Swap(&other->file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hdu_.Swap(&other->hdu_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_id_, other->file_id_);
  swap(render_mode_, other->render_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenFile::GetMetadata() const {
  protobuf_open_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_open_5ffile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenFileAck::InitAsDefaultInstance() {
  ::CARTA::_OpenFileAck_default_instance_._instance.get_mutable()->file_info_ = const_cast< ::CARTA::FileInfo*>(
      ::CARTA::FileInfo::internal_default_instance());
  ::CARTA::_OpenFileAck_default_instance_._instance.get_mutable()->file_info_extended_ = const_cast< ::CARTA::FileInfoExtended*>(
      ::CARTA::FileInfoExtended::internal_default_instance());
}
void OpenFileAck::clear_file_info() {
  if (GetArenaNoVirtual() == NULL && file_info_ != NULL) {
    delete file_info_;
  }
  file_info_ = NULL;
}
void OpenFileAck::clear_file_info_extended() {
  if (GetArenaNoVirtual() == NULL && file_info_extended_ != NULL) {
    delete file_info_extended_;
  }
  file_info_extended_ = NULL;
}
void OpenFileAck::clear_beam_table() {
  beam_table_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenFileAck::kSuccessFieldNumber;
const int OpenFileAck::kFileIdFieldNumber;
const int OpenFileAck::kMessageFieldNumber;
const int OpenFileAck::kFileInfoFieldNumber;
const int OpenFileAck::kFileInfoExtendedFieldNumber;
const int OpenFileAck::kFileFeatureFlagsFieldNumber;
const int OpenFileAck::kBeamTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenFileAck::OpenFileAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_open_5ffile_2eproto::scc_info_OpenFileAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.OpenFileAck)
}
OpenFileAck::OpenFileAck(const OpenFileAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      beam_table_(from.beam_table_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_file_info()) {
    file_info_ = new ::CARTA::FileInfo(*from.file_info_);
  } else {
    file_info_ = NULL;
  }
  if (from.has_file_info_extended()) {
    file_info_extended_ = new ::CARTA::FileInfoExtended(*from.file_info_extended_);
  } else {
    file_info_extended_ = NULL;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_feature_flags_) -
    reinterpret_cast<char*>(&success_)) + sizeof(file_feature_flags_));
  // @@protoc_insertion_point(copy_constructor:CARTA.OpenFileAck)
}

void OpenFileAck::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_feature_flags_) -
      reinterpret_cast<char*>(&file_info_)) + sizeof(file_feature_flags_));
}

OpenFileAck::~OpenFileAck() {
  // @@protoc_insertion_point(destructor:CARTA.OpenFileAck)
  SharedDtor();
}

void OpenFileAck::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_info_;
  if (this != internal_default_instance()) delete file_info_extended_;
}

void OpenFileAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenFileAck::descriptor() {
  ::protobuf_open_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_open_5ffile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenFileAck& OpenFileAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_open_5ffile_2eproto::scc_info_OpenFileAck.base);
  return *internal_default_instance();
}


void OpenFileAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.OpenFileAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  beam_table_.Clear();
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && file_info_ != NULL) {
    delete file_info_;
  }
  file_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_info_extended_ != NULL) {
    delete file_info_extended_;
  }
  file_info_extended_ = NULL;
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_feature_flags_) -
      reinterpret_cast<char*>(&success_)) + sizeof(file_feature_flags_));
  _internal_metadata_.Clear();
}

bool OpenFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.OpenFileAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 file_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.OpenFileAck.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.FileInfo file_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.FileInfoExtended file_info_extended = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_info_extended()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 file_feature_flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &file_feature_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.Beam beam_table = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_beam_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.OpenFileAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.OpenFileAck)
  return false;
#undef DO_
}

void OpenFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.OpenFileAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // sfixed32 file_id = 2;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->file_id(), output);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenFileAck.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // .CARTA.FileInfo file_info = 4;
  if (this->has_file_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_file_info(), output);
  }

  // .CARTA.FileInfoExtended file_info_extended = 5;
  if (this->has_file_info_extended()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_file_info_extended(), output);
  }

  // fixed32 file_feature_flags = 6;
  if (this->file_feature_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->file_feature_flags(), output);
  }

  // repeated .CARTA.Beam beam_table = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->beam_table_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->beam_table(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.OpenFileAck)
}

::google::protobuf::uint8* OpenFileAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.OpenFileAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // sfixed32 file_id = 2;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->file_id(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenFileAck.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // .CARTA.FileInfo file_info = 4;
  if (this->has_file_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_file_info(), deterministic, target);
  }

  // .CARTA.FileInfoExtended file_info_extended = 5;
  if (this->has_file_info_extended()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_file_info_extended(), deterministic, target);
  }

  // fixed32 file_feature_flags = 6;
  if (this->file_feature_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->file_feature_flags(), target);
  }

  // repeated .CARTA.Beam beam_table = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->beam_table_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->beam_table(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.OpenFileAck)
  return target;
}

size_t OpenFileAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.OpenFileAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.Beam beam_table = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->beam_table_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->beam_table(static_cast<int>(i)));
    }
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .CARTA.FileInfo file_info = 4;
  if (this->has_file_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_info_);
  }

  // .CARTA.FileInfoExtended file_info_extended = 5;
  if (this->has_file_info_extended()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_info_extended_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // sfixed32 file_id = 2;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 file_feature_flags = 6;
  if (this->file_feature_flags() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenFileAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.OpenFileAck)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenFileAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenFileAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.OpenFileAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.OpenFileAck)
    MergeFrom(*source);
  }
}

void OpenFileAck::MergeFrom(const OpenFileAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.OpenFileAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  beam_table_.MergeFrom(from.beam_table_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_file_info()) {
    mutable_file_info()->::CARTA::FileInfo::MergeFrom(from.file_info());
  }
  if (from.has_file_info_extended()) {
    mutable_file_info_extended()->::CARTA::FileInfoExtended::MergeFrom(from.file_info_extended());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.file_feature_flags() != 0) {
    set_file_feature_flags(from.file_feature_flags());
  }
}

void OpenFileAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.OpenFileAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenFileAck::CopyFrom(const OpenFileAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.OpenFileAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenFileAck::IsInitialized() const {
  return true;
}

void OpenFileAck::Swap(OpenFileAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenFileAck::InternalSwap(OpenFileAck* other) {
  using std::swap;
  CastToBase(&beam_table_)->InternalSwap(CastToBase(&other->beam_table_));
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_info_, other->file_info_);
  swap(file_info_extended_, other->file_info_extended_);
  swap(success_, other->success_);
  swap(file_id_, other->file_id_);
  swap(file_feature_flags_, other->file_feature_flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenFileAck::GetMetadata() const {
  protobuf_open_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_open_5ffile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::OpenFile* Arena::CreateMaybeMessage< ::CARTA::OpenFile >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::OpenFile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::OpenFileAck* Arena::CreateMaybeMessage< ::CARTA::OpenFileAck >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::OpenFileAck >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
