// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concat_stokes_files.proto

#ifndef PROTOBUF_INCLUDED_concat_5fstokes_5ffiles_2eproto
#define PROTOBUF_INCLUDED_concat_5fstokes_5ffiles_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
#include "open_file.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_concat_5fstokes_5ffiles_2eproto 

namespace protobuf_concat_5fstokes_5ffiles_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_concat_5fstokes_5ffiles_2eproto
namespace CARTA {
class ConcatStokesFiles;
class ConcatStokesFilesDefaultTypeInternal;
extern ConcatStokesFilesDefaultTypeInternal _ConcatStokesFiles_default_instance_;
class ConcatStokesFilesAck;
class ConcatStokesFilesAckDefaultTypeInternal;
extern ConcatStokesFilesAckDefaultTypeInternal _ConcatStokesFilesAck_default_instance_;
class StokesFile;
class StokesFileDefaultTypeInternal;
extern StokesFileDefaultTypeInternal _StokesFile_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::ConcatStokesFiles* Arena::CreateMaybeMessage<::CARTA::ConcatStokesFiles>(Arena*);
template<> ::CARTA::ConcatStokesFilesAck* Arena::CreateMaybeMessage<::CARTA::ConcatStokesFilesAck>(Arena*);
template<> ::CARTA::StokesFile* Arena::CreateMaybeMessage<::CARTA::StokesFile>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class ConcatStokesFiles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ConcatStokesFiles) */ {
 public:
  ConcatStokesFiles();
  virtual ~ConcatStokesFiles();

  ConcatStokesFiles(const ConcatStokesFiles& from);

  inline ConcatStokesFiles& operator=(const ConcatStokesFiles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConcatStokesFiles(ConcatStokesFiles&& from) noexcept
    : ConcatStokesFiles() {
    *this = ::std::move(from);
  }

  inline ConcatStokesFiles& operator=(ConcatStokesFiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatStokesFiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcatStokesFiles* internal_default_instance() {
    return reinterpret_cast<const ConcatStokesFiles*>(
               &_ConcatStokesFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConcatStokesFiles* other);
  friend void swap(ConcatStokesFiles& a, ConcatStokesFiles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConcatStokesFiles* New() const final {
    return CreateMaybeMessage<ConcatStokesFiles>(NULL);
  }

  ConcatStokesFiles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConcatStokesFiles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConcatStokesFiles& from);
  void MergeFrom(const ConcatStokesFiles& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcatStokesFiles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARTA.StokesFile stokes_files = 1;
  int stokes_files_size() const;
  void clear_stokes_files();
  static const int kStokesFilesFieldNumber = 1;
  ::CARTA::StokesFile* mutable_stokes_files(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::StokesFile >*
      mutable_stokes_files();
  const ::CARTA::StokesFile& stokes_files(int index) const;
  ::CARTA::StokesFile* add_stokes_files();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::StokesFile >&
      stokes_files() const;

  // sfixed32 file_id = 2;
  void clear_file_id();
  static const int kFileIdFieldNumber = 2;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // .CARTA.RenderMode render_mode = 3;
  void clear_render_mode();
  static const int kRenderModeFieldNumber = 3;
  ::CARTA::RenderMode render_mode() const;
  void set_render_mode(::CARTA::RenderMode value);

  // @@protoc_insertion_point(class_scope:CARTA.ConcatStokesFiles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::StokesFile > stokes_files_;
  ::google::protobuf::int32 file_id_;
  int render_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_concat_5fstokes_5ffiles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StokesFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.StokesFile) */ {
 public:
  StokesFile();
  virtual ~StokesFile();

  StokesFile(const StokesFile& from);

  inline StokesFile& operator=(const StokesFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StokesFile(StokesFile&& from) noexcept
    : StokesFile() {
    *this = ::std::move(from);
  }

  inline StokesFile& operator=(StokesFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StokesFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StokesFile* internal_default_instance() {
    return reinterpret_cast<const StokesFile*>(
               &_StokesFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StokesFile* other);
  friend void swap(StokesFile& a, StokesFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StokesFile* New() const final {
    return CreateMaybeMessage<StokesFile>(NULL);
  }

  StokesFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StokesFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StokesFile& from);
  void MergeFrom(const StokesFile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StokesFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string directory = 1;
  void clear_directory();
  static const int kDirectoryFieldNumber = 1;
  const ::std::string& directory() const;
  void set_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_directory(::std::string&& value);
  #endif
  void set_directory(const char* value);
  void set_directory(const char* value, size_t size);
  ::std::string* mutable_directory();
  ::std::string* release_directory();
  void set_allocated_directory(::std::string* directory);

  // string file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // string hdu = 3;
  void clear_hdu();
  static const int kHduFieldNumber = 3;
  const ::std::string& hdu() const;
  void set_hdu(const ::std::string& value);
  #if LANG_CXX11
  void set_hdu(::std::string&& value);
  #endif
  void set_hdu(const char* value);
  void set_hdu(const char* value, size_t size);
  ::std::string* mutable_hdu();
  ::std::string* release_hdu();
  void set_allocated_hdu(::std::string* hdu);

  // .CARTA.StokesType stokes_type = 4;
  void clear_stokes_type();
  static const int kStokesTypeFieldNumber = 4;
  ::CARTA::StokesType stokes_type() const;
  void set_stokes_type(::CARTA::StokesType value);

  // @@protoc_insertion_point(class_scope:CARTA.StokesFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr directory_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr hdu_;
  int stokes_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_concat_5fstokes_5ffiles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConcatStokesFilesAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ConcatStokesFilesAck) */ {
 public:
  ConcatStokesFilesAck();
  virtual ~ConcatStokesFilesAck();

  ConcatStokesFilesAck(const ConcatStokesFilesAck& from);

  inline ConcatStokesFilesAck& operator=(const ConcatStokesFilesAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConcatStokesFilesAck(ConcatStokesFilesAck&& from) noexcept
    : ConcatStokesFilesAck() {
    *this = ::std::move(from);
  }

  inline ConcatStokesFilesAck& operator=(ConcatStokesFilesAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatStokesFilesAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConcatStokesFilesAck* internal_default_instance() {
    return reinterpret_cast<const ConcatStokesFilesAck*>(
               &_ConcatStokesFilesAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ConcatStokesFilesAck* other);
  friend void swap(ConcatStokesFilesAck& a, ConcatStokesFilesAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConcatStokesFilesAck* New() const final {
    return CreateMaybeMessage<ConcatStokesFilesAck>(NULL);
  }

  ConcatStokesFilesAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConcatStokesFilesAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConcatStokesFilesAck& from);
  void MergeFrom(const ConcatStokesFilesAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConcatStokesFilesAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .CARTA.OpenFileAck open_file_ack = 3;
  bool has_open_file_ack() const;
  void clear_open_file_ack();
  static const int kOpenFileAckFieldNumber = 3;
  private:
  const ::CARTA::OpenFileAck& _internal_open_file_ack() const;
  public:
  const ::CARTA::OpenFileAck& open_file_ack() const;
  ::CARTA::OpenFileAck* release_open_file_ack();
  ::CARTA::OpenFileAck* mutable_open_file_ack();
  void set_allocated_open_file_ack(::CARTA::OpenFileAck* open_file_ack);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:CARTA.ConcatStokesFilesAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::CARTA::OpenFileAck* open_file_ack_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_concat_5fstokes_5ffiles_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConcatStokesFiles

// repeated .CARTA.StokesFile stokes_files = 1;
inline int ConcatStokesFiles::stokes_files_size() const {
  return stokes_files_.size();
}
inline void ConcatStokesFiles::clear_stokes_files() {
  stokes_files_.Clear();
}
inline ::CARTA::StokesFile* ConcatStokesFiles::mutable_stokes_files(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.ConcatStokesFiles.stokes_files)
  return stokes_files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::StokesFile >*
ConcatStokesFiles::mutable_stokes_files() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.ConcatStokesFiles.stokes_files)
  return &stokes_files_;
}
inline const ::CARTA::StokesFile& ConcatStokesFiles::stokes_files(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.ConcatStokesFiles.stokes_files)
  return stokes_files_.Get(index);
}
inline ::CARTA::StokesFile* ConcatStokesFiles::add_stokes_files() {
  // @@protoc_insertion_point(field_add:CARTA.ConcatStokesFiles.stokes_files)
  return stokes_files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::StokesFile >&
ConcatStokesFiles::stokes_files() const {
  // @@protoc_insertion_point(field_list:CARTA.ConcatStokesFiles.stokes_files)
  return stokes_files_;
}

// sfixed32 file_id = 2;
inline void ConcatStokesFiles::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 ConcatStokesFiles::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.ConcatStokesFiles.file_id)
  return file_id_;
}
inline void ConcatStokesFiles::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ConcatStokesFiles.file_id)
}

// .CARTA.RenderMode render_mode = 3;
inline void ConcatStokesFiles::clear_render_mode() {
  render_mode_ = 0;
}
inline ::CARTA::RenderMode ConcatStokesFiles::render_mode() const {
  // @@protoc_insertion_point(field_get:CARTA.ConcatStokesFiles.render_mode)
  return static_cast< ::CARTA::RenderMode >(render_mode_);
}
inline void ConcatStokesFiles::set_render_mode(::CARTA::RenderMode value) {
  
  render_mode_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ConcatStokesFiles.render_mode)
}

// -------------------------------------------------------------------

// StokesFile

// string directory = 1;
inline void StokesFile::clear_directory() {
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StokesFile::directory() const {
  // @@protoc_insertion_point(field_get:CARTA.StokesFile.directory)
  return directory_.GetNoArena();
}
inline void StokesFile::set_directory(const ::std::string& value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.StokesFile.directory)
}
#if LANG_CXX11
inline void StokesFile::set_directory(::std::string&& value) {
  
  directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.StokesFile.directory)
}
#endif
inline void StokesFile::set_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.StokesFile.directory)
}
inline void StokesFile::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.StokesFile.directory)
}
inline ::std::string* StokesFile::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.StokesFile.directory)
  return directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StokesFile::release_directory() {
  // @@protoc_insertion_point(field_release:CARTA.StokesFile.directory)
  
  return directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StokesFile::set_allocated_directory(::std::string* directory) {
  if (directory != NULL) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:CARTA.StokesFile.directory)
}

// string file = 2;
inline void StokesFile::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StokesFile::file() const {
  // @@protoc_insertion_point(field_get:CARTA.StokesFile.file)
  return file_.GetNoArena();
}
inline void StokesFile::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.StokesFile.file)
}
#if LANG_CXX11
inline void StokesFile::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.StokesFile.file)
}
#endif
inline void StokesFile::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.StokesFile.file)
}
inline void StokesFile::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.StokesFile.file)
}
inline ::std::string* StokesFile::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.StokesFile.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StokesFile::release_file() {
  // @@protoc_insertion_point(field_release:CARTA.StokesFile.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StokesFile::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:CARTA.StokesFile.file)
}

// string hdu = 3;
inline void StokesFile::clear_hdu() {
  hdu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StokesFile::hdu() const {
  // @@protoc_insertion_point(field_get:CARTA.StokesFile.hdu)
  return hdu_.GetNoArena();
}
inline void StokesFile::set_hdu(const ::std::string& value) {
  
  hdu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.StokesFile.hdu)
}
#if LANG_CXX11
inline void StokesFile::set_hdu(::std::string&& value) {
  
  hdu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.StokesFile.hdu)
}
#endif
inline void StokesFile::set_hdu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hdu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.StokesFile.hdu)
}
inline void StokesFile::set_hdu(const char* value, size_t size) {
  
  hdu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.StokesFile.hdu)
}
inline ::std::string* StokesFile::mutable_hdu() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.StokesFile.hdu)
  return hdu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StokesFile::release_hdu() {
  // @@protoc_insertion_point(field_release:CARTA.StokesFile.hdu)
  
  return hdu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StokesFile::set_allocated_hdu(::std::string* hdu) {
  if (hdu != NULL) {
    
  } else {
    
  }
  hdu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hdu);
  // @@protoc_insertion_point(field_set_allocated:CARTA.StokesFile.hdu)
}

// .CARTA.StokesType stokes_type = 4;
inline void StokesFile::clear_stokes_type() {
  stokes_type_ = 0;
}
inline ::CARTA::StokesType StokesFile::stokes_type() const {
  // @@protoc_insertion_point(field_get:CARTA.StokesFile.stokes_type)
  return static_cast< ::CARTA::StokesType >(stokes_type_);
}
inline void StokesFile::set_stokes_type(::CARTA::StokesType value) {
  
  stokes_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.StokesFile.stokes_type)
}

// -------------------------------------------------------------------

// ConcatStokesFilesAck

// bool success = 1;
inline void ConcatStokesFilesAck::clear_success() {
  success_ = false;
}
inline bool ConcatStokesFilesAck::success() const {
  // @@protoc_insertion_point(field_get:CARTA.ConcatStokesFilesAck.success)
  return success_;
}
inline void ConcatStokesFilesAck::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ConcatStokesFilesAck.success)
}

// string message = 2;
inline void ConcatStokesFilesAck::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConcatStokesFilesAck::message() const {
  // @@protoc_insertion_point(field_get:CARTA.ConcatStokesFilesAck.message)
  return message_.GetNoArena();
}
inline void ConcatStokesFilesAck::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ConcatStokesFilesAck.message)
}
#if LANG_CXX11
inline void ConcatStokesFilesAck::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ConcatStokesFilesAck.message)
}
#endif
inline void ConcatStokesFilesAck::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ConcatStokesFilesAck.message)
}
inline void ConcatStokesFilesAck::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ConcatStokesFilesAck.message)
}
inline ::std::string* ConcatStokesFilesAck::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ConcatStokesFilesAck.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConcatStokesFilesAck::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.ConcatStokesFilesAck.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConcatStokesFilesAck::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ConcatStokesFilesAck.message)
}

// .CARTA.OpenFileAck open_file_ack = 3;
inline bool ConcatStokesFilesAck::has_open_file_ack() const {
  return this != internal_default_instance() && open_file_ack_ != NULL;
}
inline const ::CARTA::OpenFileAck& ConcatStokesFilesAck::_internal_open_file_ack() const {
  return *open_file_ack_;
}
inline const ::CARTA::OpenFileAck& ConcatStokesFilesAck::open_file_ack() const {
  const ::CARTA::OpenFileAck* p = open_file_ack_;
  // @@protoc_insertion_point(field_get:CARTA.ConcatStokesFilesAck.open_file_ack)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::OpenFileAck*>(
      &::CARTA::_OpenFileAck_default_instance_);
}
inline ::CARTA::OpenFileAck* ConcatStokesFilesAck::release_open_file_ack() {
  // @@protoc_insertion_point(field_release:CARTA.ConcatStokesFilesAck.open_file_ack)
  
  ::CARTA::OpenFileAck* temp = open_file_ack_;
  open_file_ack_ = NULL;
  return temp;
}
inline ::CARTA::OpenFileAck* ConcatStokesFilesAck::mutable_open_file_ack() {
  
  if (open_file_ack_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::OpenFileAck>(GetArenaNoVirtual());
    open_file_ack_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.ConcatStokesFilesAck.open_file_ack)
  return open_file_ack_;
}
inline void ConcatStokesFilesAck::set_allocated_open_file_ack(::CARTA::OpenFileAck* open_file_ack) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(open_file_ack_);
  }
  if (open_file_ack) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      open_file_ack = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, open_file_ack, submessage_arena);
    }
    
  } else {
    
  }
  open_file_ack_ = open_file_ack;
  // @@protoc_insertion_point(field_set_allocated:CARTA.ConcatStokesFilesAck.open_file_ack)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_concat_5fstokes_5ffiles_2eproto
