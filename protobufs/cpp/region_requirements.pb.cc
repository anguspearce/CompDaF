// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: region_requirements.proto

#include "region_requirements.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_region_5frequirements_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_region_5frequirements_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SetHistogramRequirements_HistogramConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_region_5frequirements_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SetSpatialRequirements_SpatialConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_region_5frequirements_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SetSpectralRequirements_SpectralConfig;
}  // namespace protobuf_region_5frequirements_2eproto
namespace CARTA {
class SetStatsRequirementsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetStatsRequirements>
      _instance;
} _SetStatsRequirements_default_instance_;
class SetHistogramRequirements_HistogramConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetHistogramRequirements_HistogramConfig>
      _instance;
} _SetHistogramRequirements_HistogramConfig_default_instance_;
class SetHistogramRequirementsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetHistogramRequirements>
      _instance;
} _SetHistogramRequirements_default_instance_;
class SetSpatialRequirements_SpatialConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetSpatialRequirements_SpatialConfig>
      _instance;
} _SetSpatialRequirements_SpatialConfig_default_instance_;
class SetSpatialRequirementsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetSpatialRequirements>
      _instance;
} _SetSpatialRequirements_default_instance_;
class SetSpectralRequirements_SpectralConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetSpectralRequirements_SpectralConfig>
      _instance;
} _SetSpectralRequirements_SpectralConfig_default_instance_;
class SetSpectralRequirementsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetSpectralRequirements>
      _instance;
} _SetSpectralRequirements_default_instance_;
}  // namespace CARTA
namespace protobuf_region_5frequirements_2eproto {
static void InitDefaultsSetStatsRequirements() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SetStatsRequirements_default_instance_;
    new (ptr) ::CARTA::SetStatsRequirements();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SetStatsRequirements::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetStatsRequirements =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetStatsRequirements}, {}};

static void InitDefaultsSetHistogramRequirements_HistogramConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SetHistogramRequirements_HistogramConfig_default_instance_;
    new (ptr) ::CARTA::SetHistogramRequirements_HistogramConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SetHistogramRequirements_HistogramConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetHistogramRequirements_HistogramConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetHistogramRequirements_HistogramConfig}, {}};

static void InitDefaultsSetHistogramRequirements() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SetHistogramRequirements_default_instance_;
    new (ptr) ::CARTA::SetHistogramRequirements();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SetHistogramRequirements::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetHistogramRequirements =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetHistogramRequirements}, {
      &protobuf_region_5frequirements_2eproto::scc_info_SetHistogramRequirements_HistogramConfig.base,}};

static void InitDefaultsSetSpatialRequirements_SpatialConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SetSpatialRequirements_SpatialConfig_default_instance_;
    new (ptr) ::CARTA::SetSpatialRequirements_SpatialConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SetSpatialRequirements_SpatialConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetSpatialRequirements_SpatialConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetSpatialRequirements_SpatialConfig}, {}};

static void InitDefaultsSetSpatialRequirements() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SetSpatialRequirements_default_instance_;
    new (ptr) ::CARTA::SetSpatialRequirements();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SetSpatialRequirements::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetSpatialRequirements =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetSpatialRequirements}, {
      &protobuf_region_5frequirements_2eproto::scc_info_SetSpatialRequirements_SpatialConfig.base,}};

static void InitDefaultsSetSpectralRequirements_SpectralConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SetSpectralRequirements_SpectralConfig_default_instance_;
    new (ptr) ::CARTA::SetSpectralRequirements_SpectralConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SetSpectralRequirements_SpectralConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SetSpectralRequirements_SpectralConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSetSpectralRequirements_SpectralConfig}, {}};

static void InitDefaultsSetSpectralRequirements() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SetSpectralRequirements_default_instance_;
    new (ptr) ::CARTA::SetSpectralRequirements();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SetSpectralRequirements::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SetSpectralRequirements =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSetSpectralRequirements}, {
      &protobuf_region_5frequirements_2eproto::scc_info_SetSpectralRequirements_SpectralConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SetStatsRequirements.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetHistogramRequirements_HistogramConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetHistogramRequirements.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetSpatialRequirements_SpatialConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetSpatialRequirements.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetSpectralRequirements_SpectralConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SetSpectralRequirements.base);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetStatsRequirements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetStatsRequirements, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetStatsRequirements, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetStatsRequirements, stats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetHistogramRequirements_HistogramConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetHistogramRequirements_HistogramConfig, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetHistogramRequirements_HistogramConfig, num_bins_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetHistogramRequirements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetHistogramRequirements, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetHistogramRequirements, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetHistogramRequirements, histograms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpatialRequirements_SpatialConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpatialRequirements_SpatialConfig, coordinate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpatialRequirements_SpatialConfig, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpatialRequirements_SpatialConfig, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpatialRequirements_SpatialConfig, mip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpatialRequirements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpatialRequirements, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpatialRequirements, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpatialRequirements, spatial_profiles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpectralRequirements_SpectralConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpectralRequirements_SpectralConfig, coordinate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpectralRequirements_SpectralConfig, stats_types_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpectralRequirements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpectralRequirements, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpectralRequirements, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SetSpectralRequirements, spectral_profiles_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::SetStatsRequirements)},
  { 8, -1, sizeof(::CARTA::SetHistogramRequirements_HistogramConfig)},
  { 15, -1, sizeof(::CARTA::SetHistogramRequirements)},
  { 23, -1, sizeof(::CARTA::SetSpatialRequirements_SpatialConfig)},
  { 32, -1, sizeof(::CARTA::SetSpatialRequirements)},
  { 40, -1, sizeof(::CARTA::SetSpectralRequirements_SpectralConfig)},
  { 47, -1, sizeof(::CARTA::SetSpectralRequirements)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SetStatsRequirements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SetHistogramRequirements_HistogramConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SetHistogramRequirements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SetSpatialRequirements_SpatialConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SetSpatialRequirements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SetSpectralRequirements_SpectralConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SetSpectralRequirements_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "region_requirements.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031region_requirements.proto\022\005CARTA\032\013enum"
      "s.proto\"[\n\024SetStatsRequirements\022\017\n\007file_"
      "id\030\001 \001(\017\022\021\n\tregion_id\030\002 \001(\017\022\037\n\005stats\030\003 \003"
      "(\0162\020.CARTA.StatsType\"\271\001\n\030SetHistogramReq"
      "uirements\022\017\n\007file_id\030\001 \001(\017\022\021\n\tregion_id\030"
      "\002 \001(\017\022C\n\nhistograms\030\003 \003(\0132/.CARTA.SetHis"
      "togramRequirements.HistogramConfig\0324\n\017Hi"
      "stogramConfig\022\017\n\007channel\030\001 \001(\017\022\020\n\010num_bi"
      "ns\030\002 \001(\017\"\321\001\n\026SetSpatialRequirements\022\017\n\007f"
      "ile_id\030\001 \001(\017\022\021\n\tregion_id\030\002 \001(\017\022E\n\020spati"
      "al_profiles\030\003 \003(\0132+.CARTA.SetSpatialRequ"
      "irements.SpatialConfig\032L\n\rSpatialConfig\022"
      "\022\n\ncoordinate\030\001 \001(\t\022\r\n\005start\030\002 \001(\017\022\013\n\003en"
      "d\030\003 \001(\017\022\013\n\003mip\030\004 \001(\017\"\324\001\n\027SetSpectralRequ"
      "irements\022\017\n\007file_id\030\001 \001(\017\022\021\n\tregion_id\030\002"
      " \001(\017\022H\n\021spectral_profiles\030\003 \003(\0132-.CARTA."
      "SetSpectralRequirements.SpectralConfig\032K"
      "\n\016SpectralConfig\022\022\n\ncoordinate\030\001 \001(\t\022%\n\013"
      "stats_types\030\002 \003(\0162\020.CARTA.StatsTypeb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 763);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "region_requirements.proto", &protobuf_RegisterTypes);
  ::protobuf_enums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_region_5frequirements_2eproto
namespace CARTA {

// ===================================================================

void SetStatsRequirements::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetStatsRequirements::kFileIdFieldNumber;
const int SetStatsRequirements::kRegionIdFieldNumber;
const int SetStatsRequirements::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetStatsRequirements::SetStatsRequirements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_region_5frequirements_2eproto::scc_info_SetStatsRequirements.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SetStatsRequirements)
}
SetStatsRequirements::SetStatsRequirements(const SetStatsRequirements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_id_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
  // @@protoc_insertion_point(copy_constructor:CARTA.SetStatsRequirements)
}

void SetStatsRequirements::SharedCtor() {
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
}

SetStatsRequirements::~SetStatsRequirements() {
  // @@protoc_insertion_point(destructor:CARTA.SetStatsRequirements)
  SharedDtor();
}

void SetStatsRequirements::SharedDtor() {
}

void SetStatsRequirements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetStatsRequirements::descriptor() {
  ::protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetStatsRequirements& SetStatsRequirements::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_region_5frequirements_2eproto::scc_info_SetStatsRequirements.base);
  return *internal_default_instance();
}


void SetStatsRequirements::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SetStatsRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
  _internal_metadata_.Clear();
}

bool SetStatsRequirements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SetStatsRequirements)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.StatsType stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_stats(static_cast< ::CARTA::StatsType >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_stats(static_cast< ::CARTA::StatsType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SetStatsRequirements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SetStatsRequirements)
  return false;
#undef DO_
}

void SetStatsRequirements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SetStatsRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->region_id(), output);
  }

  // repeated .CARTA.StatsType stats = 3;
  if (this->stats_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_stats_cached_byte_size_));
  }
  for (int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->stats(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SetStatsRequirements)
}

::google::protobuf::uint8* SetStatsRequirements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SetStatsRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->region_id(), target);
  }

  // repeated .CARTA.StatsType stats = 3;
  if (this->stats_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _stats_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->stats_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SetStatsRequirements)
  return target;
}

size_t SetStatsRequirements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SetStatsRequirements)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.StatsType stats = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->stats_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->stats(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stats_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetStatsRequirements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SetStatsRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  const SetStatsRequirements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetStatsRequirements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SetStatsRequirements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SetStatsRequirements)
    MergeFrom(*source);
  }
}

void SetStatsRequirements::MergeFrom(const SetStatsRequirements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SetStatsRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void SetStatsRequirements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SetStatsRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetStatsRequirements::CopyFrom(const SetStatsRequirements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SetStatsRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStatsRequirements::IsInitialized() const {
  return true;
}

void SetStatsRequirements::Swap(SetStatsRequirements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetStatsRequirements::InternalSwap(SetStatsRequirements* other) {
  using std::swap;
  stats_.InternalSwap(&other->stats_);
  swap(file_id_, other->file_id_);
  swap(region_id_, other->region_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetStatsRequirements::GetMetadata() const {
  protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetHistogramRequirements_HistogramConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetHistogramRequirements_HistogramConfig::kChannelFieldNumber;
const int SetHistogramRequirements_HistogramConfig::kNumBinsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetHistogramRequirements_HistogramConfig::SetHistogramRequirements_HistogramConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_region_5frequirements_2eproto::scc_info_SetHistogramRequirements_HistogramConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SetHistogramRequirements.HistogramConfig)
}
SetHistogramRequirements_HistogramConfig::SetHistogramRequirements_HistogramConfig(const SetHistogramRequirements_HistogramConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_bins_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(num_bins_));
  // @@protoc_insertion_point(copy_constructor:CARTA.SetHistogramRequirements.HistogramConfig)
}

void SetHistogramRequirements_HistogramConfig::SharedCtor() {
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_bins_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(num_bins_));
}

SetHistogramRequirements_HistogramConfig::~SetHistogramRequirements_HistogramConfig() {
  // @@protoc_insertion_point(destructor:CARTA.SetHistogramRequirements.HistogramConfig)
  SharedDtor();
}

void SetHistogramRequirements_HistogramConfig::SharedDtor() {
}

void SetHistogramRequirements_HistogramConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetHistogramRequirements_HistogramConfig::descriptor() {
  ::protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetHistogramRequirements_HistogramConfig& SetHistogramRequirements_HistogramConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_region_5frequirements_2eproto::scc_info_SetHistogramRequirements_HistogramConfig.base);
  return *internal_default_instance();
}


void SetHistogramRequirements_HistogramConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SetHistogramRequirements.HistogramConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_bins_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(num_bins_));
  _internal_metadata_.Clear();
}

bool SetHistogramRequirements_HistogramConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SetHistogramRequirements.HistogramConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 num_bins = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &num_bins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SetHistogramRequirements.HistogramConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SetHistogramRequirements.HistogramConfig)
  return false;
#undef DO_
}

void SetHistogramRequirements_HistogramConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SetHistogramRequirements.HistogramConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->channel(), output);
  }

  // sfixed32 num_bins = 2;
  if (this->num_bins() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->num_bins(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SetHistogramRequirements.HistogramConfig)
}

::google::protobuf::uint8* SetHistogramRequirements_HistogramConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SetHistogramRequirements.HistogramConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->channel(), target);
  }

  // sfixed32 num_bins = 2;
  if (this->num_bins() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->num_bins(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SetHistogramRequirements.HistogramConfig)
  return target;
}

size_t SetHistogramRequirements_HistogramConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SetHistogramRequirements.HistogramConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 num_bins = 2;
  if (this->num_bins() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetHistogramRequirements_HistogramConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SetHistogramRequirements.HistogramConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SetHistogramRequirements_HistogramConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetHistogramRequirements_HistogramConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SetHistogramRequirements.HistogramConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SetHistogramRequirements.HistogramConfig)
    MergeFrom(*source);
  }
}

void SetHistogramRequirements_HistogramConfig::MergeFrom(const SetHistogramRequirements_HistogramConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SetHistogramRequirements.HistogramConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.num_bins() != 0) {
    set_num_bins(from.num_bins());
  }
}

void SetHistogramRequirements_HistogramConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SetHistogramRequirements.HistogramConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetHistogramRequirements_HistogramConfig::CopyFrom(const SetHistogramRequirements_HistogramConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SetHistogramRequirements.HistogramConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetHistogramRequirements_HistogramConfig::IsInitialized() const {
  return true;
}

void SetHistogramRequirements_HistogramConfig::Swap(SetHistogramRequirements_HistogramConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetHistogramRequirements_HistogramConfig::InternalSwap(SetHistogramRequirements_HistogramConfig* other) {
  using std::swap;
  swap(channel_, other->channel_);
  swap(num_bins_, other->num_bins_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetHistogramRequirements_HistogramConfig::GetMetadata() const {
  protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetHistogramRequirements::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetHistogramRequirements::kFileIdFieldNumber;
const int SetHistogramRequirements::kRegionIdFieldNumber;
const int SetHistogramRequirements::kHistogramsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetHistogramRequirements::SetHistogramRequirements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_region_5frequirements_2eproto::scc_info_SetHistogramRequirements.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SetHistogramRequirements)
}
SetHistogramRequirements::SetHistogramRequirements(const SetHistogramRequirements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      histograms_(from.histograms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_id_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
  // @@protoc_insertion_point(copy_constructor:CARTA.SetHistogramRequirements)
}

void SetHistogramRequirements::SharedCtor() {
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
}

SetHistogramRequirements::~SetHistogramRequirements() {
  // @@protoc_insertion_point(destructor:CARTA.SetHistogramRequirements)
  SharedDtor();
}

void SetHistogramRequirements::SharedDtor() {
}

void SetHistogramRequirements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetHistogramRequirements::descriptor() {
  ::protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetHistogramRequirements& SetHistogramRequirements::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_region_5frequirements_2eproto::scc_info_SetHistogramRequirements.base);
  return *internal_default_instance();
}


void SetHistogramRequirements::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SetHistogramRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  histograms_.Clear();
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
  _internal_metadata_.Clear();
}

bool SetHistogramRequirements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SetHistogramRequirements)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.SetHistogramRequirements.HistogramConfig histograms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_histograms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SetHistogramRequirements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SetHistogramRequirements)
  return false;
#undef DO_
}

void SetHistogramRequirements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SetHistogramRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->region_id(), output);
  }

  // repeated .CARTA.SetHistogramRequirements.HistogramConfig histograms = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->histograms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->histograms(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SetHistogramRequirements)
}

::google::protobuf::uint8* SetHistogramRequirements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SetHistogramRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->region_id(), target);
  }

  // repeated .CARTA.SetHistogramRequirements.HistogramConfig histograms = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->histograms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->histograms(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SetHistogramRequirements)
  return target;
}

size_t SetHistogramRequirements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SetHistogramRequirements)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.SetHistogramRequirements.HistogramConfig histograms = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->histograms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->histograms(static_cast<int>(i)));
    }
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetHistogramRequirements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SetHistogramRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  const SetHistogramRequirements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetHistogramRequirements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SetHistogramRequirements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SetHistogramRequirements)
    MergeFrom(*source);
  }
}

void SetHistogramRequirements::MergeFrom(const SetHistogramRequirements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SetHistogramRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  histograms_.MergeFrom(from.histograms_);
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void SetHistogramRequirements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SetHistogramRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetHistogramRequirements::CopyFrom(const SetHistogramRequirements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SetHistogramRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetHistogramRequirements::IsInitialized() const {
  return true;
}

void SetHistogramRequirements::Swap(SetHistogramRequirements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetHistogramRequirements::InternalSwap(SetHistogramRequirements* other) {
  using std::swap;
  CastToBase(&histograms_)->InternalSwap(CastToBase(&other->histograms_));
  swap(file_id_, other->file_id_);
  swap(region_id_, other->region_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetHistogramRequirements::GetMetadata() const {
  protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetSpatialRequirements_SpatialConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSpatialRequirements_SpatialConfig::kCoordinateFieldNumber;
const int SetSpatialRequirements_SpatialConfig::kStartFieldNumber;
const int SetSpatialRequirements_SpatialConfig::kEndFieldNumber;
const int SetSpatialRequirements_SpatialConfig::kMipFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSpatialRequirements_SpatialConfig::SetSpatialRequirements_SpatialConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_region_5frequirements_2eproto::scc_info_SetSpatialRequirements_SpatialConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SetSpatialRequirements.SpatialConfig)
}
SetSpatialRequirements_SpatialConfig::SetSpatialRequirements_SpatialConfig(const SetSpatialRequirements_SpatialConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.coordinate().size() > 0) {
    coordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coordinate_);
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&mip_) -
    reinterpret_cast<char*>(&start_)) + sizeof(mip_));
  // @@protoc_insertion_point(copy_constructor:CARTA.SetSpatialRequirements.SpatialConfig)
}

void SetSpatialRequirements_SpatialConfig::SharedCtor() {
  coordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mip_) -
      reinterpret_cast<char*>(&start_)) + sizeof(mip_));
}

SetSpatialRequirements_SpatialConfig::~SetSpatialRequirements_SpatialConfig() {
  // @@protoc_insertion_point(destructor:CARTA.SetSpatialRequirements.SpatialConfig)
  SharedDtor();
}

void SetSpatialRequirements_SpatialConfig::SharedDtor() {
  coordinate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetSpatialRequirements_SpatialConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetSpatialRequirements_SpatialConfig::descriptor() {
  ::protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetSpatialRequirements_SpatialConfig& SetSpatialRequirements_SpatialConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_region_5frequirements_2eproto::scc_info_SetSpatialRequirements_SpatialConfig.base);
  return *internal_default_instance();
}


void SetSpatialRequirements_SpatialConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SetSpatialRequirements.SpatialConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mip_) -
      reinterpret_cast<char*>(&start_)) + sizeof(mip_));
  _internal_metadata_.Clear();
}

bool SetSpatialRequirements_SpatialConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SetSpatialRequirements.SpatialConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string coordinate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coordinate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->coordinate().data(), static_cast<int>(this->coordinate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.SetSpatialRequirements.SpatialConfig.coordinate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 mip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &mip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SetSpatialRequirements.SpatialConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SetSpatialRequirements.SpatialConfig)
  return false;
#undef DO_
}

void SetSpatialRequirements_SpatialConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SetSpatialRequirements.SpatialConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string coordinate = 1;
  if (this->coordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coordinate().data(), static_cast<int>(this->coordinate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SetSpatialRequirements.SpatialConfig.coordinate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->coordinate(), output);
  }

  // sfixed32 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->start(), output);
  }

  // sfixed32 end = 3;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->end(), output);
  }

  // sfixed32 mip = 4;
  if (this->mip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->mip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SetSpatialRequirements.SpatialConfig)
}

::google::protobuf::uint8* SetSpatialRequirements_SpatialConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SetSpatialRequirements.SpatialConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string coordinate = 1;
  if (this->coordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coordinate().data(), static_cast<int>(this->coordinate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SetSpatialRequirements.SpatialConfig.coordinate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->coordinate(), target);
  }

  // sfixed32 start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->start(), target);
  }

  // sfixed32 end = 3;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->end(), target);
  }

  // sfixed32 mip = 4;
  if (this->mip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->mip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SetSpatialRequirements.SpatialConfig)
  return target;
}

size_t SetSpatialRequirements_SpatialConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SetSpatialRequirements.SpatialConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string coordinate = 1;
  if (this->coordinate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coordinate());
  }

  // sfixed32 start = 2;
  if (this->start() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 end = 3;
  if (this->end() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 mip = 4;
  if (this->mip() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSpatialRequirements_SpatialConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SetSpatialRequirements.SpatialConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSpatialRequirements_SpatialConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetSpatialRequirements_SpatialConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SetSpatialRequirements.SpatialConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SetSpatialRequirements.SpatialConfig)
    MergeFrom(*source);
  }
}

void SetSpatialRequirements_SpatialConfig::MergeFrom(const SetSpatialRequirements_SpatialConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SetSpatialRequirements.SpatialConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coordinate().size() > 0) {

    coordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coordinate_);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.mip() != 0) {
    set_mip(from.mip());
  }
}

void SetSpatialRequirements_SpatialConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SetSpatialRequirements.SpatialConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSpatialRequirements_SpatialConfig::CopyFrom(const SetSpatialRequirements_SpatialConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SetSpatialRequirements.SpatialConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSpatialRequirements_SpatialConfig::IsInitialized() const {
  return true;
}

void SetSpatialRequirements_SpatialConfig::Swap(SetSpatialRequirements_SpatialConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSpatialRequirements_SpatialConfig::InternalSwap(SetSpatialRequirements_SpatialConfig* other) {
  using std::swap;
  coordinate_.Swap(&other->coordinate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(mip_, other->mip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetSpatialRequirements_SpatialConfig::GetMetadata() const {
  protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetSpatialRequirements::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSpatialRequirements::kFileIdFieldNumber;
const int SetSpatialRequirements::kRegionIdFieldNumber;
const int SetSpatialRequirements::kSpatialProfilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSpatialRequirements::SetSpatialRequirements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_region_5frequirements_2eproto::scc_info_SetSpatialRequirements.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SetSpatialRequirements)
}
SetSpatialRequirements::SetSpatialRequirements(const SetSpatialRequirements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spatial_profiles_(from.spatial_profiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_id_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
  // @@protoc_insertion_point(copy_constructor:CARTA.SetSpatialRequirements)
}

void SetSpatialRequirements::SharedCtor() {
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
}

SetSpatialRequirements::~SetSpatialRequirements() {
  // @@protoc_insertion_point(destructor:CARTA.SetSpatialRequirements)
  SharedDtor();
}

void SetSpatialRequirements::SharedDtor() {
}

void SetSpatialRequirements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetSpatialRequirements::descriptor() {
  ::protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetSpatialRequirements& SetSpatialRequirements::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_region_5frequirements_2eproto::scc_info_SetSpatialRequirements.base);
  return *internal_default_instance();
}


void SetSpatialRequirements::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SetSpatialRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spatial_profiles_.Clear();
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
  _internal_metadata_.Clear();
}

bool SetSpatialRequirements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SetSpatialRequirements)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.SetSpatialRequirements.SpatialConfig spatial_profiles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_spatial_profiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SetSpatialRequirements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SetSpatialRequirements)
  return false;
#undef DO_
}

void SetSpatialRequirements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SetSpatialRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->region_id(), output);
  }

  // repeated .CARTA.SetSpatialRequirements.SpatialConfig spatial_profiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spatial_profiles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->spatial_profiles(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SetSpatialRequirements)
}

::google::protobuf::uint8* SetSpatialRequirements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SetSpatialRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->region_id(), target);
  }

  // repeated .CARTA.SetSpatialRequirements.SpatialConfig spatial_profiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spatial_profiles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->spatial_profiles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SetSpatialRequirements)
  return target;
}

size_t SetSpatialRequirements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SetSpatialRequirements)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.SetSpatialRequirements.SpatialConfig spatial_profiles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->spatial_profiles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spatial_profiles(static_cast<int>(i)));
    }
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSpatialRequirements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SetSpatialRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSpatialRequirements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetSpatialRequirements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SetSpatialRequirements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SetSpatialRequirements)
    MergeFrom(*source);
  }
}

void SetSpatialRequirements::MergeFrom(const SetSpatialRequirements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SetSpatialRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spatial_profiles_.MergeFrom(from.spatial_profiles_);
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void SetSpatialRequirements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SetSpatialRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSpatialRequirements::CopyFrom(const SetSpatialRequirements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SetSpatialRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSpatialRequirements::IsInitialized() const {
  return true;
}

void SetSpatialRequirements::Swap(SetSpatialRequirements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSpatialRequirements::InternalSwap(SetSpatialRequirements* other) {
  using std::swap;
  CastToBase(&spatial_profiles_)->InternalSwap(CastToBase(&other->spatial_profiles_));
  swap(file_id_, other->file_id_);
  swap(region_id_, other->region_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetSpatialRequirements::GetMetadata() const {
  protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetSpectralRequirements_SpectralConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSpectralRequirements_SpectralConfig::kCoordinateFieldNumber;
const int SetSpectralRequirements_SpectralConfig::kStatsTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSpectralRequirements_SpectralConfig::SetSpectralRequirements_SpectralConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_region_5frequirements_2eproto::scc_info_SetSpectralRequirements_SpectralConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SetSpectralRequirements.SpectralConfig)
}
SetSpectralRequirements_SpectralConfig::SetSpectralRequirements_SpectralConfig(const SetSpectralRequirements_SpectralConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stats_types_(from.stats_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.coordinate().size() > 0) {
    coordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coordinate_);
  }
  // @@protoc_insertion_point(copy_constructor:CARTA.SetSpectralRequirements.SpectralConfig)
}

void SetSpectralRequirements_SpectralConfig::SharedCtor() {
  coordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SetSpectralRequirements_SpectralConfig::~SetSpectralRequirements_SpectralConfig() {
  // @@protoc_insertion_point(destructor:CARTA.SetSpectralRequirements.SpectralConfig)
  SharedDtor();
}

void SetSpectralRequirements_SpectralConfig::SharedDtor() {
  coordinate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetSpectralRequirements_SpectralConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetSpectralRequirements_SpectralConfig::descriptor() {
  ::protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetSpectralRequirements_SpectralConfig& SetSpectralRequirements_SpectralConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_region_5frequirements_2eproto::scc_info_SetSpectralRequirements_SpectralConfig.base);
  return *internal_default_instance();
}


void SetSpectralRequirements_SpectralConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SetSpectralRequirements.SpectralConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_types_.Clear();
  coordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SetSpectralRequirements_SpectralConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SetSpectralRequirements.SpectralConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string coordinate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coordinate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->coordinate().data(), static_cast<int>(this->coordinate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.SetSpectralRequirements.SpectralConfig.coordinate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.StatsType stats_types = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_stats_types(static_cast< ::CARTA::StatsType >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_stats_types(static_cast< ::CARTA::StatsType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SetSpectralRequirements.SpectralConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SetSpectralRequirements.SpectralConfig)
  return false;
#undef DO_
}

void SetSpectralRequirements_SpectralConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SetSpectralRequirements.SpectralConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string coordinate = 1;
  if (this->coordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coordinate().data(), static_cast<int>(this->coordinate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SetSpectralRequirements.SpectralConfig.coordinate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->coordinate(), output);
  }

  // repeated .CARTA.StatsType stats_types = 2;
  if (this->stats_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_stats_types_cached_byte_size_));
  }
  for (int i = 0, n = this->stats_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->stats_types(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SetSpectralRequirements.SpectralConfig)
}

::google::protobuf::uint8* SetSpectralRequirements_SpectralConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SetSpectralRequirements.SpectralConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string coordinate = 1;
  if (this->coordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coordinate().data(), static_cast<int>(this->coordinate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SetSpectralRequirements.SpectralConfig.coordinate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->coordinate(), target);
  }

  // repeated .CARTA.StatsType stats_types = 2;
  if (this->stats_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _stats_types_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->stats_types_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SetSpectralRequirements.SpectralConfig)
  return target;
}

size_t SetSpectralRequirements_SpectralConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SetSpectralRequirements.SpectralConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.StatsType stats_types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->stats_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->stats_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stats_types_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string coordinate = 1;
  if (this->coordinate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coordinate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSpectralRequirements_SpectralConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SetSpectralRequirements.SpectralConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSpectralRequirements_SpectralConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetSpectralRequirements_SpectralConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SetSpectralRequirements.SpectralConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SetSpectralRequirements.SpectralConfig)
    MergeFrom(*source);
  }
}

void SetSpectralRequirements_SpectralConfig::MergeFrom(const SetSpectralRequirements_SpectralConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SetSpectralRequirements.SpectralConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_types_.MergeFrom(from.stats_types_);
  if (from.coordinate().size() > 0) {

    coordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coordinate_);
  }
}

void SetSpectralRequirements_SpectralConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SetSpectralRequirements.SpectralConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSpectralRequirements_SpectralConfig::CopyFrom(const SetSpectralRequirements_SpectralConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SetSpectralRequirements.SpectralConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSpectralRequirements_SpectralConfig::IsInitialized() const {
  return true;
}

void SetSpectralRequirements_SpectralConfig::Swap(SetSpectralRequirements_SpectralConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSpectralRequirements_SpectralConfig::InternalSwap(SetSpectralRequirements_SpectralConfig* other) {
  using std::swap;
  stats_types_.InternalSwap(&other->stats_types_);
  coordinate_.Swap(&other->coordinate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetSpectralRequirements_SpectralConfig::GetMetadata() const {
  protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetSpectralRequirements::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSpectralRequirements::kFileIdFieldNumber;
const int SetSpectralRequirements::kRegionIdFieldNumber;
const int SetSpectralRequirements::kSpectralProfilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSpectralRequirements::SetSpectralRequirements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_region_5frequirements_2eproto::scc_info_SetSpectralRequirements.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SetSpectralRequirements)
}
SetSpectralRequirements::SetSpectralRequirements(const SetSpectralRequirements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spectral_profiles_(from.spectral_profiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_id_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
  // @@protoc_insertion_point(copy_constructor:CARTA.SetSpectralRequirements)
}

void SetSpectralRequirements::SharedCtor() {
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
}

SetSpectralRequirements::~SetSpectralRequirements() {
  // @@protoc_insertion_point(destructor:CARTA.SetSpectralRequirements)
  SharedDtor();
}

void SetSpectralRequirements::SharedDtor() {
}

void SetSpectralRequirements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SetSpectralRequirements::descriptor() {
  ::protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetSpectralRequirements& SetSpectralRequirements::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_region_5frequirements_2eproto::scc_info_SetSpectralRequirements.base);
  return *internal_default_instance();
}


void SetSpectralRequirements::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SetSpectralRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spectral_profiles_.Clear();
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(region_id_));
  _internal_metadata_.Clear();
}

bool SetSpectralRequirements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SetSpectralRequirements)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.SetSpectralRequirements.SpectralConfig spectral_profiles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_spectral_profiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SetSpectralRequirements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SetSpectralRequirements)
  return false;
#undef DO_
}

void SetSpectralRequirements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SetSpectralRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->region_id(), output);
  }

  // repeated .CARTA.SetSpectralRequirements.SpectralConfig spectral_profiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spectral_profiles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->spectral_profiles(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SetSpectralRequirements)
}

::google::protobuf::uint8* SetSpectralRequirements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SetSpectralRequirements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->region_id(), target);
  }

  // repeated .CARTA.SetSpectralRequirements.SpectralConfig spectral_profiles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spectral_profiles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->spectral_profiles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SetSpectralRequirements)
  return target;
}

size_t SetSpectralRequirements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SetSpectralRequirements)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.SetSpectralRequirements.SpectralConfig spectral_profiles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->spectral_profiles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spectral_profiles(static_cast<int>(i)));
    }
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSpectralRequirements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SetSpectralRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSpectralRequirements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetSpectralRequirements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SetSpectralRequirements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SetSpectralRequirements)
    MergeFrom(*source);
  }
}

void SetSpectralRequirements::MergeFrom(const SetSpectralRequirements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SetSpectralRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spectral_profiles_.MergeFrom(from.spectral_profiles_);
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void SetSpectralRequirements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SetSpectralRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSpectralRequirements::CopyFrom(const SetSpectralRequirements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SetSpectralRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSpectralRequirements::IsInitialized() const {
  return true;
}

void SetSpectralRequirements::Swap(SetSpectralRequirements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSpectralRequirements::InternalSwap(SetSpectralRequirements* other) {
  using std::swap;
  CastToBase(&spectral_profiles_)->InternalSwap(CastToBase(&other->spectral_profiles_));
  swap(file_id_, other->file_id_);
  swap(region_id_, other->region_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SetSpectralRequirements::GetMetadata() const {
  protobuf_region_5frequirements_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_region_5frequirements_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SetStatsRequirements* Arena::CreateMaybeMessage< ::CARTA::SetStatsRequirements >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SetStatsRequirements >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SetHistogramRequirements_HistogramConfig* Arena::CreateMaybeMessage< ::CARTA::SetHistogramRequirements_HistogramConfig >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SetHistogramRequirements_HistogramConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SetHistogramRequirements* Arena::CreateMaybeMessage< ::CARTA::SetHistogramRequirements >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SetHistogramRequirements >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SetSpatialRequirements_SpatialConfig* Arena::CreateMaybeMessage< ::CARTA::SetSpatialRequirements_SpatialConfig >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SetSpatialRequirements_SpatialConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SetSpatialRequirements* Arena::CreateMaybeMessage< ::CARTA::SetSpatialRequirements >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SetSpatialRequirements >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SetSpectralRequirements_SpectralConfig* Arena::CreateMaybeMessage< ::CARTA::SetSpectralRequirements_SpectralConfig >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SetSpectralRequirements_SpectralConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SetSpectralRequirements* Arena::CreateMaybeMessage< ::CARTA::SetSpectralRequirements >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SetSpectralRequirements >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
