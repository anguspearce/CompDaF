// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: save_file.proto

#ifndef PROTOBUF_INCLUDED_save_5ffile_2eproto
#define PROTOBUF_INCLUDED_save_5ffile_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_save_5ffile_2eproto 

namespace protobuf_save_5ffile_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_save_5ffile_2eproto
namespace CARTA {
class SaveFile;
class SaveFileDefaultTypeInternal;
extern SaveFileDefaultTypeInternal _SaveFile_default_instance_;
class SaveFileAck;
class SaveFileAckDefaultTypeInternal;
extern SaveFileAckDefaultTypeInternal _SaveFileAck_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::SaveFile* Arena::CreateMaybeMessage<::CARTA::SaveFile>(Arena*);
template<> ::CARTA::SaveFileAck* Arena::CreateMaybeMessage<::CARTA::SaveFileAck>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class SaveFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SaveFile) */ {
 public:
  SaveFile();
  virtual ~SaveFile();

  SaveFile(const SaveFile& from);

  inline SaveFile& operator=(const SaveFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveFile(SaveFile&& from) noexcept
    : SaveFile() {
    *this = ::std::move(from);
  }

  inline SaveFile& operator=(SaveFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveFile* internal_default_instance() {
    return reinterpret_cast<const SaveFile*>(
               &_SaveFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SaveFile* other);
  friend void swap(SaveFile& a, SaveFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveFile* New() const final {
    return CreateMaybeMessage<SaveFile>(NULL);
  }

  SaveFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SaveFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SaveFile& from);
  void MergeFrom(const SaveFile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sfixed32 channels = 6;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 6;
  ::google::protobuf::int32 channels(int index) const;
  void set_channels(int index, ::google::protobuf::int32 value);
  void add_channels(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      channels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_channels();

  // repeated sfixed32 stokes = 7;
  int stokes_size() const;
  void clear_stokes();
  static const int kStokesFieldNumber = 7;
  ::google::protobuf::int32 stokes(int index) const;
  void set_stokes(int index, ::google::protobuf::int32 value);
  void add_stokes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stokes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stokes();

  // string output_file_directory = 2;
  void clear_output_file_directory();
  static const int kOutputFileDirectoryFieldNumber = 2;
  const ::std::string& output_file_directory() const;
  void set_output_file_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_output_file_directory(::std::string&& value);
  #endif
  void set_output_file_directory(const char* value);
  void set_output_file_directory(const char* value, size_t size);
  ::std::string* mutable_output_file_directory();
  ::std::string* release_output_file_directory();
  void set_allocated_output_file_directory(::std::string* output_file_directory);

  // string output_file_name = 3;
  void clear_output_file_name();
  static const int kOutputFileNameFieldNumber = 3;
  const ::std::string& output_file_name() const;
  void set_output_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_output_file_name(::std::string&& value);
  #endif
  void set_output_file_name(const char* value);
  void set_output_file_name(const char* value, size_t size);
  ::std::string* mutable_output_file_name();
  ::std::string* release_output_file_name();
  void set_allocated_output_file_name(::std::string* output_file_name);

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // .CARTA.FileType output_file_type = 4;
  void clear_output_file_type();
  static const int kOutputFileTypeFieldNumber = 4;
  ::CARTA::FileType output_file_type() const;
  void set_output_file_type(::CARTA::FileType value);

  // sfixed32 region_id = 5;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 5;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // bool keep_degenerate = 8;
  void clear_keep_degenerate();
  static const int kKeepDegenerateFieldNumber = 8;
  bool keep_degenerate() const;
  void set_keep_degenerate(bool value);

  // @@protoc_insertion_point(class_scope:CARTA.SaveFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > channels_;
  mutable int _channels_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stokes_;
  mutable int _stokes_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr output_file_directory_;
  ::google::protobuf::internal::ArenaStringPtr output_file_name_;
  ::google::protobuf::int32 file_id_;
  int output_file_type_;
  ::google::protobuf::int32 region_id_;
  bool keep_degenerate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_save_5ffile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SaveFileAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SaveFileAck) */ {
 public:
  SaveFileAck();
  virtual ~SaveFileAck();

  SaveFileAck(const SaveFileAck& from);

  inline SaveFileAck& operator=(const SaveFileAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveFileAck(SaveFileAck&& from) noexcept
    : SaveFileAck() {
    *this = ::std::move(from);
  }

  inline SaveFileAck& operator=(SaveFileAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveFileAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveFileAck* internal_default_instance() {
    return reinterpret_cast<const SaveFileAck*>(
               &_SaveFileAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SaveFileAck* other);
  friend void swap(SaveFileAck& a, SaveFileAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveFileAck* New() const final {
    return CreateMaybeMessage<SaveFileAck>(NULL);
  }

  SaveFileAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SaveFileAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SaveFileAck& from);
  void MergeFrom(const SaveFileAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveFileAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:CARTA.SaveFileAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 file_id_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_save_5ffile_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SaveFile

// sfixed32 file_id = 1;
inline void SaveFile::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 SaveFile::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SaveFile.file_id)
  return file_id_;
}
inline void SaveFile::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SaveFile.file_id)
}

// string output_file_directory = 2;
inline void SaveFile::clear_output_file_directory() {
  output_file_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveFile::output_file_directory() const {
  // @@protoc_insertion_point(field_get:CARTA.SaveFile.output_file_directory)
  return output_file_directory_.GetNoArena();
}
inline void SaveFile::set_output_file_directory(const ::std::string& value) {
  
  output_file_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SaveFile.output_file_directory)
}
#if LANG_CXX11
inline void SaveFile::set_output_file_directory(::std::string&& value) {
  
  output_file_directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SaveFile.output_file_directory)
}
#endif
inline void SaveFile::set_output_file_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_file_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SaveFile.output_file_directory)
}
inline void SaveFile::set_output_file_directory(const char* value, size_t size) {
  
  output_file_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SaveFile.output_file_directory)
}
inline ::std::string* SaveFile::mutable_output_file_directory() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SaveFile.output_file_directory)
  return output_file_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveFile::release_output_file_directory() {
  // @@protoc_insertion_point(field_release:CARTA.SaveFile.output_file_directory)
  
  return output_file_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveFile::set_allocated_output_file_directory(::std::string* output_file_directory) {
  if (output_file_directory != NULL) {
    
  } else {
    
  }
  output_file_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_file_directory);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SaveFile.output_file_directory)
}

// string output_file_name = 3;
inline void SaveFile::clear_output_file_name() {
  output_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveFile::output_file_name() const {
  // @@protoc_insertion_point(field_get:CARTA.SaveFile.output_file_name)
  return output_file_name_.GetNoArena();
}
inline void SaveFile::set_output_file_name(const ::std::string& value) {
  
  output_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SaveFile.output_file_name)
}
#if LANG_CXX11
inline void SaveFile::set_output_file_name(::std::string&& value) {
  
  output_file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SaveFile.output_file_name)
}
#endif
inline void SaveFile::set_output_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SaveFile.output_file_name)
}
inline void SaveFile::set_output_file_name(const char* value, size_t size) {
  
  output_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SaveFile.output_file_name)
}
inline ::std::string* SaveFile::mutable_output_file_name() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SaveFile.output_file_name)
  return output_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveFile::release_output_file_name() {
  // @@protoc_insertion_point(field_release:CARTA.SaveFile.output_file_name)
  
  return output_file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveFile::set_allocated_output_file_name(::std::string* output_file_name) {
  if (output_file_name != NULL) {
    
  } else {
    
  }
  output_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_file_name);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SaveFile.output_file_name)
}

// .CARTA.FileType output_file_type = 4;
inline void SaveFile::clear_output_file_type() {
  output_file_type_ = 0;
}
inline ::CARTA::FileType SaveFile::output_file_type() const {
  // @@protoc_insertion_point(field_get:CARTA.SaveFile.output_file_type)
  return static_cast< ::CARTA::FileType >(output_file_type_);
}
inline void SaveFile::set_output_file_type(::CARTA::FileType value) {
  
  output_file_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SaveFile.output_file_type)
}

// sfixed32 region_id = 5;
inline void SaveFile::clear_region_id() {
  region_id_ = 0;
}
inline ::google::protobuf::int32 SaveFile::region_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SaveFile.region_id)
  return region_id_;
}
inline void SaveFile::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SaveFile.region_id)
}

// repeated sfixed32 channels = 6;
inline int SaveFile::channels_size() const {
  return channels_.size();
}
inline void SaveFile::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::int32 SaveFile::channels(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.SaveFile.channels)
  return channels_.Get(index);
}
inline void SaveFile::set_channels(int index, ::google::protobuf::int32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CARTA.SaveFile.channels)
}
inline void SaveFile::add_channels(::google::protobuf::int32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:CARTA.SaveFile.channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SaveFile::channels() const {
  // @@protoc_insertion_point(field_list:CARTA.SaveFile.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SaveFile::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.SaveFile.channels)
  return &channels_;
}

// repeated sfixed32 stokes = 7;
inline int SaveFile::stokes_size() const {
  return stokes_.size();
}
inline void SaveFile::clear_stokes() {
  stokes_.Clear();
}
inline ::google::protobuf::int32 SaveFile::stokes(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.SaveFile.stokes)
  return stokes_.Get(index);
}
inline void SaveFile::set_stokes(int index, ::google::protobuf::int32 value) {
  stokes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CARTA.SaveFile.stokes)
}
inline void SaveFile::add_stokes(::google::protobuf::int32 value) {
  stokes_.Add(value);
  // @@protoc_insertion_point(field_add:CARTA.SaveFile.stokes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SaveFile::stokes() const {
  // @@protoc_insertion_point(field_list:CARTA.SaveFile.stokes)
  return stokes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SaveFile::mutable_stokes() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.SaveFile.stokes)
  return &stokes_;
}

// bool keep_degenerate = 8;
inline void SaveFile::clear_keep_degenerate() {
  keep_degenerate_ = false;
}
inline bool SaveFile::keep_degenerate() const {
  // @@protoc_insertion_point(field_get:CARTA.SaveFile.keep_degenerate)
  return keep_degenerate_;
}
inline void SaveFile::set_keep_degenerate(bool value) {
  
  keep_degenerate_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SaveFile.keep_degenerate)
}

// -------------------------------------------------------------------

// SaveFileAck

// sfixed32 file_id = 1;
inline void SaveFileAck::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 SaveFileAck::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SaveFileAck.file_id)
  return file_id_;
}
inline void SaveFileAck::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SaveFileAck.file_id)
}

// bool success = 2;
inline void SaveFileAck::clear_success() {
  success_ = false;
}
inline bool SaveFileAck::success() const {
  // @@protoc_insertion_point(field_get:CARTA.SaveFileAck.success)
  return success_;
}
inline void SaveFileAck::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SaveFileAck.success)
}

// string message = 3;
inline void SaveFileAck::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveFileAck::message() const {
  // @@protoc_insertion_point(field_get:CARTA.SaveFileAck.message)
  return message_.GetNoArena();
}
inline void SaveFileAck::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SaveFileAck.message)
}
#if LANG_CXX11
inline void SaveFileAck::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SaveFileAck.message)
}
#endif
inline void SaveFileAck::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SaveFileAck.message)
}
inline void SaveFileAck::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SaveFileAck.message)
}
inline ::std::string* SaveFileAck::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SaveFileAck.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveFileAck::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.SaveFileAck.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveFileAck::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SaveFileAck.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_save_5ffile_2eproto
