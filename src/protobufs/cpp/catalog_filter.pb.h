// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: catalog_filter.proto

#ifndef PROTOBUF_INCLUDED_catalog_5ffilter_2eproto
#define PROTOBUF_INCLUDED_catalog_5ffilter_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
#include "defs.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_catalog_5ffilter_2eproto 

namespace protobuf_catalog_5ffilter_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_catalog_5ffilter_2eproto
namespace CARTA {
class CatalogFilterRequest;
class CatalogFilterRequestDefaultTypeInternal;
extern CatalogFilterRequestDefaultTypeInternal _CatalogFilterRequest_default_instance_;
class CatalogFilterResponse;
class CatalogFilterResponseDefaultTypeInternal;
extern CatalogFilterResponseDefaultTypeInternal _CatalogFilterResponse_default_instance_;
class CatalogFilterResponse_ColumnsEntry_DoNotUse;
class CatalogFilterResponse_ColumnsEntry_DoNotUseDefaultTypeInternal;
extern CatalogFilterResponse_ColumnsEntry_DoNotUseDefaultTypeInternal _CatalogFilterResponse_ColumnsEntry_DoNotUse_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::CatalogFilterRequest* Arena::CreateMaybeMessage<::CARTA::CatalogFilterRequest>(Arena*);
template<> ::CARTA::CatalogFilterResponse* Arena::CreateMaybeMessage<::CARTA::CatalogFilterResponse>(Arena*);
template<> ::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse* Arena::CreateMaybeMessage<::CARTA::CatalogFilterResponse_ColumnsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class CatalogFilterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.CatalogFilterRequest) */ {
 public:
  CatalogFilterRequest();
  virtual ~CatalogFilterRequest();

  CatalogFilterRequest(const CatalogFilterRequest& from);

  inline CatalogFilterRequest& operator=(const CatalogFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CatalogFilterRequest(CatalogFilterRequest&& from) noexcept
    : CatalogFilterRequest() {
    *this = ::std::move(from);
  }

  inline CatalogFilterRequest& operator=(CatalogFilterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CatalogFilterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CatalogFilterRequest* internal_default_instance() {
    return reinterpret_cast<const CatalogFilterRequest*>(
               &_CatalogFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CatalogFilterRequest* other);
  friend void swap(CatalogFilterRequest& a, CatalogFilterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CatalogFilterRequest* New() const final {
    return CreateMaybeMessage<CatalogFilterRequest>(NULL);
  }

  CatalogFilterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CatalogFilterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CatalogFilterRequest& from);
  void MergeFrom(const CatalogFilterRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogFilterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 column_indices = 2;
  int column_indices_size() const;
  void clear_column_indices();
  static const int kColumnIndicesFieldNumber = 2;
  ::google::protobuf::int32 column_indices(int index) const;
  void set_column_indices(int index, ::google::protobuf::int32 value);
  void add_column_indices(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      column_indices() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_column_indices();

  // repeated .CARTA.FilterConfig filter_configs = 3;
  int filter_configs_size() const;
  void clear_filter_configs();
  static const int kFilterConfigsFieldNumber = 3;
  ::CARTA::FilterConfig* mutable_filter_configs(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::FilterConfig >*
      mutable_filter_configs();
  const ::CARTA::FilterConfig& filter_configs(int index) const;
  ::CARTA::FilterConfig* add_filter_configs();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::FilterConfig >&
      filter_configs() const;

  // string sort_column = 9;
  void clear_sort_column();
  static const int kSortColumnFieldNumber = 9;
  const ::std::string& sort_column() const;
  void set_sort_column(const ::std::string& value);
  #if LANG_CXX11
  void set_sort_column(::std::string&& value);
  #endif
  void set_sort_column(const char* value);
  void set_sort_column(const char* value, size_t size);
  ::std::string* mutable_sort_column();
  ::std::string* release_sort_column();
  void set_allocated_sort_column(::std::string* sort_column);

  // .CARTA.CatalogImageBounds image_bounds = 6;
  bool has_image_bounds() const;
  void clear_image_bounds();
  static const int kImageBoundsFieldNumber = 6;
  private:
  const ::CARTA::CatalogImageBounds& _internal_image_bounds() const;
  public:
  const ::CARTA::CatalogImageBounds& image_bounds() const;
  ::CARTA::CatalogImageBounds* release_image_bounds();
  ::CARTA::CatalogImageBounds* mutable_image_bounds();
  void set_allocated_image_bounds(::CARTA::CatalogImageBounds* image_bounds);

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 subset_data_size = 4;
  void clear_subset_data_size();
  static const int kSubsetDataSizeFieldNumber = 4;
  ::google::protobuf::int32 subset_data_size() const;
  void set_subset_data_size(::google::protobuf::int32 value);

  // sfixed32 subset_start_index = 5;
  void clear_subset_start_index();
  static const int kSubsetStartIndexFieldNumber = 5;
  ::google::protobuf::int32 subset_start_index() const;
  void set_subset_start_index(::google::protobuf::int32 value);

  // sfixed32 image_file_id = 7;
  void clear_image_file_id();
  static const int kImageFileIdFieldNumber = 7;
  ::google::protobuf::int32 image_file_id() const;
  void set_image_file_id(::google::protobuf::int32 value);

  // sfixed32 region_id = 8;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 8;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // .CARTA.SortingType sorting_type = 10;
  void clear_sorting_type();
  static const int kSortingTypeFieldNumber = 10;
  ::CARTA::SortingType sorting_type() const;
  void set_sorting_type(::CARTA::SortingType value);

  // @@protoc_insertion_point(class_scope:CARTA.CatalogFilterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > column_indices_;
  mutable int _column_indices_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::FilterConfig > filter_configs_;
  ::google::protobuf::internal::ArenaStringPtr sort_column_;
  ::CARTA::CatalogImageBounds* image_bounds_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 subset_data_size_;
  ::google::protobuf::int32 subset_start_index_;
  ::google::protobuf::int32 image_file_id_;
  ::google::protobuf::int32 region_id_;
  int sorting_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_catalog_5ffilter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CatalogFilterResponse_ColumnsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<CatalogFilterResponse_ColumnsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::CARTA::ColumnData,
    ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<CatalogFilterResponse_ColumnsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::CARTA::ColumnData,
    ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  CatalogFilterResponse_ColumnsEntry_DoNotUse();
  CatalogFilterResponse_ColumnsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const CatalogFilterResponse_ColumnsEntry_DoNotUse& other);
  static const CatalogFilterResponse_ColumnsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CatalogFilterResponse_ColumnsEntry_DoNotUse*>(&_CatalogFilterResponse_ColumnsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class CatalogFilterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.CatalogFilterResponse) */ {
 public:
  CatalogFilterResponse();
  virtual ~CatalogFilterResponse();

  CatalogFilterResponse(const CatalogFilterResponse& from);

  inline CatalogFilterResponse& operator=(const CatalogFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CatalogFilterResponse(CatalogFilterResponse&& from) noexcept
    : CatalogFilterResponse() {
    *this = ::std::move(from);
  }

  inline CatalogFilterResponse& operator=(CatalogFilterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CatalogFilterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CatalogFilterResponse* internal_default_instance() {
    return reinterpret_cast<const CatalogFilterResponse*>(
               &_CatalogFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CatalogFilterResponse* other);
  friend void swap(CatalogFilterResponse& a, CatalogFilterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CatalogFilterResponse* New() const final {
    return CreateMaybeMessage<CatalogFilterResponse>(NULL);
  }

  CatalogFilterResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CatalogFilterResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CatalogFilterResponse& from);
  void MergeFrom(const CatalogFilterResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogFilterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<fixed32, .CARTA.ColumnData> columns = 4;
  int columns_size() const;
  void clear_columns();
  static const int kColumnsFieldNumber = 4;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >&
      columns() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >*
      mutable_columns();

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 image_file_id = 2;
  void clear_image_file_id();
  static const int kImageFileIdFieldNumber = 2;
  ::google::protobuf::int32 image_file_id() const;
  void set_image_file_id(::google::protobuf::int32 value);

  // sfixed32 region_id = 3;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 3;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // sfixed32 subset_data_size = 5;
  void clear_subset_data_size();
  static const int kSubsetDataSizeFieldNumber = 5;
  ::google::protobuf::int32 subset_data_size() const;
  void set_subset_data_size(::google::protobuf::int32 value);

  // sfixed32 subset_end_index = 6;
  void clear_subset_end_index();
  static const int kSubsetEndIndexFieldNumber = 6;
  ::google::protobuf::int32 subset_end_index() const;
  void set_subset_end_index(::google::protobuf::int32 value);

  // float progress = 7;
  void clear_progress();
  static const int kProgressFieldNumber = 7;
  float progress() const;
  void set_progress(float value);

  // sfixed32 filter_data_size = 8;
  void clear_filter_data_size();
  static const int kFilterDataSizeFieldNumber = 8;
  ::google::protobuf::int32 filter_data_size() const;
  void set_filter_data_size(::google::protobuf::int32 value);

  // sfixed32 request_end_index = 9;
  void clear_request_end_index();
  static const int kRequestEndIndexFieldNumber = 9;
  ::google::protobuf::int32 request_end_index() const;
  void set_request_end_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.CatalogFilterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      CatalogFilterResponse_ColumnsEntry_DoNotUse,
      ::google::protobuf::uint32, ::CARTA::ColumnData,
      ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > columns_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 image_file_id_;
  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 subset_data_size_;
  ::google::protobuf::int32 subset_end_index_;
  float progress_;
  ::google::protobuf::int32 filter_data_size_;
  ::google::protobuf::int32 request_end_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_catalog_5ffilter_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CatalogFilterRequest

// sfixed32 file_id = 1;
inline void CatalogFilterRequest::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterRequest::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterRequest.file_id)
  return file_id_;
}
inline void CatalogFilterRequest::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterRequest.file_id)
}

// repeated int32 column_indices = 2;
inline int CatalogFilterRequest::column_indices_size() const {
  return column_indices_.size();
}
inline void CatalogFilterRequest::clear_column_indices() {
  column_indices_.Clear();
}
inline ::google::protobuf::int32 CatalogFilterRequest::column_indices(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterRequest.column_indices)
  return column_indices_.Get(index);
}
inline void CatalogFilterRequest::set_column_indices(int index, ::google::protobuf::int32 value) {
  column_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterRequest.column_indices)
}
inline void CatalogFilterRequest::add_column_indices(::google::protobuf::int32 value) {
  column_indices_.Add(value);
  // @@protoc_insertion_point(field_add:CARTA.CatalogFilterRequest.column_indices)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CatalogFilterRequest::column_indices() const {
  // @@protoc_insertion_point(field_list:CARTA.CatalogFilterRequest.column_indices)
  return column_indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CatalogFilterRequest::mutable_column_indices() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.CatalogFilterRequest.column_indices)
  return &column_indices_;
}

// repeated .CARTA.FilterConfig filter_configs = 3;
inline int CatalogFilterRequest::filter_configs_size() const {
  return filter_configs_.size();
}
inline ::CARTA::FilterConfig* CatalogFilterRequest::mutable_filter_configs(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogFilterRequest.filter_configs)
  return filter_configs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::FilterConfig >*
CatalogFilterRequest::mutable_filter_configs() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.CatalogFilterRequest.filter_configs)
  return &filter_configs_;
}
inline const ::CARTA::FilterConfig& CatalogFilterRequest::filter_configs(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterRequest.filter_configs)
  return filter_configs_.Get(index);
}
inline ::CARTA::FilterConfig* CatalogFilterRequest::add_filter_configs() {
  // @@protoc_insertion_point(field_add:CARTA.CatalogFilterRequest.filter_configs)
  return filter_configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::FilterConfig >&
CatalogFilterRequest::filter_configs() const {
  // @@protoc_insertion_point(field_list:CARTA.CatalogFilterRequest.filter_configs)
  return filter_configs_;
}

// sfixed32 subset_data_size = 4;
inline void CatalogFilterRequest::clear_subset_data_size() {
  subset_data_size_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterRequest::subset_data_size() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterRequest.subset_data_size)
  return subset_data_size_;
}
inline void CatalogFilterRequest::set_subset_data_size(::google::protobuf::int32 value) {
  
  subset_data_size_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterRequest.subset_data_size)
}

// sfixed32 subset_start_index = 5;
inline void CatalogFilterRequest::clear_subset_start_index() {
  subset_start_index_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterRequest::subset_start_index() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterRequest.subset_start_index)
  return subset_start_index_;
}
inline void CatalogFilterRequest::set_subset_start_index(::google::protobuf::int32 value) {
  
  subset_start_index_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterRequest.subset_start_index)
}

// .CARTA.CatalogImageBounds image_bounds = 6;
inline bool CatalogFilterRequest::has_image_bounds() const {
  return this != internal_default_instance() && image_bounds_ != NULL;
}
inline const ::CARTA::CatalogImageBounds& CatalogFilterRequest::_internal_image_bounds() const {
  return *image_bounds_;
}
inline const ::CARTA::CatalogImageBounds& CatalogFilterRequest::image_bounds() const {
  const ::CARTA::CatalogImageBounds* p = image_bounds_;
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterRequest.image_bounds)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::CatalogImageBounds*>(
      &::CARTA::_CatalogImageBounds_default_instance_);
}
inline ::CARTA::CatalogImageBounds* CatalogFilterRequest::release_image_bounds() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogFilterRequest.image_bounds)
  
  ::CARTA::CatalogImageBounds* temp = image_bounds_;
  image_bounds_ = NULL;
  return temp;
}
inline ::CARTA::CatalogImageBounds* CatalogFilterRequest::mutable_image_bounds() {
  
  if (image_bounds_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::CatalogImageBounds>(GetArenaNoVirtual());
    image_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogFilterRequest.image_bounds)
  return image_bounds_;
}
inline void CatalogFilterRequest::set_allocated_image_bounds(::CARTA::CatalogImageBounds* image_bounds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(image_bounds_);
  }
  if (image_bounds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image_bounds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_bounds, submessage_arena);
    }
    
  } else {
    
  }
  image_bounds_ = image_bounds;
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogFilterRequest.image_bounds)
}

// sfixed32 image_file_id = 7;
inline void CatalogFilterRequest::clear_image_file_id() {
  image_file_id_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterRequest::image_file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterRequest.image_file_id)
  return image_file_id_;
}
inline void CatalogFilterRequest::set_image_file_id(::google::protobuf::int32 value) {
  
  image_file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterRequest.image_file_id)
}

// sfixed32 region_id = 8;
inline void CatalogFilterRequest::clear_region_id() {
  region_id_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterRequest::region_id() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterRequest.region_id)
  return region_id_;
}
inline void CatalogFilterRequest::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterRequest.region_id)
}

// string sort_column = 9;
inline void CatalogFilterRequest::clear_sort_column() {
  sort_column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogFilterRequest::sort_column() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterRequest.sort_column)
  return sort_column_.GetNoArena();
}
inline void CatalogFilterRequest::set_sort_column(const ::std::string& value) {
  
  sort_column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterRequest.sort_column)
}
#if LANG_CXX11
inline void CatalogFilterRequest::set_sort_column(::std::string&& value) {
  
  sort_column_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogFilterRequest.sort_column)
}
#endif
inline void CatalogFilterRequest::set_sort_column(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sort_column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogFilterRequest.sort_column)
}
inline void CatalogFilterRequest::set_sort_column(const char* value, size_t size) {
  
  sort_column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogFilterRequest.sort_column)
}
inline ::std::string* CatalogFilterRequest::mutable_sort_column() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogFilterRequest.sort_column)
  return sort_column_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogFilterRequest::release_sort_column() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogFilterRequest.sort_column)
  
  return sort_column_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogFilterRequest::set_allocated_sort_column(::std::string* sort_column) {
  if (sort_column != NULL) {
    
  } else {
    
  }
  sort_column_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sort_column);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogFilterRequest.sort_column)
}

// .CARTA.SortingType sorting_type = 10;
inline void CatalogFilterRequest::clear_sorting_type() {
  sorting_type_ = 0;
}
inline ::CARTA::SortingType CatalogFilterRequest::sorting_type() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterRequest.sorting_type)
  return static_cast< ::CARTA::SortingType >(sorting_type_);
}
inline void CatalogFilterRequest::set_sorting_type(::CARTA::SortingType value) {
  
  sorting_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterRequest.sorting_type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CatalogFilterResponse

// sfixed32 file_id = 1;
inline void CatalogFilterResponse::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterResponse::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterResponse.file_id)
  return file_id_;
}
inline void CatalogFilterResponse::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterResponse.file_id)
}

// sfixed32 image_file_id = 2;
inline void CatalogFilterResponse::clear_image_file_id() {
  image_file_id_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterResponse::image_file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterResponse.image_file_id)
  return image_file_id_;
}
inline void CatalogFilterResponse::set_image_file_id(::google::protobuf::int32 value) {
  
  image_file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterResponse.image_file_id)
}

// sfixed32 region_id = 3;
inline void CatalogFilterResponse::clear_region_id() {
  region_id_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterResponse::region_id() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterResponse.region_id)
  return region_id_;
}
inline void CatalogFilterResponse::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterResponse.region_id)
}

// map<fixed32, .CARTA.ColumnData> columns = 4;
inline int CatalogFilterResponse::columns_size() const {
  return columns_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >&
CatalogFilterResponse::columns() const {
  // @@protoc_insertion_point(field_map:CARTA.CatalogFilterResponse.columns)
  return columns_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >*
CatalogFilterResponse::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_map:CARTA.CatalogFilterResponse.columns)
  return columns_.MutableMap();
}

// sfixed32 subset_data_size = 5;
inline void CatalogFilterResponse::clear_subset_data_size() {
  subset_data_size_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterResponse::subset_data_size() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterResponse.subset_data_size)
  return subset_data_size_;
}
inline void CatalogFilterResponse::set_subset_data_size(::google::protobuf::int32 value) {
  
  subset_data_size_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterResponse.subset_data_size)
}

// sfixed32 subset_end_index = 6;
inline void CatalogFilterResponse::clear_subset_end_index() {
  subset_end_index_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterResponse::subset_end_index() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterResponse.subset_end_index)
  return subset_end_index_;
}
inline void CatalogFilterResponse::set_subset_end_index(::google::protobuf::int32 value) {
  
  subset_end_index_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterResponse.subset_end_index)
}

// float progress = 7;
inline void CatalogFilterResponse::clear_progress() {
  progress_ = 0;
}
inline float CatalogFilterResponse::progress() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterResponse.progress)
  return progress_;
}
inline void CatalogFilterResponse::set_progress(float value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterResponse.progress)
}

// sfixed32 filter_data_size = 8;
inline void CatalogFilterResponse::clear_filter_data_size() {
  filter_data_size_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterResponse::filter_data_size() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterResponse.filter_data_size)
  return filter_data_size_;
}
inline void CatalogFilterResponse::set_filter_data_size(::google::protobuf::int32 value) {
  
  filter_data_size_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterResponse.filter_data_size)
}

// sfixed32 request_end_index = 9;
inline void CatalogFilterResponse::clear_request_end_index() {
  request_end_index_ = 0;
}
inline ::google::protobuf::int32 CatalogFilterResponse::request_end_index() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFilterResponse.request_end_index)
  return request_end_index_;
}
inline void CatalogFilterResponse::set_request_end_index(::google::protobuf::int32 value) {
  
  request_end_index_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFilterResponse.request_end_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_catalog_5ffilter_2eproto
