// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: region_requirements.proto

#ifndef PROTOBUF_INCLUDED_region_5frequirements_2eproto
#define PROTOBUF_INCLUDED_region_5frequirements_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_region_5frequirements_2eproto 

namespace protobuf_region_5frequirements_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_region_5frequirements_2eproto
namespace CARTA {
class SetHistogramRequirements;
class SetHistogramRequirementsDefaultTypeInternal;
extern SetHistogramRequirementsDefaultTypeInternal _SetHistogramRequirements_default_instance_;
class SetHistogramRequirements_HistogramConfig;
class SetHistogramRequirements_HistogramConfigDefaultTypeInternal;
extern SetHistogramRequirements_HistogramConfigDefaultTypeInternal _SetHistogramRequirements_HistogramConfig_default_instance_;
class SetSpatialRequirements;
class SetSpatialRequirementsDefaultTypeInternal;
extern SetSpatialRequirementsDefaultTypeInternal _SetSpatialRequirements_default_instance_;
class SetSpatialRequirements_SpatialConfig;
class SetSpatialRequirements_SpatialConfigDefaultTypeInternal;
extern SetSpatialRequirements_SpatialConfigDefaultTypeInternal _SetSpatialRequirements_SpatialConfig_default_instance_;
class SetSpectralRequirements;
class SetSpectralRequirementsDefaultTypeInternal;
extern SetSpectralRequirementsDefaultTypeInternal _SetSpectralRequirements_default_instance_;
class SetSpectralRequirements_SpectralConfig;
class SetSpectralRequirements_SpectralConfigDefaultTypeInternal;
extern SetSpectralRequirements_SpectralConfigDefaultTypeInternal _SetSpectralRequirements_SpectralConfig_default_instance_;
class SetStatsRequirements;
class SetStatsRequirementsDefaultTypeInternal;
extern SetStatsRequirementsDefaultTypeInternal _SetStatsRequirements_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::SetHistogramRequirements* Arena::CreateMaybeMessage<::CARTA::SetHistogramRequirements>(Arena*);
template<> ::CARTA::SetHistogramRequirements_HistogramConfig* Arena::CreateMaybeMessage<::CARTA::SetHistogramRequirements_HistogramConfig>(Arena*);
template<> ::CARTA::SetSpatialRequirements* Arena::CreateMaybeMessage<::CARTA::SetSpatialRequirements>(Arena*);
template<> ::CARTA::SetSpatialRequirements_SpatialConfig* Arena::CreateMaybeMessage<::CARTA::SetSpatialRequirements_SpatialConfig>(Arena*);
template<> ::CARTA::SetSpectralRequirements* Arena::CreateMaybeMessage<::CARTA::SetSpectralRequirements>(Arena*);
template<> ::CARTA::SetSpectralRequirements_SpectralConfig* Arena::CreateMaybeMessage<::CARTA::SetSpectralRequirements_SpectralConfig>(Arena*);
template<> ::CARTA::SetStatsRequirements* Arena::CreateMaybeMessage<::CARTA::SetStatsRequirements>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class SetStatsRequirements : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SetStatsRequirements) */ {
 public:
  SetStatsRequirements();
  virtual ~SetStatsRequirements();

  SetStatsRequirements(const SetStatsRequirements& from);

  inline SetStatsRequirements& operator=(const SetStatsRequirements& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetStatsRequirements(SetStatsRequirements&& from) noexcept
    : SetStatsRequirements() {
    *this = ::std::move(from);
  }

  inline SetStatsRequirements& operator=(SetStatsRequirements&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetStatsRequirements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetStatsRequirements* internal_default_instance() {
    return reinterpret_cast<const SetStatsRequirements*>(
               &_SetStatsRequirements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SetStatsRequirements* other);
  friend void swap(SetStatsRequirements& a, SetStatsRequirements& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetStatsRequirements* New() const final {
    return CreateMaybeMessage<SetStatsRequirements>(NULL);
  }

  SetStatsRequirements* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetStatsRequirements>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetStatsRequirements& from);
  void MergeFrom(const SetStatsRequirements& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetStatsRequirements* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARTA.StatsType stats = 3;
  int stats_size() const;
  void clear_stats();
  static const int kStatsFieldNumber = 3;
  ::CARTA::StatsType stats(int index) const;
  void set_stats(int index, ::CARTA::StatsType value);
  void add_stats(::CARTA::StatsType value);
  const ::google::protobuf::RepeatedField<int>& stats() const;
  ::google::protobuf::RepeatedField<int>* mutable_stats();

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 region_id = 2;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.SetStatsRequirements)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> stats_;
  mutable int _stats_cached_byte_size_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 region_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_region_5frequirements_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetHistogramRequirements_HistogramConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SetHistogramRequirements.HistogramConfig) */ {
 public:
  SetHistogramRequirements_HistogramConfig();
  virtual ~SetHistogramRequirements_HistogramConfig();

  SetHistogramRequirements_HistogramConfig(const SetHistogramRequirements_HistogramConfig& from);

  inline SetHistogramRequirements_HistogramConfig& operator=(const SetHistogramRequirements_HistogramConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetHistogramRequirements_HistogramConfig(SetHistogramRequirements_HistogramConfig&& from) noexcept
    : SetHistogramRequirements_HistogramConfig() {
    *this = ::std::move(from);
  }

  inline SetHistogramRequirements_HistogramConfig& operator=(SetHistogramRequirements_HistogramConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetHistogramRequirements_HistogramConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetHistogramRequirements_HistogramConfig* internal_default_instance() {
    return reinterpret_cast<const SetHistogramRequirements_HistogramConfig*>(
               &_SetHistogramRequirements_HistogramConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SetHistogramRequirements_HistogramConfig* other);
  friend void swap(SetHistogramRequirements_HistogramConfig& a, SetHistogramRequirements_HistogramConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetHistogramRequirements_HistogramConfig* New() const final {
    return CreateMaybeMessage<SetHistogramRequirements_HistogramConfig>(NULL);
  }

  SetHistogramRequirements_HistogramConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetHistogramRequirements_HistogramConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetHistogramRequirements_HistogramConfig& from);
  void MergeFrom(const SetHistogramRequirements_HistogramConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetHistogramRequirements_HistogramConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed32 channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // sfixed32 num_bins = 2;
  void clear_num_bins();
  static const int kNumBinsFieldNumber = 2;
  ::google::protobuf::int32 num_bins() const;
  void set_num_bins(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.SetHistogramRequirements.HistogramConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 num_bins_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_region_5frequirements_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetHistogramRequirements : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SetHistogramRequirements) */ {
 public:
  SetHistogramRequirements();
  virtual ~SetHistogramRequirements();

  SetHistogramRequirements(const SetHistogramRequirements& from);

  inline SetHistogramRequirements& operator=(const SetHistogramRequirements& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetHistogramRequirements(SetHistogramRequirements&& from) noexcept
    : SetHistogramRequirements() {
    *this = ::std::move(from);
  }

  inline SetHistogramRequirements& operator=(SetHistogramRequirements&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetHistogramRequirements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetHistogramRequirements* internal_default_instance() {
    return reinterpret_cast<const SetHistogramRequirements*>(
               &_SetHistogramRequirements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SetHistogramRequirements* other);
  friend void swap(SetHistogramRequirements& a, SetHistogramRequirements& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetHistogramRequirements* New() const final {
    return CreateMaybeMessage<SetHistogramRequirements>(NULL);
  }

  SetHistogramRequirements* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetHistogramRequirements>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetHistogramRequirements& from);
  void MergeFrom(const SetHistogramRequirements& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetHistogramRequirements* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetHistogramRequirements_HistogramConfig HistogramConfig;

  // accessors -------------------------------------------------------

  // repeated .CARTA.SetHistogramRequirements.HistogramConfig histograms = 3;
  int histograms_size() const;
  void clear_histograms();
  static const int kHistogramsFieldNumber = 3;
  ::CARTA::SetHistogramRequirements_HistogramConfig* mutable_histograms(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::SetHistogramRequirements_HistogramConfig >*
      mutable_histograms();
  const ::CARTA::SetHistogramRequirements_HistogramConfig& histograms(int index) const;
  ::CARTA::SetHistogramRequirements_HistogramConfig* add_histograms();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::SetHistogramRequirements_HistogramConfig >&
      histograms() const;

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 region_id = 2;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.SetHistogramRequirements)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::SetHistogramRequirements_HistogramConfig > histograms_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 region_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_region_5frequirements_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetSpatialRequirements_SpatialConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SetSpatialRequirements.SpatialConfig) */ {
 public:
  SetSpatialRequirements_SpatialConfig();
  virtual ~SetSpatialRequirements_SpatialConfig();

  SetSpatialRequirements_SpatialConfig(const SetSpatialRequirements_SpatialConfig& from);

  inline SetSpatialRequirements_SpatialConfig& operator=(const SetSpatialRequirements_SpatialConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetSpatialRequirements_SpatialConfig(SetSpatialRequirements_SpatialConfig&& from) noexcept
    : SetSpatialRequirements_SpatialConfig() {
    *this = ::std::move(from);
  }

  inline SetSpatialRequirements_SpatialConfig& operator=(SetSpatialRequirements_SpatialConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSpatialRequirements_SpatialConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSpatialRequirements_SpatialConfig* internal_default_instance() {
    return reinterpret_cast<const SetSpatialRequirements_SpatialConfig*>(
               &_SetSpatialRequirements_SpatialConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SetSpatialRequirements_SpatialConfig* other);
  friend void swap(SetSpatialRequirements_SpatialConfig& a, SetSpatialRequirements_SpatialConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSpatialRequirements_SpatialConfig* New() const final {
    return CreateMaybeMessage<SetSpatialRequirements_SpatialConfig>(NULL);
  }

  SetSpatialRequirements_SpatialConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetSpatialRequirements_SpatialConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetSpatialRequirements_SpatialConfig& from);
  void MergeFrom(const SetSpatialRequirements_SpatialConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSpatialRequirements_SpatialConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string coordinate = 1;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 1;
  const ::std::string& coordinate() const;
  void set_coordinate(const ::std::string& value);
  #if LANG_CXX11
  void set_coordinate(::std::string&& value);
  #endif
  void set_coordinate(const char* value);
  void set_coordinate(const char* value, size_t size);
  ::std::string* mutable_coordinate();
  ::std::string* release_coordinate();
  void set_allocated_coordinate(::std::string* coordinate);

  // sfixed32 start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::google::protobuf::int32 start() const;
  void set_start(::google::protobuf::int32 value);

  // sfixed32 end = 3;
  void clear_end();
  static const int kEndFieldNumber = 3;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // sfixed32 mip = 4;
  void clear_mip();
  static const int kMipFieldNumber = 4;
  ::google::protobuf::int32 mip() const;
  void set_mip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.SetSpatialRequirements.SpatialConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr coordinate_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;
  ::google::protobuf::int32 mip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_region_5frequirements_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetSpatialRequirements : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SetSpatialRequirements) */ {
 public:
  SetSpatialRequirements();
  virtual ~SetSpatialRequirements();

  SetSpatialRequirements(const SetSpatialRequirements& from);

  inline SetSpatialRequirements& operator=(const SetSpatialRequirements& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetSpatialRequirements(SetSpatialRequirements&& from) noexcept
    : SetSpatialRequirements() {
    *this = ::std::move(from);
  }

  inline SetSpatialRequirements& operator=(SetSpatialRequirements&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSpatialRequirements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSpatialRequirements* internal_default_instance() {
    return reinterpret_cast<const SetSpatialRequirements*>(
               &_SetSpatialRequirements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SetSpatialRequirements* other);
  friend void swap(SetSpatialRequirements& a, SetSpatialRequirements& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSpatialRequirements* New() const final {
    return CreateMaybeMessage<SetSpatialRequirements>(NULL);
  }

  SetSpatialRequirements* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetSpatialRequirements>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetSpatialRequirements& from);
  void MergeFrom(const SetSpatialRequirements& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSpatialRequirements* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetSpatialRequirements_SpatialConfig SpatialConfig;

  // accessors -------------------------------------------------------

  // repeated .CARTA.SetSpatialRequirements.SpatialConfig spatial_profiles = 3;
  int spatial_profiles_size() const;
  void clear_spatial_profiles();
  static const int kSpatialProfilesFieldNumber = 3;
  ::CARTA::SetSpatialRequirements_SpatialConfig* mutable_spatial_profiles(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::SetSpatialRequirements_SpatialConfig >*
      mutable_spatial_profiles();
  const ::CARTA::SetSpatialRequirements_SpatialConfig& spatial_profiles(int index) const;
  ::CARTA::SetSpatialRequirements_SpatialConfig* add_spatial_profiles();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::SetSpatialRequirements_SpatialConfig >&
      spatial_profiles() const;

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 region_id = 2;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.SetSpatialRequirements)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::SetSpatialRequirements_SpatialConfig > spatial_profiles_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 region_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_region_5frequirements_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetSpectralRequirements_SpectralConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SetSpectralRequirements.SpectralConfig) */ {
 public:
  SetSpectralRequirements_SpectralConfig();
  virtual ~SetSpectralRequirements_SpectralConfig();

  SetSpectralRequirements_SpectralConfig(const SetSpectralRequirements_SpectralConfig& from);

  inline SetSpectralRequirements_SpectralConfig& operator=(const SetSpectralRequirements_SpectralConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetSpectralRequirements_SpectralConfig(SetSpectralRequirements_SpectralConfig&& from) noexcept
    : SetSpectralRequirements_SpectralConfig() {
    *this = ::std::move(from);
  }

  inline SetSpectralRequirements_SpectralConfig& operator=(SetSpectralRequirements_SpectralConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSpectralRequirements_SpectralConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSpectralRequirements_SpectralConfig* internal_default_instance() {
    return reinterpret_cast<const SetSpectralRequirements_SpectralConfig*>(
               &_SetSpectralRequirements_SpectralConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SetSpectralRequirements_SpectralConfig* other);
  friend void swap(SetSpectralRequirements_SpectralConfig& a, SetSpectralRequirements_SpectralConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSpectralRequirements_SpectralConfig* New() const final {
    return CreateMaybeMessage<SetSpectralRequirements_SpectralConfig>(NULL);
  }

  SetSpectralRequirements_SpectralConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetSpectralRequirements_SpectralConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetSpectralRequirements_SpectralConfig& from);
  void MergeFrom(const SetSpectralRequirements_SpectralConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSpectralRequirements_SpectralConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARTA.StatsType stats_types = 2;
  int stats_types_size() const;
  void clear_stats_types();
  static const int kStatsTypesFieldNumber = 2;
  ::CARTA::StatsType stats_types(int index) const;
  void set_stats_types(int index, ::CARTA::StatsType value);
  void add_stats_types(::CARTA::StatsType value);
  const ::google::protobuf::RepeatedField<int>& stats_types() const;
  ::google::protobuf::RepeatedField<int>* mutable_stats_types();

  // string coordinate = 1;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 1;
  const ::std::string& coordinate() const;
  void set_coordinate(const ::std::string& value);
  #if LANG_CXX11
  void set_coordinate(::std::string&& value);
  #endif
  void set_coordinate(const char* value);
  void set_coordinate(const char* value, size_t size);
  ::std::string* mutable_coordinate();
  ::std::string* release_coordinate();
  void set_allocated_coordinate(::std::string* coordinate);

  // @@protoc_insertion_point(class_scope:CARTA.SetSpectralRequirements.SpectralConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> stats_types_;
  mutable int _stats_types_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr coordinate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_region_5frequirements_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetSpectralRequirements : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SetSpectralRequirements) */ {
 public:
  SetSpectralRequirements();
  virtual ~SetSpectralRequirements();

  SetSpectralRequirements(const SetSpectralRequirements& from);

  inline SetSpectralRequirements& operator=(const SetSpectralRequirements& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetSpectralRequirements(SetSpectralRequirements&& from) noexcept
    : SetSpectralRequirements() {
    *this = ::std::move(from);
  }

  inline SetSpectralRequirements& operator=(SetSpectralRequirements&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSpectralRequirements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSpectralRequirements* internal_default_instance() {
    return reinterpret_cast<const SetSpectralRequirements*>(
               &_SetSpectralRequirements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SetSpectralRequirements* other);
  friend void swap(SetSpectralRequirements& a, SetSpectralRequirements& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSpectralRequirements* New() const final {
    return CreateMaybeMessage<SetSpectralRequirements>(NULL);
  }

  SetSpectralRequirements* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetSpectralRequirements>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetSpectralRequirements& from);
  void MergeFrom(const SetSpectralRequirements& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSpectralRequirements* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetSpectralRequirements_SpectralConfig SpectralConfig;

  // accessors -------------------------------------------------------

  // repeated .CARTA.SetSpectralRequirements.SpectralConfig spectral_profiles = 3;
  int spectral_profiles_size() const;
  void clear_spectral_profiles();
  static const int kSpectralProfilesFieldNumber = 3;
  ::CARTA::SetSpectralRequirements_SpectralConfig* mutable_spectral_profiles(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::SetSpectralRequirements_SpectralConfig >*
      mutable_spectral_profiles();
  const ::CARTA::SetSpectralRequirements_SpectralConfig& spectral_profiles(int index) const;
  ::CARTA::SetSpectralRequirements_SpectralConfig* add_spectral_profiles();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::SetSpectralRequirements_SpectralConfig >&
      spectral_profiles() const;

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 region_id = 2;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.SetSpectralRequirements)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::SetSpectralRequirements_SpectralConfig > spectral_profiles_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 region_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_region_5frequirements_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetStatsRequirements

// sfixed32 file_id = 1;
inline void SetStatsRequirements::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 SetStatsRequirements::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetStatsRequirements.file_id)
  return file_id_;
}
inline void SetStatsRequirements::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetStatsRequirements.file_id)
}

// sfixed32 region_id = 2;
inline void SetStatsRequirements::clear_region_id() {
  region_id_ = 0;
}
inline ::google::protobuf::int32 SetStatsRequirements::region_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetStatsRequirements.region_id)
  return region_id_;
}
inline void SetStatsRequirements::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetStatsRequirements.region_id)
}

// repeated .CARTA.StatsType stats = 3;
inline int SetStatsRequirements::stats_size() const {
  return stats_.size();
}
inline void SetStatsRequirements::clear_stats() {
  stats_.Clear();
}
inline ::CARTA::StatsType SetStatsRequirements::stats(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.SetStatsRequirements.stats)
  return static_cast< ::CARTA::StatsType >(stats_.Get(index));
}
inline void SetStatsRequirements::set_stats(int index, ::CARTA::StatsType value) {
  stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:CARTA.SetStatsRequirements.stats)
}
inline void SetStatsRequirements::add_stats(::CARTA::StatsType value) {
  stats_.Add(value);
  // @@protoc_insertion_point(field_add:CARTA.SetStatsRequirements.stats)
}
inline const ::google::protobuf::RepeatedField<int>&
SetStatsRequirements::stats() const {
  // @@protoc_insertion_point(field_list:CARTA.SetStatsRequirements.stats)
  return stats_;
}
inline ::google::protobuf::RepeatedField<int>*
SetStatsRequirements::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.SetStatsRequirements.stats)
  return &stats_;
}

// -------------------------------------------------------------------

// SetHistogramRequirements_HistogramConfig

// sfixed32 channel = 1;
inline void SetHistogramRequirements_HistogramConfig::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 SetHistogramRequirements_HistogramConfig::channel() const {
  // @@protoc_insertion_point(field_get:CARTA.SetHistogramRequirements.HistogramConfig.channel)
  return channel_;
}
inline void SetHistogramRequirements_HistogramConfig::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetHistogramRequirements.HistogramConfig.channel)
}

// sfixed32 num_bins = 2;
inline void SetHistogramRequirements_HistogramConfig::clear_num_bins() {
  num_bins_ = 0;
}
inline ::google::protobuf::int32 SetHistogramRequirements_HistogramConfig::num_bins() const {
  // @@protoc_insertion_point(field_get:CARTA.SetHistogramRequirements.HistogramConfig.num_bins)
  return num_bins_;
}
inline void SetHistogramRequirements_HistogramConfig::set_num_bins(::google::protobuf::int32 value) {
  
  num_bins_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetHistogramRequirements.HistogramConfig.num_bins)
}

// -------------------------------------------------------------------

// SetHistogramRequirements

// sfixed32 file_id = 1;
inline void SetHistogramRequirements::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 SetHistogramRequirements::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetHistogramRequirements.file_id)
  return file_id_;
}
inline void SetHistogramRequirements::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetHistogramRequirements.file_id)
}

// sfixed32 region_id = 2;
inline void SetHistogramRequirements::clear_region_id() {
  region_id_ = 0;
}
inline ::google::protobuf::int32 SetHistogramRequirements::region_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetHistogramRequirements.region_id)
  return region_id_;
}
inline void SetHistogramRequirements::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetHistogramRequirements.region_id)
}

// repeated .CARTA.SetHistogramRequirements.HistogramConfig histograms = 3;
inline int SetHistogramRequirements::histograms_size() const {
  return histograms_.size();
}
inline void SetHistogramRequirements::clear_histograms() {
  histograms_.Clear();
}
inline ::CARTA::SetHistogramRequirements_HistogramConfig* SetHistogramRequirements::mutable_histograms(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.SetHistogramRequirements.histograms)
  return histograms_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::SetHistogramRequirements_HistogramConfig >*
SetHistogramRequirements::mutable_histograms() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.SetHistogramRequirements.histograms)
  return &histograms_;
}
inline const ::CARTA::SetHistogramRequirements_HistogramConfig& SetHistogramRequirements::histograms(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.SetHistogramRequirements.histograms)
  return histograms_.Get(index);
}
inline ::CARTA::SetHistogramRequirements_HistogramConfig* SetHistogramRequirements::add_histograms() {
  // @@protoc_insertion_point(field_add:CARTA.SetHistogramRequirements.histograms)
  return histograms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::SetHistogramRequirements_HistogramConfig >&
SetHistogramRequirements::histograms() const {
  // @@protoc_insertion_point(field_list:CARTA.SetHistogramRequirements.histograms)
  return histograms_;
}

// -------------------------------------------------------------------

// SetSpatialRequirements_SpatialConfig

// string coordinate = 1;
inline void SetSpatialRequirements_SpatialConfig::clear_coordinate() {
  coordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetSpatialRequirements_SpatialConfig::coordinate() const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpatialRequirements.SpatialConfig.coordinate)
  return coordinate_.GetNoArena();
}
inline void SetSpatialRequirements_SpatialConfig::set_coordinate(const ::std::string& value) {
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SetSpatialRequirements.SpatialConfig.coordinate)
}
#if LANG_CXX11
inline void SetSpatialRequirements_SpatialConfig::set_coordinate(::std::string&& value) {
  
  coordinate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SetSpatialRequirements.SpatialConfig.coordinate)
}
#endif
inline void SetSpatialRequirements_SpatialConfig::set_coordinate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SetSpatialRequirements.SpatialConfig.coordinate)
}
inline void SetSpatialRequirements_SpatialConfig::set_coordinate(const char* value, size_t size) {
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SetSpatialRequirements.SpatialConfig.coordinate)
}
inline ::std::string* SetSpatialRequirements_SpatialConfig::mutable_coordinate() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SetSpatialRequirements.SpatialConfig.coordinate)
  return coordinate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetSpatialRequirements_SpatialConfig::release_coordinate() {
  // @@protoc_insertion_point(field_release:CARTA.SetSpatialRequirements.SpatialConfig.coordinate)
  
  return coordinate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetSpatialRequirements_SpatialConfig::set_allocated_coordinate(::std::string* coordinate) {
  if (coordinate != NULL) {
    
  } else {
    
  }
  coordinate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coordinate);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SetSpatialRequirements.SpatialConfig.coordinate)
}

// sfixed32 start = 2;
inline void SetSpatialRequirements_SpatialConfig::clear_start() {
  start_ = 0;
}
inline ::google::protobuf::int32 SetSpatialRequirements_SpatialConfig::start() const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpatialRequirements.SpatialConfig.start)
  return start_;
}
inline void SetSpatialRequirements_SpatialConfig::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetSpatialRequirements.SpatialConfig.start)
}

// sfixed32 end = 3;
inline void SetSpatialRequirements_SpatialConfig::clear_end() {
  end_ = 0;
}
inline ::google::protobuf::int32 SetSpatialRequirements_SpatialConfig::end() const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpatialRequirements.SpatialConfig.end)
  return end_;
}
inline void SetSpatialRequirements_SpatialConfig::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetSpatialRequirements.SpatialConfig.end)
}

// sfixed32 mip = 4;
inline void SetSpatialRequirements_SpatialConfig::clear_mip() {
  mip_ = 0;
}
inline ::google::protobuf::int32 SetSpatialRequirements_SpatialConfig::mip() const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpatialRequirements.SpatialConfig.mip)
  return mip_;
}
inline void SetSpatialRequirements_SpatialConfig::set_mip(::google::protobuf::int32 value) {
  
  mip_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetSpatialRequirements.SpatialConfig.mip)
}

// -------------------------------------------------------------------

// SetSpatialRequirements

// sfixed32 file_id = 1;
inline void SetSpatialRequirements::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 SetSpatialRequirements::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpatialRequirements.file_id)
  return file_id_;
}
inline void SetSpatialRequirements::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetSpatialRequirements.file_id)
}

// sfixed32 region_id = 2;
inline void SetSpatialRequirements::clear_region_id() {
  region_id_ = 0;
}
inline ::google::protobuf::int32 SetSpatialRequirements::region_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpatialRequirements.region_id)
  return region_id_;
}
inline void SetSpatialRequirements::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetSpatialRequirements.region_id)
}

// repeated .CARTA.SetSpatialRequirements.SpatialConfig spatial_profiles = 3;
inline int SetSpatialRequirements::spatial_profiles_size() const {
  return spatial_profiles_.size();
}
inline void SetSpatialRequirements::clear_spatial_profiles() {
  spatial_profiles_.Clear();
}
inline ::CARTA::SetSpatialRequirements_SpatialConfig* SetSpatialRequirements::mutable_spatial_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.SetSpatialRequirements.spatial_profiles)
  return spatial_profiles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::SetSpatialRequirements_SpatialConfig >*
SetSpatialRequirements::mutable_spatial_profiles() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.SetSpatialRequirements.spatial_profiles)
  return &spatial_profiles_;
}
inline const ::CARTA::SetSpatialRequirements_SpatialConfig& SetSpatialRequirements::spatial_profiles(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpatialRequirements.spatial_profiles)
  return spatial_profiles_.Get(index);
}
inline ::CARTA::SetSpatialRequirements_SpatialConfig* SetSpatialRequirements::add_spatial_profiles() {
  // @@protoc_insertion_point(field_add:CARTA.SetSpatialRequirements.spatial_profiles)
  return spatial_profiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::SetSpatialRequirements_SpatialConfig >&
SetSpatialRequirements::spatial_profiles() const {
  // @@protoc_insertion_point(field_list:CARTA.SetSpatialRequirements.spatial_profiles)
  return spatial_profiles_;
}

// -------------------------------------------------------------------

// SetSpectralRequirements_SpectralConfig

// string coordinate = 1;
inline void SetSpectralRequirements_SpectralConfig::clear_coordinate() {
  coordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetSpectralRequirements_SpectralConfig::coordinate() const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpectralRequirements.SpectralConfig.coordinate)
  return coordinate_.GetNoArena();
}
inline void SetSpectralRequirements_SpectralConfig::set_coordinate(const ::std::string& value) {
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SetSpectralRequirements.SpectralConfig.coordinate)
}
#if LANG_CXX11
inline void SetSpectralRequirements_SpectralConfig::set_coordinate(::std::string&& value) {
  
  coordinate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SetSpectralRequirements.SpectralConfig.coordinate)
}
#endif
inline void SetSpectralRequirements_SpectralConfig::set_coordinate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SetSpectralRequirements.SpectralConfig.coordinate)
}
inline void SetSpectralRequirements_SpectralConfig::set_coordinate(const char* value, size_t size) {
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SetSpectralRequirements.SpectralConfig.coordinate)
}
inline ::std::string* SetSpectralRequirements_SpectralConfig::mutable_coordinate() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SetSpectralRequirements.SpectralConfig.coordinate)
  return coordinate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetSpectralRequirements_SpectralConfig::release_coordinate() {
  // @@protoc_insertion_point(field_release:CARTA.SetSpectralRequirements.SpectralConfig.coordinate)
  
  return coordinate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetSpectralRequirements_SpectralConfig::set_allocated_coordinate(::std::string* coordinate) {
  if (coordinate != NULL) {
    
  } else {
    
  }
  coordinate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coordinate);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SetSpectralRequirements.SpectralConfig.coordinate)
}

// repeated .CARTA.StatsType stats_types = 2;
inline int SetSpectralRequirements_SpectralConfig::stats_types_size() const {
  return stats_types_.size();
}
inline void SetSpectralRequirements_SpectralConfig::clear_stats_types() {
  stats_types_.Clear();
}
inline ::CARTA::StatsType SetSpectralRequirements_SpectralConfig::stats_types(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpectralRequirements.SpectralConfig.stats_types)
  return static_cast< ::CARTA::StatsType >(stats_types_.Get(index));
}
inline void SetSpectralRequirements_SpectralConfig::set_stats_types(int index, ::CARTA::StatsType value) {
  stats_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:CARTA.SetSpectralRequirements.SpectralConfig.stats_types)
}
inline void SetSpectralRequirements_SpectralConfig::add_stats_types(::CARTA::StatsType value) {
  stats_types_.Add(value);
  // @@protoc_insertion_point(field_add:CARTA.SetSpectralRequirements.SpectralConfig.stats_types)
}
inline const ::google::protobuf::RepeatedField<int>&
SetSpectralRequirements_SpectralConfig::stats_types() const {
  // @@protoc_insertion_point(field_list:CARTA.SetSpectralRequirements.SpectralConfig.stats_types)
  return stats_types_;
}
inline ::google::protobuf::RepeatedField<int>*
SetSpectralRequirements_SpectralConfig::mutable_stats_types() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.SetSpectralRequirements.SpectralConfig.stats_types)
  return &stats_types_;
}

// -------------------------------------------------------------------

// SetSpectralRequirements

// sfixed32 file_id = 1;
inline void SetSpectralRequirements::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 SetSpectralRequirements::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpectralRequirements.file_id)
  return file_id_;
}
inline void SetSpectralRequirements::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetSpectralRequirements.file_id)
}

// sfixed32 region_id = 2;
inline void SetSpectralRequirements::clear_region_id() {
  region_id_ = 0;
}
inline ::google::protobuf::int32 SetSpectralRequirements::region_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpectralRequirements.region_id)
  return region_id_;
}
inline void SetSpectralRequirements::set_region_id(::google::protobuf::int32 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetSpectralRequirements.region_id)
}

// repeated .CARTA.SetSpectralRequirements.SpectralConfig spectral_profiles = 3;
inline int SetSpectralRequirements::spectral_profiles_size() const {
  return spectral_profiles_.size();
}
inline void SetSpectralRequirements::clear_spectral_profiles() {
  spectral_profiles_.Clear();
}
inline ::CARTA::SetSpectralRequirements_SpectralConfig* SetSpectralRequirements::mutable_spectral_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.SetSpectralRequirements.spectral_profiles)
  return spectral_profiles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::SetSpectralRequirements_SpectralConfig >*
SetSpectralRequirements::mutable_spectral_profiles() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.SetSpectralRequirements.spectral_profiles)
  return &spectral_profiles_;
}
inline const ::CARTA::SetSpectralRequirements_SpectralConfig& SetSpectralRequirements::spectral_profiles(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.SetSpectralRequirements.spectral_profiles)
  return spectral_profiles_.Get(index);
}
inline ::CARTA::SetSpectralRequirements_SpectralConfig* SetSpectralRequirements::add_spectral_profiles() {
  // @@protoc_insertion_point(field_add:CARTA.SetSpectralRequirements.spectral_profiles)
  return spectral_profiles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::SetSpectralRequirements_SpectralConfig >&
SetSpectralRequirements::spectral_profiles() const {
  // @@protoc_insertion_point(field_list:CARTA.SetSpectralRequirements.spectral_profiles)
  return spectral_profiles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_region_5frequirements_2eproto
