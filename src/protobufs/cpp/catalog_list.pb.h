// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: catalog_list.proto

#ifndef PROTOBUF_INCLUDED_catalog_5flist_2eproto
#define PROTOBUF_INCLUDED_catalog_5flist_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "defs.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_catalog_5flist_2eproto 

namespace protobuf_catalog_5flist_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_catalog_5flist_2eproto
namespace CARTA {
class CatalogListRequest;
class CatalogListRequestDefaultTypeInternal;
extern CatalogListRequestDefaultTypeInternal _CatalogListRequest_default_instance_;
class CatalogListResponse;
class CatalogListResponseDefaultTypeInternal;
extern CatalogListResponseDefaultTypeInternal _CatalogListResponse_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::CatalogListRequest* Arena::CreateMaybeMessage<::CARTA::CatalogListRequest>(Arena*);
template<> ::CARTA::CatalogListResponse* Arena::CreateMaybeMessage<::CARTA::CatalogListResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class CatalogListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.CatalogListRequest) */ {
 public:
  CatalogListRequest();
  virtual ~CatalogListRequest();

  CatalogListRequest(const CatalogListRequest& from);

  inline CatalogListRequest& operator=(const CatalogListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CatalogListRequest(CatalogListRequest&& from) noexcept
    : CatalogListRequest() {
    *this = ::std::move(from);
  }

  inline CatalogListRequest& operator=(CatalogListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CatalogListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CatalogListRequest* internal_default_instance() {
    return reinterpret_cast<const CatalogListRequest*>(
               &_CatalogListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CatalogListRequest* other);
  friend void swap(CatalogListRequest& a, CatalogListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CatalogListRequest* New() const final {
    return CreateMaybeMessage<CatalogListRequest>(NULL);
  }

  CatalogListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CatalogListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CatalogListRequest& from);
  void MergeFrom(const CatalogListRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string directory = 1;
  void clear_directory();
  static const int kDirectoryFieldNumber = 1;
  const ::std::string& directory() const;
  void set_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_directory(::std::string&& value);
  #endif
  void set_directory(const char* value);
  void set_directory(const char* value, size_t size);
  ::std::string* mutable_directory();
  ::std::string* release_directory();
  void set_allocated_directory(::std::string* directory);

  // @@protoc_insertion_point(class_scope:CARTA.CatalogListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr directory_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_catalog_5flist_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CatalogListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.CatalogListResponse) */ {
 public:
  CatalogListResponse();
  virtual ~CatalogListResponse();

  CatalogListResponse(const CatalogListResponse& from);

  inline CatalogListResponse& operator=(const CatalogListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CatalogListResponse(CatalogListResponse&& from) noexcept
    : CatalogListResponse() {
    *this = ::std::move(from);
  }

  inline CatalogListResponse& operator=(CatalogListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CatalogListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CatalogListResponse* internal_default_instance() {
    return reinterpret_cast<const CatalogListResponse*>(
               &_CatalogListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CatalogListResponse* other);
  friend void swap(CatalogListResponse& a, CatalogListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CatalogListResponse* New() const final {
    return CreateMaybeMessage<CatalogListResponse>(NULL);
  }

  CatalogListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CatalogListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CatalogListResponse& from);
  void MergeFrom(const CatalogListResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARTA.CatalogFileInfo files = 5;
  int files_size() const;
  void clear_files();
  static const int kFilesFieldNumber = 5;
  ::CARTA::CatalogFileInfo* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogFileInfo >*
      mutable_files();
  const ::CARTA::CatalogFileInfo& files(int index) const;
  ::CARTA::CatalogFileInfo* add_files();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogFileInfo >&
      files() const;

  // repeated .CARTA.DirectoryInfo subdirectories = 6;
  int subdirectories_size() const;
  void clear_subdirectories();
  static const int kSubdirectoriesFieldNumber = 6;
  ::CARTA::DirectoryInfo* mutable_subdirectories(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::DirectoryInfo >*
      mutable_subdirectories();
  const ::CARTA::DirectoryInfo& subdirectories(int index) const;
  ::CARTA::DirectoryInfo* add_subdirectories();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::DirectoryInfo >&
      subdirectories() const;

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string directory = 3;
  void clear_directory();
  static const int kDirectoryFieldNumber = 3;
  const ::std::string& directory() const;
  void set_directory(const ::std::string& value);
  #if LANG_CXX11
  void set_directory(::std::string&& value);
  #endif
  void set_directory(const char* value);
  void set_directory(const char* value, size_t size);
  ::std::string* mutable_directory();
  ::std::string* release_directory();
  void set_allocated_directory(::std::string* directory);

  // string parent = 4;
  void clear_parent();
  static const int kParentFieldNumber = 4;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // bool cancel = 7;
  void clear_cancel();
  static const int kCancelFieldNumber = 7;
  bool cancel() const;
  void set_cancel(bool value);

  // @@protoc_insertion_point(class_scope:CARTA.CatalogListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogFileInfo > files_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::DirectoryInfo > subdirectories_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr directory_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  bool success_;
  bool cancel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_catalog_5flist_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CatalogListRequest

// string directory = 1;
inline void CatalogListRequest::clear_directory() {
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogListRequest::directory() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogListRequest.directory)
  return directory_.GetNoArena();
}
inline void CatalogListRequest::set_directory(const ::std::string& value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogListRequest.directory)
}
#if LANG_CXX11
inline void CatalogListRequest::set_directory(::std::string&& value) {
  
  directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogListRequest.directory)
}
#endif
inline void CatalogListRequest::set_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogListRequest.directory)
}
inline void CatalogListRequest::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogListRequest.directory)
}
inline ::std::string* CatalogListRequest::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogListRequest.directory)
  return directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogListRequest::release_directory() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogListRequest.directory)
  
  return directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogListRequest::set_allocated_directory(::std::string* directory) {
  if (directory != NULL) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogListRequest.directory)
}

// -------------------------------------------------------------------

// CatalogListResponse

// bool success = 1;
inline void CatalogListResponse::clear_success() {
  success_ = false;
}
inline bool CatalogListResponse::success() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogListResponse.success)
  return success_;
}
inline void CatalogListResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogListResponse.success)
}

// string message = 2;
inline void CatalogListResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogListResponse::message() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogListResponse.message)
  return message_.GetNoArena();
}
inline void CatalogListResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogListResponse.message)
}
#if LANG_CXX11
inline void CatalogListResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogListResponse.message)
}
#endif
inline void CatalogListResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogListResponse.message)
}
inline void CatalogListResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogListResponse.message)
}
inline ::std::string* CatalogListResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogListResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogListResponse::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogListResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogListResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogListResponse.message)
}

// string directory = 3;
inline void CatalogListResponse::clear_directory() {
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogListResponse::directory() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogListResponse.directory)
  return directory_.GetNoArena();
}
inline void CatalogListResponse::set_directory(const ::std::string& value) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogListResponse.directory)
}
#if LANG_CXX11
inline void CatalogListResponse::set_directory(::std::string&& value) {
  
  directory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogListResponse.directory)
}
#endif
inline void CatalogListResponse::set_directory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogListResponse.directory)
}
inline void CatalogListResponse::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogListResponse.directory)
}
inline ::std::string* CatalogListResponse::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogListResponse.directory)
  return directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogListResponse::release_directory() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogListResponse.directory)
  
  return directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogListResponse::set_allocated_directory(::std::string* directory) {
  if (directory != NULL) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogListResponse.directory)
}

// string parent = 4;
inline void CatalogListResponse::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogListResponse::parent() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogListResponse.parent)
  return parent_.GetNoArena();
}
inline void CatalogListResponse::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogListResponse.parent)
}
#if LANG_CXX11
inline void CatalogListResponse::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogListResponse.parent)
}
#endif
inline void CatalogListResponse::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogListResponse.parent)
}
inline void CatalogListResponse::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogListResponse.parent)
}
inline ::std::string* CatalogListResponse::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogListResponse.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogListResponse::release_parent() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogListResponse.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogListResponse::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogListResponse.parent)
}

// repeated .CARTA.CatalogFileInfo files = 5;
inline int CatalogListResponse::files_size() const {
  return files_.size();
}
inline ::CARTA::CatalogFileInfo* CatalogListResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogListResponse.files)
  return files_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogFileInfo >*
CatalogListResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.CatalogListResponse.files)
  return &files_;
}
inline const ::CARTA::CatalogFileInfo& CatalogListResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogListResponse.files)
  return files_.Get(index);
}
inline ::CARTA::CatalogFileInfo* CatalogListResponse::add_files() {
  // @@protoc_insertion_point(field_add:CARTA.CatalogListResponse.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogFileInfo >&
CatalogListResponse::files() const {
  // @@protoc_insertion_point(field_list:CARTA.CatalogListResponse.files)
  return files_;
}

// repeated .CARTA.DirectoryInfo subdirectories = 6;
inline int CatalogListResponse::subdirectories_size() const {
  return subdirectories_.size();
}
inline ::CARTA::DirectoryInfo* CatalogListResponse::mutable_subdirectories(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogListResponse.subdirectories)
  return subdirectories_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::DirectoryInfo >*
CatalogListResponse::mutable_subdirectories() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.CatalogListResponse.subdirectories)
  return &subdirectories_;
}
inline const ::CARTA::DirectoryInfo& CatalogListResponse::subdirectories(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogListResponse.subdirectories)
  return subdirectories_.Get(index);
}
inline ::CARTA::DirectoryInfo* CatalogListResponse::add_subdirectories() {
  // @@protoc_insertion_point(field_add:CARTA.CatalogListResponse.subdirectories)
  return subdirectories_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::DirectoryInfo >&
CatalogListResponse::subdirectories() const {
  // @@protoc_insertion_point(field_list:CARTA.CatalogListResponse.subdirectories)
  return subdirectories_;
}

// bool cancel = 7;
inline void CatalogListResponse::clear_cancel() {
  cancel_ = false;
}
inline bool CatalogListResponse::cancel() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogListResponse.cancel)
  return cancel_;
}
inline void CatalogListResponse::set_cancel(bool value) {
  
  cancel_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogListResponse.cancel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_catalog_5flist_2eproto
