// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tiles.proto

#ifndef PROTOBUF_INCLUDED_tiles_2eproto
#define PROTOBUF_INCLUDED_tiles_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tiles_2eproto 

namespace protobuf_tiles_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tiles_2eproto
namespace CARTA {
class AddRequiredTiles;
class AddRequiredTilesDefaultTypeInternal;
extern AddRequiredTilesDefaultTypeInternal _AddRequiredTiles_default_instance_;
class RemoveRequiredTiles;
class RemoveRequiredTilesDefaultTypeInternal;
extern RemoveRequiredTilesDefaultTypeInternal _RemoveRequiredTiles_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::AddRequiredTiles* Arena::CreateMaybeMessage<::CARTA::AddRequiredTiles>(Arena*);
template<> ::CARTA::RemoveRequiredTiles* Arena::CreateMaybeMessage<::CARTA::RemoveRequiredTiles>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class AddRequiredTiles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.AddRequiredTiles) */ {
 public:
  AddRequiredTiles();
  virtual ~AddRequiredTiles();

  AddRequiredTiles(const AddRequiredTiles& from);

  inline AddRequiredTiles& operator=(const AddRequiredTiles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddRequiredTiles(AddRequiredTiles&& from) noexcept
    : AddRequiredTiles() {
    *this = ::std::move(from);
  }

  inline AddRequiredTiles& operator=(AddRequiredTiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRequiredTiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRequiredTiles* internal_default_instance() {
    return reinterpret_cast<const AddRequiredTiles*>(
               &_AddRequiredTiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AddRequiredTiles* other);
  friend void swap(AddRequiredTiles& a, AddRequiredTiles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddRequiredTiles* New() const final {
    return CreateMaybeMessage<AddRequiredTiles>(NULL);
  }

  AddRequiredTiles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddRequiredTiles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddRequiredTiles& from);
  void MergeFrom(const AddRequiredTiles& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRequiredTiles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sfixed32 tiles = 2;
  int tiles_size() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 2;
  ::google::protobuf::int32 tiles(int index) const;
  void set_tiles(int index, ::google::protobuf::int32 value);
  void add_tiles(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tiles() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tiles();

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // .CARTA.CompressionType compression_type = 3;
  void clear_compression_type();
  static const int kCompressionTypeFieldNumber = 3;
  ::CARTA::CompressionType compression_type() const;
  void set_compression_type(::CARTA::CompressionType value);

  // float compression_quality = 4;
  void clear_compression_quality();
  static const int kCompressionQualityFieldNumber = 4;
  float compression_quality() const;
  void set_compression_quality(float value);

  // @@protoc_insertion_point(class_scope:CARTA.AddRequiredTiles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tiles_;
  mutable int _tiles_cached_byte_size_;
  ::google::protobuf::int32 file_id_;
  int compression_type_;
  float compression_quality_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tiles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveRequiredTiles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.RemoveRequiredTiles) */ {
 public:
  RemoveRequiredTiles();
  virtual ~RemoveRequiredTiles();

  RemoveRequiredTiles(const RemoveRequiredTiles& from);

  inline RemoveRequiredTiles& operator=(const RemoveRequiredTiles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveRequiredTiles(RemoveRequiredTiles&& from) noexcept
    : RemoveRequiredTiles() {
    *this = ::std::move(from);
  }

  inline RemoveRequiredTiles& operator=(RemoveRequiredTiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveRequiredTiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveRequiredTiles* internal_default_instance() {
    return reinterpret_cast<const RemoveRequiredTiles*>(
               &_RemoveRequiredTiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RemoveRequiredTiles* other);
  friend void swap(RemoveRequiredTiles& a, RemoveRequiredTiles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveRequiredTiles* New() const final {
    return CreateMaybeMessage<RemoveRequiredTiles>(NULL);
  }

  RemoveRequiredTiles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveRequiredTiles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveRequiredTiles& from);
  void MergeFrom(const RemoveRequiredTiles& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveRequiredTiles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sfixed32 tiles = 2;
  int tiles_size() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 2;
  ::google::protobuf::int32 tiles(int index) const;
  void set_tiles(int index, ::google::protobuf::int32 value);
  void add_tiles(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tiles() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tiles();

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.RemoveRequiredTiles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tiles_;
  mutable int _tiles_cached_byte_size_;
  ::google::protobuf::int32 file_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tiles_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddRequiredTiles

// sfixed32 file_id = 1;
inline void AddRequiredTiles::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 AddRequiredTiles::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.AddRequiredTiles.file_id)
  return file_id_;
}
inline void AddRequiredTiles::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.AddRequiredTiles.file_id)
}

// repeated sfixed32 tiles = 2;
inline int AddRequiredTiles::tiles_size() const {
  return tiles_.size();
}
inline void AddRequiredTiles::clear_tiles() {
  tiles_.Clear();
}
inline ::google::protobuf::int32 AddRequiredTiles::tiles(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.AddRequiredTiles.tiles)
  return tiles_.Get(index);
}
inline void AddRequiredTiles::set_tiles(int index, ::google::protobuf::int32 value) {
  tiles_.Set(index, value);
  // @@protoc_insertion_point(field_set:CARTA.AddRequiredTiles.tiles)
}
inline void AddRequiredTiles::add_tiles(::google::protobuf::int32 value) {
  tiles_.Add(value);
  // @@protoc_insertion_point(field_add:CARTA.AddRequiredTiles.tiles)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AddRequiredTiles::tiles() const {
  // @@protoc_insertion_point(field_list:CARTA.AddRequiredTiles.tiles)
  return tiles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AddRequiredTiles::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.AddRequiredTiles.tiles)
  return &tiles_;
}

// .CARTA.CompressionType compression_type = 3;
inline void AddRequiredTiles::clear_compression_type() {
  compression_type_ = 0;
}
inline ::CARTA::CompressionType AddRequiredTiles::compression_type() const {
  // @@protoc_insertion_point(field_get:CARTA.AddRequiredTiles.compression_type)
  return static_cast< ::CARTA::CompressionType >(compression_type_);
}
inline void AddRequiredTiles::set_compression_type(::CARTA::CompressionType value) {
  
  compression_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.AddRequiredTiles.compression_type)
}

// float compression_quality = 4;
inline void AddRequiredTiles::clear_compression_quality() {
  compression_quality_ = 0;
}
inline float AddRequiredTiles::compression_quality() const {
  // @@protoc_insertion_point(field_get:CARTA.AddRequiredTiles.compression_quality)
  return compression_quality_;
}
inline void AddRequiredTiles::set_compression_quality(float value) {
  
  compression_quality_ = value;
  // @@protoc_insertion_point(field_set:CARTA.AddRequiredTiles.compression_quality)
}

// -------------------------------------------------------------------

// RemoveRequiredTiles

// sfixed32 file_id = 1;
inline void RemoveRequiredTiles::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 RemoveRequiredTiles::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.RemoveRequiredTiles.file_id)
  return file_id_;
}
inline void RemoveRequiredTiles::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RemoveRequiredTiles.file_id)
}

// repeated sfixed32 tiles = 2;
inline int RemoveRequiredTiles::tiles_size() const {
  return tiles_.size();
}
inline void RemoveRequiredTiles::clear_tiles() {
  tiles_.Clear();
}
inline ::google::protobuf::int32 RemoveRequiredTiles::tiles(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.RemoveRequiredTiles.tiles)
  return tiles_.Get(index);
}
inline void RemoveRequiredTiles::set_tiles(int index, ::google::protobuf::int32 value) {
  tiles_.Set(index, value);
  // @@protoc_insertion_point(field_set:CARTA.RemoveRequiredTiles.tiles)
}
inline void RemoveRequiredTiles::add_tiles(::google::protobuf::int32 value) {
  tiles_.Add(value);
  // @@protoc_insertion_point(field_add:CARTA.RemoveRequiredTiles.tiles)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RemoveRequiredTiles::tiles() const {
  // @@protoc_insertion_point(field_list:CARTA.RemoveRequiredTiles.tiles)
  return tiles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RemoveRequiredTiles::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.RemoveRequiredTiles.tiles)
  return &tiles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tiles_2eproto
