// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: animation.proto

#ifndef PROTOBUF_INCLUDED_animation_2eproto
#define PROTOBUF_INCLUDED_animation_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "defs.pb.h"
#include "tiles.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_animation_2eproto 

namespace protobuf_animation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_animation_2eproto
namespace CARTA {
class AnimationFlowControl;
class AnimationFlowControlDefaultTypeInternal;
extern AnimationFlowControlDefaultTypeInternal _AnimationFlowControl_default_instance_;
class StartAnimation;
class StartAnimationDefaultTypeInternal;
extern StartAnimationDefaultTypeInternal _StartAnimation_default_instance_;
class StartAnimationAck;
class StartAnimationAckDefaultTypeInternal;
extern StartAnimationAckDefaultTypeInternal _StartAnimationAck_default_instance_;
class StartAnimation_MatchedFramesEntry_DoNotUse;
class StartAnimation_MatchedFramesEntry_DoNotUseDefaultTypeInternal;
extern StartAnimation_MatchedFramesEntry_DoNotUseDefaultTypeInternal _StartAnimation_MatchedFramesEntry_DoNotUse_default_instance_;
class StopAnimation;
class StopAnimationDefaultTypeInternal;
extern StopAnimationDefaultTypeInternal _StopAnimation_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::AnimationFlowControl* Arena::CreateMaybeMessage<::CARTA::AnimationFlowControl>(Arena*);
template<> ::CARTA::StartAnimation* Arena::CreateMaybeMessage<::CARTA::StartAnimation>(Arena*);
template<> ::CARTA::StartAnimationAck* Arena::CreateMaybeMessage<::CARTA::StartAnimationAck>(Arena*);
template<> ::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse* Arena::CreateMaybeMessage<::CARTA::StartAnimation_MatchedFramesEntry_DoNotUse>(Arena*);
template<> ::CARTA::StopAnimation* Arena::CreateMaybeMessage<::CARTA::StopAnimation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class StartAnimation_MatchedFramesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<StartAnimation_MatchedFramesEntry_DoNotUse, 
    ::google::protobuf::int32, ::CARTA::MatchedFrameList,
    ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<StartAnimation_MatchedFramesEntry_DoNotUse, 
    ::google::protobuf::int32, ::CARTA::MatchedFrameList,
    ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  StartAnimation_MatchedFramesEntry_DoNotUse();
  StartAnimation_MatchedFramesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const StartAnimation_MatchedFramesEntry_DoNotUse& other);
  static const StartAnimation_MatchedFramesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StartAnimation_MatchedFramesEntry_DoNotUse*>(&_StartAnimation_MatchedFramesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class StartAnimation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.StartAnimation) */ {
 public:
  StartAnimation();
  virtual ~StartAnimation();

  StartAnimation(const StartAnimation& from);

  inline StartAnimation& operator=(const StartAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartAnimation(StartAnimation&& from) noexcept
    : StartAnimation() {
    *this = ::std::move(from);
  }

  inline StartAnimation& operator=(StartAnimation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartAnimation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartAnimation* internal_default_instance() {
    return reinterpret_cast<const StartAnimation*>(
               &_StartAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StartAnimation* other);
  friend void swap(StartAnimation& a, StartAnimation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartAnimation* New() const final {
    return CreateMaybeMessage<StartAnimation>(NULL);
  }

  StartAnimation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartAnimation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartAnimation& from);
  void MergeFrom(const StartAnimation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartAnimation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<sfixed32, .CARTA.MatchedFrameList> matched_frames = 10;
  int matched_frames_size() const;
  void clear_matched_frames();
  static const int kMatchedFramesFieldNumber = 10;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >&
      matched_frames() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >*
      mutable_matched_frames();

  // .CARTA.AnimationFrame first_frame = 2;
  bool has_first_frame() const;
  void clear_first_frame();
  static const int kFirstFrameFieldNumber = 2;
  private:
  const ::CARTA::AnimationFrame& _internal_first_frame() const;
  public:
  const ::CARTA::AnimationFrame& first_frame() const;
  ::CARTA::AnimationFrame* release_first_frame();
  ::CARTA::AnimationFrame* mutable_first_frame();
  void set_allocated_first_frame(::CARTA::AnimationFrame* first_frame);

  // .CARTA.AnimationFrame start_frame = 3;
  bool has_start_frame() const;
  void clear_start_frame();
  static const int kStartFrameFieldNumber = 3;
  private:
  const ::CARTA::AnimationFrame& _internal_start_frame() const;
  public:
  const ::CARTA::AnimationFrame& start_frame() const;
  ::CARTA::AnimationFrame* release_start_frame();
  ::CARTA::AnimationFrame* mutable_start_frame();
  void set_allocated_start_frame(::CARTA::AnimationFrame* start_frame);

  // .CARTA.AnimationFrame last_frame = 4;
  bool has_last_frame() const;
  void clear_last_frame();
  static const int kLastFrameFieldNumber = 4;
  private:
  const ::CARTA::AnimationFrame& _internal_last_frame() const;
  public:
  const ::CARTA::AnimationFrame& last_frame() const;
  ::CARTA::AnimationFrame* release_last_frame();
  ::CARTA::AnimationFrame* mutable_last_frame();
  void set_allocated_last_frame(::CARTA::AnimationFrame* last_frame);

  // .CARTA.AnimationFrame delta_frame = 5;
  bool has_delta_frame() const;
  void clear_delta_frame();
  static const int kDeltaFrameFieldNumber = 5;
  private:
  const ::CARTA::AnimationFrame& _internal_delta_frame() const;
  public:
  const ::CARTA::AnimationFrame& delta_frame() const;
  ::CARTA::AnimationFrame* release_delta_frame();
  ::CARTA::AnimationFrame* mutable_delta_frame();
  void set_allocated_delta_frame(::CARTA::AnimationFrame* delta_frame);

  // .CARTA.AddRequiredTiles required_tiles = 9;
  bool has_required_tiles() const;
  void clear_required_tiles();
  static const int kRequiredTilesFieldNumber = 9;
  private:
  const ::CARTA::AddRequiredTiles& _internal_required_tiles() const;
  public:
  const ::CARTA::AddRequiredTiles& required_tiles() const;
  ::CARTA::AddRequiredTiles* release_required_tiles();
  ::CARTA::AddRequiredTiles* mutable_required_tiles();
  void set_allocated_required_tiles(::CARTA::AddRequiredTiles* required_tiles);

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 frame_rate = 6;
  void clear_frame_rate();
  static const int kFrameRateFieldNumber = 6;
  ::google::protobuf::int32 frame_rate() const;
  void set_frame_rate(::google::protobuf::int32 value);

  // bool looping = 7;
  void clear_looping();
  static const int kLoopingFieldNumber = 7;
  bool looping() const;
  void set_looping(bool value);

  // bool reverse = 8;
  void clear_reverse();
  static const int kReverseFieldNumber = 8;
  bool reverse() const;
  void set_reverse(bool value);

  // @@protoc_insertion_point(class_scope:CARTA.StartAnimation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      StartAnimation_MatchedFramesEntry_DoNotUse,
      ::google::protobuf::int32, ::CARTA::MatchedFrameList,
      ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > matched_frames_;
  ::CARTA::AnimationFrame* first_frame_;
  ::CARTA::AnimationFrame* start_frame_;
  ::CARTA::AnimationFrame* last_frame_;
  ::CARTA::AnimationFrame* delta_frame_;
  ::CARTA::AddRequiredTiles* required_tiles_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 frame_rate_;
  bool looping_;
  bool reverse_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_animation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartAnimationAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.StartAnimationAck) */ {
 public:
  StartAnimationAck();
  virtual ~StartAnimationAck();

  StartAnimationAck(const StartAnimationAck& from);

  inline StartAnimationAck& operator=(const StartAnimationAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartAnimationAck(StartAnimationAck&& from) noexcept
    : StartAnimationAck() {
    *this = ::std::move(from);
  }

  inline StartAnimationAck& operator=(StartAnimationAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartAnimationAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartAnimationAck* internal_default_instance() {
    return reinterpret_cast<const StartAnimationAck*>(
               &_StartAnimationAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(StartAnimationAck* other);
  friend void swap(StartAnimationAck& a, StartAnimationAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartAnimationAck* New() const final {
    return CreateMaybeMessage<StartAnimationAck>(NULL);
  }

  StartAnimationAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartAnimationAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartAnimationAck& from);
  void MergeFrom(const StartAnimationAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartAnimationAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // sfixed32 animation_id = 3;
  void clear_animation_id();
  static const int kAnimationIdFieldNumber = 3;
  ::google::protobuf::int32 animation_id() const;
  void set_animation_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.StartAnimationAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool success_;
  ::google::protobuf::int32 animation_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_animation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnimationFlowControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.AnimationFlowControl) */ {
 public:
  AnimationFlowControl();
  virtual ~AnimationFlowControl();

  AnimationFlowControl(const AnimationFlowControl& from);

  inline AnimationFlowControl& operator=(const AnimationFlowControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnimationFlowControl(AnimationFlowControl&& from) noexcept
    : AnimationFlowControl() {
    *this = ::std::move(from);
  }

  inline AnimationFlowControl& operator=(AnimationFlowControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnimationFlowControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimationFlowControl* internal_default_instance() {
    return reinterpret_cast<const AnimationFlowControl*>(
               &_AnimationFlowControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AnimationFlowControl* other);
  friend void swap(AnimationFlowControl& a, AnimationFlowControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnimationFlowControl* New() const final {
    return CreateMaybeMessage<AnimationFlowControl>(NULL);
  }

  AnimationFlowControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnimationFlowControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnimationFlowControl& from);
  void MergeFrom(const AnimationFlowControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationFlowControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CARTA.AnimationFrame received_frame = 2;
  bool has_received_frame() const;
  void clear_received_frame();
  static const int kReceivedFrameFieldNumber = 2;
  private:
  const ::CARTA::AnimationFrame& _internal_received_frame() const;
  public:
  const ::CARTA::AnimationFrame& received_frame() const;
  ::CARTA::AnimationFrame* release_received_frame();
  ::CARTA::AnimationFrame* mutable_received_frame();
  void set_allocated_received_frame(::CARTA::AnimationFrame* received_frame);

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 animation_id = 3;
  void clear_animation_id();
  static const int kAnimationIdFieldNumber = 3;
  ::google::protobuf::int32 animation_id() const;
  void set_animation_id(::google::protobuf::int32 value);

  // sfixed64 timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CARTA.AnimationFlowControl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CARTA::AnimationFrame* received_frame_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 animation_id_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_animation_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopAnimation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.StopAnimation) */ {
 public:
  StopAnimation();
  virtual ~StopAnimation();

  StopAnimation(const StopAnimation& from);

  inline StopAnimation& operator=(const StopAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopAnimation(StopAnimation&& from) noexcept
    : StopAnimation() {
    *this = ::std::move(from);
  }

  inline StopAnimation& operator=(StopAnimation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopAnimation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopAnimation* internal_default_instance() {
    return reinterpret_cast<const StopAnimation*>(
               &_StopAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StopAnimation* other);
  friend void swap(StopAnimation& a, StopAnimation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopAnimation* New() const final {
    return CreateMaybeMessage<StopAnimation>(NULL);
  }

  StopAnimation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopAnimation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopAnimation& from);
  void MergeFrom(const StopAnimation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopAnimation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CARTA.AnimationFrame end_frame = 2;
  bool has_end_frame() const;
  void clear_end_frame();
  static const int kEndFrameFieldNumber = 2;
  private:
  const ::CARTA::AnimationFrame& _internal_end_frame() const;
  public:
  const ::CARTA::AnimationFrame& end_frame() const;
  ::CARTA::AnimationFrame* release_end_frame();
  ::CARTA::AnimationFrame* mutable_end_frame();
  void set_allocated_end_frame(::CARTA::AnimationFrame* end_frame);

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.StopAnimation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CARTA::AnimationFrame* end_frame_;
  ::google::protobuf::int32 file_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_animation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StartAnimation

// sfixed32 file_id = 1;
inline void StartAnimation::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 StartAnimation::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.StartAnimation.file_id)
  return file_id_;
}
inline void StartAnimation::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.StartAnimation.file_id)
}

// .CARTA.AnimationFrame first_frame = 2;
inline bool StartAnimation::has_first_frame() const {
  return this != internal_default_instance() && first_frame_ != NULL;
}
inline const ::CARTA::AnimationFrame& StartAnimation::_internal_first_frame() const {
  return *first_frame_;
}
inline const ::CARTA::AnimationFrame& StartAnimation::first_frame() const {
  const ::CARTA::AnimationFrame* p = first_frame_;
  // @@protoc_insertion_point(field_get:CARTA.StartAnimation.first_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::AnimationFrame*>(
      &::CARTA::_AnimationFrame_default_instance_);
}
inline ::CARTA::AnimationFrame* StartAnimation::release_first_frame() {
  // @@protoc_insertion_point(field_release:CARTA.StartAnimation.first_frame)
  
  ::CARTA::AnimationFrame* temp = first_frame_;
  first_frame_ = NULL;
  return temp;
}
inline ::CARTA::AnimationFrame* StartAnimation::mutable_first_frame() {
  
  if (first_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::AnimationFrame>(GetArenaNoVirtual());
    first_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.StartAnimation.first_frame)
  return first_frame_;
}
inline void StartAnimation::set_allocated_first_frame(::CARTA::AnimationFrame* first_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(first_frame_);
  }
  if (first_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      first_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, first_frame, submessage_arena);
    }
    
  } else {
    
  }
  first_frame_ = first_frame;
  // @@protoc_insertion_point(field_set_allocated:CARTA.StartAnimation.first_frame)
}

// .CARTA.AnimationFrame start_frame = 3;
inline bool StartAnimation::has_start_frame() const {
  return this != internal_default_instance() && start_frame_ != NULL;
}
inline const ::CARTA::AnimationFrame& StartAnimation::_internal_start_frame() const {
  return *start_frame_;
}
inline const ::CARTA::AnimationFrame& StartAnimation::start_frame() const {
  const ::CARTA::AnimationFrame* p = start_frame_;
  // @@protoc_insertion_point(field_get:CARTA.StartAnimation.start_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::AnimationFrame*>(
      &::CARTA::_AnimationFrame_default_instance_);
}
inline ::CARTA::AnimationFrame* StartAnimation::release_start_frame() {
  // @@protoc_insertion_point(field_release:CARTA.StartAnimation.start_frame)
  
  ::CARTA::AnimationFrame* temp = start_frame_;
  start_frame_ = NULL;
  return temp;
}
inline ::CARTA::AnimationFrame* StartAnimation::mutable_start_frame() {
  
  if (start_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::AnimationFrame>(GetArenaNoVirtual());
    start_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.StartAnimation.start_frame)
  return start_frame_;
}
inline void StartAnimation::set_allocated_start_frame(::CARTA::AnimationFrame* start_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_frame_);
  }
  if (start_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_frame, submessage_arena);
    }
    
  } else {
    
  }
  start_frame_ = start_frame;
  // @@protoc_insertion_point(field_set_allocated:CARTA.StartAnimation.start_frame)
}

// .CARTA.AnimationFrame last_frame = 4;
inline bool StartAnimation::has_last_frame() const {
  return this != internal_default_instance() && last_frame_ != NULL;
}
inline const ::CARTA::AnimationFrame& StartAnimation::_internal_last_frame() const {
  return *last_frame_;
}
inline const ::CARTA::AnimationFrame& StartAnimation::last_frame() const {
  const ::CARTA::AnimationFrame* p = last_frame_;
  // @@protoc_insertion_point(field_get:CARTA.StartAnimation.last_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::AnimationFrame*>(
      &::CARTA::_AnimationFrame_default_instance_);
}
inline ::CARTA::AnimationFrame* StartAnimation::release_last_frame() {
  // @@protoc_insertion_point(field_release:CARTA.StartAnimation.last_frame)
  
  ::CARTA::AnimationFrame* temp = last_frame_;
  last_frame_ = NULL;
  return temp;
}
inline ::CARTA::AnimationFrame* StartAnimation::mutable_last_frame() {
  
  if (last_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::AnimationFrame>(GetArenaNoVirtual());
    last_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.StartAnimation.last_frame)
  return last_frame_;
}
inline void StartAnimation::set_allocated_last_frame(::CARTA::AnimationFrame* last_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(last_frame_);
  }
  if (last_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_frame, submessage_arena);
    }
    
  } else {
    
  }
  last_frame_ = last_frame;
  // @@protoc_insertion_point(field_set_allocated:CARTA.StartAnimation.last_frame)
}

// .CARTA.AnimationFrame delta_frame = 5;
inline bool StartAnimation::has_delta_frame() const {
  return this != internal_default_instance() && delta_frame_ != NULL;
}
inline const ::CARTA::AnimationFrame& StartAnimation::_internal_delta_frame() const {
  return *delta_frame_;
}
inline const ::CARTA::AnimationFrame& StartAnimation::delta_frame() const {
  const ::CARTA::AnimationFrame* p = delta_frame_;
  // @@protoc_insertion_point(field_get:CARTA.StartAnimation.delta_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::AnimationFrame*>(
      &::CARTA::_AnimationFrame_default_instance_);
}
inline ::CARTA::AnimationFrame* StartAnimation::release_delta_frame() {
  // @@protoc_insertion_point(field_release:CARTA.StartAnimation.delta_frame)
  
  ::CARTA::AnimationFrame* temp = delta_frame_;
  delta_frame_ = NULL;
  return temp;
}
inline ::CARTA::AnimationFrame* StartAnimation::mutable_delta_frame() {
  
  if (delta_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::AnimationFrame>(GetArenaNoVirtual());
    delta_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.StartAnimation.delta_frame)
  return delta_frame_;
}
inline void StartAnimation::set_allocated_delta_frame(::CARTA::AnimationFrame* delta_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(delta_frame_);
  }
  if (delta_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delta_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delta_frame, submessage_arena);
    }
    
  } else {
    
  }
  delta_frame_ = delta_frame;
  // @@protoc_insertion_point(field_set_allocated:CARTA.StartAnimation.delta_frame)
}

// sfixed32 frame_rate = 6;
inline void StartAnimation::clear_frame_rate() {
  frame_rate_ = 0;
}
inline ::google::protobuf::int32 StartAnimation::frame_rate() const {
  // @@protoc_insertion_point(field_get:CARTA.StartAnimation.frame_rate)
  return frame_rate_;
}
inline void StartAnimation::set_frame_rate(::google::protobuf::int32 value) {
  
  frame_rate_ = value;
  // @@protoc_insertion_point(field_set:CARTA.StartAnimation.frame_rate)
}

// bool looping = 7;
inline void StartAnimation::clear_looping() {
  looping_ = false;
}
inline bool StartAnimation::looping() const {
  // @@protoc_insertion_point(field_get:CARTA.StartAnimation.looping)
  return looping_;
}
inline void StartAnimation::set_looping(bool value) {
  
  looping_ = value;
  // @@protoc_insertion_point(field_set:CARTA.StartAnimation.looping)
}

// bool reverse = 8;
inline void StartAnimation::clear_reverse() {
  reverse_ = false;
}
inline bool StartAnimation::reverse() const {
  // @@protoc_insertion_point(field_get:CARTA.StartAnimation.reverse)
  return reverse_;
}
inline void StartAnimation::set_reverse(bool value) {
  
  reverse_ = value;
  // @@protoc_insertion_point(field_set:CARTA.StartAnimation.reverse)
}

// .CARTA.AddRequiredTiles required_tiles = 9;
inline bool StartAnimation::has_required_tiles() const {
  return this != internal_default_instance() && required_tiles_ != NULL;
}
inline const ::CARTA::AddRequiredTiles& StartAnimation::_internal_required_tiles() const {
  return *required_tiles_;
}
inline const ::CARTA::AddRequiredTiles& StartAnimation::required_tiles() const {
  const ::CARTA::AddRequiredTiles* p = required_tiles_;
  // @@protoc_insertion_point(field_get:CARTA.StartAnimation.required_tiles)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::AddRequiredTiles*>(
      &::CARTA::_AddRequiredTiles_default_instance_);
}
inline ::CARTA::AddRequiredTiles* StartAnimation::release_required_tiles() {
  // @@protoc_insertion_point(field_release:CARTA.StartAnimation.required_tiles)
  
  ::CARTA::AddRequiredTiles* temp = required_tiles_;
  required_tiles_ = NULL;
  return temp;
}
inline ::CARTA::AddRequiredTiles* StartAnimation::mutable_required_tiles() {
  
  if (required_tiles_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::AddRequiredTiles>(GetArenaNoVirtual());
    required_tiles_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.StartAnimation.required_tiles)
  return required_tiles_;
}
inline void StartAnimation::set_allocated_required_tiles(::CARTA::AddRequiredTiles* required_tiles) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(required_tiles_);
  }
  if (required_tiles) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      required_tiles = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, required_tiles, submessage_arena);
    }
    
  } else {
    
  }
  required_tiles_ = required_tiles;
  // @@protoc_insertion_point(field_set_allocated:CARTA.StartAnimation.required_tiles)
}

// map<sfixed32, .CARTA.MatchedFrameList> matched_frames = 10;
inline int StartAnimation::matched_frames_size() const {
  return matched_frames_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >&
StartAnimation::matched_frames() const {
  // @@protoc_insertion_point(field_map:CARTA.StartAnimation.matched_frames)
  return matched_frames_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::CARTA::MatchedFrameList >*
StartAnimation::mutable_matched_frames() {
  // @@protoc_insertion_point(field_mutable_map:CARTA.StartAnimation.matched_frames)
  return matched_frames_.MutableMap();
}

// -------------------------------------------------------------------

// StartAnimationAck

// bool success = 1;
inline void StartAnimationAck::clear_success() {
  success_ = false;
}
inline bool StartAnimationAck::success() const {
  // @@protoc_insertion_point(field_get:CARTA.StartAnimationAck.success)
  return success_;
}
inline void StartAnimationAck::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:CARTA.StartAnimationAck.success)
}

// string message = 2;
inline void StartAnimationAck::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartAnimationAck::message() const {
  // @@protoc_insertion_point(field_get:CARTA.StartAnimationAck.message)
  return message_.GetNoArena();
}
inline void StartAnimationAck::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.StartAnimationAck.message)
}
#if LANG_CXX11
inline void StartAnimationAck::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.StartAnimationAck.message)
}
#endif
inline void StartAnimationAck::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.StartAnimationAck.message)
}
inline void StartAnimationAck::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.StartAnimationAck.message)
}
inline ::std::string* StartAnimationAck::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.StartAnimationAck.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartAnimationAck::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.StartAnimationAck.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartAnimationAck::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.StartAnimationAck.message)
}

// sfixed32 animation_id = 3;
inline void StartAnimationAck::clear_animation_id() {
  animation_id_ = 0;
}
inline ::google::protobuf::int32 StartAnimationAck::animation_id() const {
  // @@protoc_insertion_point(field_get:CARTA.StartAnimationAck.animation_id)
  return animation_id_;
}
inline void StartAnimationAck::set_animation_id(::google::protobuf::int32 value) {
  
  animation_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.StartAnimationAck.animation_id)
}

// -------------------------------------------------------------------

// AnimationFlowControl

// sfixed32 file_id = 1;
inline void AnimationFlowControl::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 AnimationFlowControl::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.AnimationFlowControl.file_id)
  return file_id_;
}
inline void AnimationFlowControl::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.AnimationFlowControl.file_id)
}

// .CARTA.AnimationFrame received_frame = 2;
inline bool AnimationFlowControl::has_received_frame() const {
  return this != internal_default_instance() && received_frame_ != NULL;
}
inline const ::CARTA::AnimationFrame& AnimationFlowControl::_internal_received_frame() const {
  return *received_frame_;
}
inline const ::CARTA::AnimationFrame& AnimationFlowControl::received_frame() const {
  const ::CARTA::AnimationFrame* p = received_frame_;
  // @@protoc_insertion_point(field_get:CARTA.AnimationFlowControl.received_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::AnimationFrame*>(
      &::CARTA::_AnimationFrame_default_instance_);
}
inline ::CARTA::AnimationFrame* AnimationFlowControl::release_received_frame() {
  // @@protoc_insertion_point(field_release:CARTA.AnimationFlowControl.received_frame)
  
  ::CARTA::AnimationFrame* temp = received_frame_;
  received_frame_ = NULL;
  return temp;
}
inline ::CARTA::AnimationFrame* AnimationFlowControl::mutable_received_frame() {
  
  if (received_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::AnimationFrame>(GetArenaNoVirtual());
    received_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.AnimationFlowControl.received_frame)
  return received_frame_;
}
inline void AnimationFlowControl::set_allocated_received_frame(::CARTA::AnimationFrame* received_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(received_frame_);
  }
  if (received_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      received_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, received_frame, submessage_arena);
    }
    
  } else {
    
  }
  received_frame_ = received_frame;
  // @@protoc_insertion_point(field_set_allocated:CARTA.AnimationFlowControl.received_frame)
}

// sfixed32 animation_id = 3;
inline void AnimationFlowControl::clear_animation_id() {
  animation_id_ = 0;
}
inline ::google::protobuf::int32 AnimationFlowControl::animation_id() const {
  // @@protoc_insertion_point(field_get:CARTA.AnimationFlowControl.animation_id)
  return animation_id_;
}
inline void AnimationFlowControl::set_animation_id(::google::protobuf::int32 value) {
  
  animation_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.AnimationFlowControl.animation_id)
}

// sfixed64 timestamp = 4;
inline void AnimationFlowControl::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AnimationFlowControl::timestamp() const {
  // @@protoc_insertion_point(field_get:CARTA.AnimationFlowControl.timestamp)
  return timestamp_;
}
inline void AnimationFlowControl::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CARTA.AnimationFlowControl.timestamp)
}

// -------------------------------------------------------------------

// StopAnimation

// sfixed32 file_id = 1;
inline void StopAnimation::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 StopAnimation::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.StopAnimation.file_id)
  return file_id_;
}
inline void StopAnimation::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.StopAnimation.file_id)
}

// .CARTA.AnimationFrame end_frame = 2;
inline bool StopAnimation::has_end_frame() const {
  return this != internal_default_instance() && end_frame_ != NULL;
}
inline const ::CARTA::AnimationFrame& StopAnimation::_internal_end_frame() const {
  return *end_frame_;
}
inline const ::CARTA::AnimationFrame& StopAnimation::end_frame() const {
  const ::CARTA::AnimationFrame* p = end_frame_;
  // @@protoc_insertion_point(field_get:CARTA.StopAnimation.end_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::AnimationFrame*>(
      &::CARTA::_AnimationFrame_default_instance_);
}
inline ::CARTA::AnimationFrame* StopAnimation::release_end_frame() {
  // @@protoc_insertion_point(field_release:CARTA.StopAnimation.end_frame)
  
  ::CARTA::AnimationFrame* temp = end_frame_;
  end_frame_ = NULL;
  return temp;
}
inline ::CARTA::AnimationFrame* StopAnimation::mutable_end_frame() {
  
  if (end_frame_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::AnimationFrame>(GetArenaNoVirtual());
    end_frame_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.StopAnimation.end_frame)
  return end_frame_;
}
inline void StopAnimation::set_allocated_end_frame(::CARTA::AnimationFrame* end_frame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_frame_);
  }
  if (end_frame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end_frame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_frame, submessage_arena);
    }
    
  } else {
    
  }
  end_frame_ = end_frame;
  // @@protoc_insertion_point(field_set_allocated:CARTA.StopAnimation.end_frame)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_animation_2eproto
