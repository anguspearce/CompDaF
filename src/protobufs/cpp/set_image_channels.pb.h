// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: set_image_channels.proto

#ifndef PROTOBUF_INCLUDED_set_5fimage_5fchannels_2eproto
#define PROTOBUF_INCLUDED_set_5fimage_5fchannels_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tiles.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_set_5fimage_5fchannels_2eproto 

namespace protobuf_set_5fimage_5fchannels_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_set_5fimage_5fchannels_2eproto
namespace CARTA {
class SetImageChannels;
class SetImageChannelsDefaultTypeInternal;
extern SetImageChannelsDefaultTypeInternal _SetImageChannels_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::SetImageChannels* Arena::CreateMaybeMessage<::CARTA::SetImageChannels>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class SetImageChannels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SetImageChannels) */ {
 public:
  SetImageChannels();
  virtual ~SetImageChannels();

  SetImageChannels(const SetImageChannels& from);

  inline SetImageChannels& operator=(const SetImageChannels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetImageChannels(SetImageChannels&& from) noexcept
    : SetImageChannels() {
    *this = ::std::move(from);
  }

  inline SetImageChannels& operator=(SetImageChannels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetImageChannels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetImageChannels* internal_default_instance() {
    return reinterpret_cast<const SetImageChannels*>(
               &_SetImageChannels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SetImageChannels* other);
  friend void swap(SetImageChannels& a, SetImageChannels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetImageChannels* New() const final {
    return CreateMaybeMessage<SetImageChannels>(NULL);
  }

  SetImageChannels* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetImageChannels>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetImageChannels& from);
  void MergeFrom(const SetImageChannels& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetImageChannels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CARTA.AddRequiredTiles required_tiles = 4;
  bool has_required_tiles() const;
  void clear_required_tiles();
  static const int kRequiredTilesFieldNumber = 4;
  private:
  const ::CARTA::AddRequiredTiles& _internal_required_tiles() const;
  public:
  const ::CARTA::AddRequiredTiles& required_tiles() const;
  ::CARTA::AddRequiredTiles* release_required_tiles();
  ::CARTA::AddRequiredTiles* mutable_required_tiles();
  void set_allocated_required_tiles(::CARTA::AddRequiredTiles* required_tiles);

  // sfixed32 file_id = 1;
  void clear_file_id();
  static const int kFileIdFieldNumber = 1;
  ::google::protobuf::int32 file_id() const;
  void set_file_id(::google::protobuf::int32 value);

  // sfixed32 channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // sfixed32 stokes = 3;
  void clear_stokes();
  static const int kStokesFieldNumber = 3;
  ::google::protobuf::int32 stokes() const;
  void set_stokes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.SetImageChannels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CARTA::AddRequiredTiles* required_tiles_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 stokes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_set_5fimage_5fchannels_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetImageChannels

// sfixed32 file_id = 1;
inline void SetImageChannels::clear_file_id() {
  file_id_ = 0;
}
inline ::google::protobuf::int32 SetImageChannels::file_id() const {
  // @@protoc_insertion_point(field_get:CARTA.SetImageChannels.file_id)
  return file_id_;
}
inline void SetImageChannels::set_file_id(::google::protobuf::int32 value) {
  
  file_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetImageChannels.file_id)
}

// sfixed32 channel = 2;
inline void SetImageChannels::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 SetImageChannels::channel() const {
  // @@protoc_insertion_point(field_get:CARTA.SetImageChannels.channel)
  return channel_;
}
inline void SetImageChannels::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetImageChannels.channel)
}

// sfixed32 stokes = 3;
inline void SetImageChannels::clear_stokes() {
  stokes_ = 0;
}
inline ::google::protobuf::int32 SetImageChannels::stokes() const {
  // @@protoc_insertion_point(field_get:CARTA.SetImageChannels.stokes)
  return stokes_;
}
inline void SetImageChannels::set_stokes(::google::protobuf::int32 value) {
  
  stokes_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SetImageChannels.stokes)
}

// .CARTA.AddRequiredTiles required_tiles = 4;
inline bool SetImageChannels::has_required_tiles() const {
  return this != internal_default_instance() && required_tiles_ != NULL;
}
inline const ::CARTA::AddRequiredTiles& SetImageChannels::_internal_required_tiles() const {
  return *required_tiles_;
}
inline const ::CARTA::AddRequiredTiles& SetImageChannels::required_tiles() const {
  const ::CARTA::AddRequiredTiles* p = required_tiles_;
  // @@protoc_insertion_point(field_get:CARTA.SetImageChannels.required_tiles)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::AddRequiredTiles*>(
      &::CARTA::_AddRequiredTiles_default_instance_);
}
inline ::CARTA::AddRequiredTiles* SetImageChannels::release_required_tiles() {
  // @@protoc_insertion_point(field_release:CARTA.SetImageChannels.required_tiles)
  
  ::CARTA::AddRequiredTiles* temp = required_tiles_;
  required_tiles_ = NULL;
  return temp;
}
inline ::CARTA::AddRequiredTiles* SetImageChannels::mutable_required_tiles() {
  
  if (required_tiles_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::AddRequiredTiles>(GetArenaNoVirtual());
    required_tiles_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.SetImageChannels.required_tiles)
  return required_tiles_;
}
inline void SetImageChannels::set_allocated_required_tiles(::CARTA::AddRequiredTiles* required_tiles) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(required_tiles_);
  }
  if (required_tiles) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      required_tiles = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, required_tiles, submessage_arena);
    }
    
  } else {
    
  }
  required_tiles_ = required_tiles;
  // @@protoc_insertion_point(field_set_allocated:CARTA.SetImageChannels.required_tiles)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_set_5fimage_5fchannels_2eproto
