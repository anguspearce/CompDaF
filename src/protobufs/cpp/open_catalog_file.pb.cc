// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_catalog_file.proto

#include "open_catalog_file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_defs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CatalogHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ColumnData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CatalogFileInfo;
}  // namespace protobuf_defs_2eproto
namespace protobuf_open_5fcatalog_5ffile_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_open_5fcatalog_5ffile_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OpenCatalogFileAck_PreviewDataEntry_DoNotUse;
}  // namespace protobuf_open_5fcatalog_5ffile_2eproto
namespace CARTA {
class OpenCatalogFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenCatalogFile>
      _instance;
} _OpenCatalogFile_default_instance_;
class OpenCatalogFileAck_PreviewDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenCatalogFileAck_PreviewDataEntry_DoNotUse>
      _instance;
} _OpenCatalogFileAck_PreviewDataEntry_DoNotUse_default_instance_;
class OpenCatalogFileAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenCatalogFileAck>
      _instance;
} _OpenCatalogFileAck_default_instance_;
class CloseCatalogFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloseCatalogFile>
      _instance;
} _CloseCatalogFile_default_instance_;
}  // namespace CARTA
namespace protobuf_open_5fcatalog_5ffile_2eproto {
static void InitDefaultsOpenCatalogFile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_OpenCatalogFile_default_instance_;
    new (ptr) ::CARTA::OpenCatalogFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::OpenCatalogFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenCatalogFile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenCatalogFile}, {}};

static void InitDefaultsOpenCatalogFileAck_PreviewDataEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_OpenCatalogFileAck_PreviewDataEntry_DoNotUse_default_instance_;
    new (ptr) ::CARTA::OpenCatalogFileAck_PreviewDataEntry_DoNotUse();
  }
  ::CARTA::OpenCatalogFileAck_PreviewDataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OpenCatalogFileAck_PreviewDataEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOpenCatalogFileAck_PreviewDataEntry_DoNotUse}, {
      &protobuf_defs_2eproto::scc_info_ColumnData.base,}};

static void InitDefaultsOpenCatalogFileAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_OpenCatalogFileAck_default_instance_;
    new (ptr) ::CARTA::OpenCatalogFileAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::OpenCatalogFileAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_OpenCatalogFileAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsOpenCatalogFileAck}, {
      &protobuf_defs_2eproto::scc_info_CatalogFileInfo.base,
      &protobuf_defs_2eproto::scc_info_CatalogHeader.base,
      &protobuf_open_5fcatalog_5ffile_2eproto::scc_info_OpenCatalogFileAck_PreviewDataEntry_DoNotUse.base,}};

static void InitDefaultsCloseCatalogFile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_CloseCatalogFile_default_instance_;
    new (ptr) ::CARTA::CloseCatalogFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::CloseCatalogFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CloseCatalogFile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCloseCatalogFile}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OpenCatalogFile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenCatalogFileAck_PreviewDataEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenCatalogFileAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloseCatalogFile.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFile, directory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFile, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFile, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFile, preview_data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck_PreviewDataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck_PreviewDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck_PreviewDataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck_PreviewDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck, file_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck, data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::OpenCatalogFileAck, preview_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CloseCatalogFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CloseCatalogFile, file_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::OpenCatalogFile)},
  { 9, 16, sizeof(::CARTA::OpenCatalogFileAck_PreviewDataEntry_DoNotUse)},
  { 18, -1, sizeof(::CARTA::OpenCatalogFileAck)},
  { 30, -1, sizeof(::CARTA::CloseCatalogFile)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_OpenCatalogFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_OpenCatalogFileAck_PreviewDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_OpenCatalogFileAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_CloseCatalogFile_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "open_catalog_file.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027open_catalog_file.proto\022\005CARTA\032\ndefs.p"
      "roto\"^\n\017OpenCatalogFile\022\021\n\tdirectory\030\001 \001"
      "(\t\022\014\n\004name\030\002 \001(\t\022\017\n\007file_id\030\003 \001(\017\022\031\n\021pre"
      "view_data_size\030\004 \001(\017\"\265\002\n\022OpenCatalogFile"
      "Ack\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\022\017\n"
      "\007file_id\030\003 \001(\017\022)\n\tfile_info\030\004 \001(\0132\026.CART"
      "A.CatalogFileInfo\022\021\n\tdata_size\030\005 \001(\017\022%\n\007"
      "headers\030\006 \003(\0132\024.CARTA.CatalogHeader\022@\n\014p"
      "review_data\030\007 \003(\0132*.CARTA.OpenCatalogFil"
      "eAck.PreviewDataEntry\032E\n\020PreviewDataEntr"
      "y\022\013\n\003key\030\001 \001(\007\022 \n\005value\030\002 \001(\0132\021.CARTA.Co"
      "lumnData:\0028\001\"#\n\020CloseCatalogFile\022\017\n\007file"
      "_id\030\001 \001(\017b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 497);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "open_catalog_file.proto", &protobuf_RegisterTypes);
  ::protobuf_defs_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_open_5fcatalog_5ffile_2eproto
namespace CARTA {

// ===================================================================

void OpenCatalogFile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenCatalogFile::kDirectoryFieldNumber;
const int OpenCatalogFile::kNameFieldNumber;
const int OpenCatalogFile::kFileIdFieldNumber;
const int OpenCatalogFile::kPreviewDataSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenCatalogFile::OpenCatalogFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_open_5fcatalog_5ffile_2eproto::scc_info_OpenCatalogFile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.OpenCatalogFile)
}
OpenCatalogFile::OpenCatalogFile(const OpenCatalogFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.directory().size() > 0) {
    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&preview_data_size_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(preview_data_size_));
  // @@protoc_insertion_point(copy_constructor:CARTA.OpenCatalogFile)
}

void OpenCatalogFile::SharedCtor() {
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preview_data_size_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(preview_data_size_));
}

OpenCatalogFile::~OpenCatalogFile() {
  // @@protoc_insertion_point(destructor:CARTA.OpenCatalogFile)
  SharedDtor();
}

void OpenCatalogFile::SharedDtor() {
  directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OpenCatalogFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenCatalogFile::descriptor() {
  ::protobuf_open_5fcatalog_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_open_5fcatalog_5ffile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenCatalogFile& OpenCatalogFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_open_5fcatalog_5ffile_2eproto::scc_info_OpenCatalogFile.base);
  return *internal_default_instance();
}


void OpenCatalogFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.OpenCatalogFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preview_data_size_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(preview_data_size_));
  _internal_metadata_.Clear();
}

bool OpenCatalogFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.OpenCatalogFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string directory = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->directory().data(), static_cast<int>(this->directory().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.OpenCatalogFile.directory"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.OpenCatalogFile.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 file_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 preview_data_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &preview_data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.OpenCatalogFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.OpenCatalogFile)
  return false;
#undef DO_
}

void OpenCatalogFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.OpenCatalogFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), static_cast<int>(this->directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenCatalogFile.directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->directory(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenCatalogFile.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // sfixed32 file_id = 3;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->file_id(), output);
  }

  // sfixed32 preview_data_size = 4;
  if (this->preview_data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->preview_data_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.OpenCatalogFile)
}

::google::protobuf::uint8* OpenCatalogFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.OpenCatalogFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), static_cast<int>(this->directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenCatalogFile.directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->directory(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenCatalogFile.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // sfixed32 file_id = 3;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->file_id(), target);
  }

  // sfixed32 preview_data_size = 4;
  if (this->preview_data_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->preview_data_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.OpenCatalogFile)
  return target;
}

size_t OpenCatalogFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.OpenCatalogFile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string directory = 1;
  if (this->directory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->directory());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // sfixed32 file_id = 3;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 preview_data_size = 4;
  if (this->preview_data_size() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenCatalogFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.OpenCatalogFile)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenCatalogFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenCatalogFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.OpenCatalogFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.OpenCatalogFile)
    MergeFrom(*source);
  }
}

void OpenCatalogFile::MergeFrom(const OpenCatalogFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.OpenCatalogFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directory().size() > 0) {

    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.preview_data_size() != 0) {
    set_preview_data_size(from.preview_data_size());
  }
}

void OpenCatalogFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.OpenCatalogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenCatalogFile::CopyFrom(const OpenCatalogFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.OpenCatalogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenCatalogFile::IsInitialized() const {
  return true;
}

void OpenCatalogFile::Swap(OpenCatalogFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenCatalogFile::InternalSwap(OpenCatalogFile* other) {
  using std::swap;
  directory_.Swap(&other->directory_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_id_, other->file_id_);
  swap(preview_data_size_, other->preview_data_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenCatalogFile::GetMetadata() const {
  protobuf_open_5fcatalog_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_open_5fcatalog_5ffile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

OpenCatalogFileAck_PreviewDataEntry_DoNotUse::OpenCatalogFileAck_PreviewDataEntry_DoNotUse() {}
OpenCatalogFileAck_PreviewDataEntry_DoNotUse::OpenCatalogFileAck_PreviewDataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void OpenCatalogFileAck_PreviewDataEntry_DoNotUse::MergeFrom(const OpenCatalogFileAck_PreviewDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata OpenCatalogFileAck_PreviewDataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_open_5fcatalog_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_open_5fcatalog_5ffile_2eproto::file_level_metadata[1];
}
void OpenCatalogFileAck_PreviewDataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void OpenCatalogFileAck::InitAsDefaultInstance() {
  ::CARTA::_OpenCatalogFileAck_default_instance_._instance.get_mutable()->file_info_ = const_cast< ::CARTA::CatalogFileInfo*>(
      ::CARTA::CatalogFileInfo::internal_default_instance());
}
void OpenCatalogFileAck::clear_file_info() {
  if (GetArenaNoVirtual() == NULL && file_info_ != NULL) {
    delete file_info_;
  }
  file_info_ = NULL;
}
void OpenCatalogFileAck::clear_headers() {
  headers_.Clear();
}
void OpenCatalogFileAck::clear_preview_data() {
  preview_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenCatalogFileAck::kSuccessFieldNumber;
const int OpenCatalogFileAck::kMessageFieldNumber;
const int OpenCatalogFileAck::kFileIdFieldNumber;
const int OpenCatalogFileAck::kFileInfoFieldNumber;
const int OpenCatalogFileAck::kDataSizeFieldNumber;
const int OpenCatalogFileAck::kHeadersFieldNumber;
const int OpenCatalogFileAck::kPreviewDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenCatalogFileAck::OpenCatalogFileAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_open_5fcatalog_5ffile_2eproto::scc_info_OpenCatalogFileAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.OpenCatalogFileAck)
}
OpenCatalogFileAck::OpenCatalogFileAck(const OpenCatalogFileAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  preview_data_.MergeFrom(from.preview_data_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_file_info()) {
    file_info_ = new ::CARTA::CatalogFileInfo(*from.file_info_);
  } else {
    file_info_ = NULL;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_size_) -
    reinterpret_cast<char*>(&success_)) + sizeof(data_size_));
  // @@protoc_insertion_point(copy_constructor:CARTA.OpenCatalogFileAck)
}

void OpenCatalogFileAck::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_size_) -
      reinterpret_cast<char*>(&file_info_)) + sizeof(data_size_));
}

OpenCatalogFileAck::~OpenCatalogFileAck() {
  // @@protoc_insertion_point(destructor:CARTA.OpenCatalogFileAck)
  SharedDtor();
}

void OpenCatalogFileAck::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_info_;
}

void OpenCatalogFileAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenCatalogFileAck::descriptor() {
  ::protobuf_open_5fcatalog_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_open_5fcatalog_5ffile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenCatalogFileAck& OpenCatalogFileAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_open_5fcatalog_5ffile_2eproto::scc_info_OpenCatalogFileAck.base);
  return *internal_default_instance();
}


void OpenCatalogFileAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.OpenCatalogFileAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  preview_data_.Clear();
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && file_info_ != NULL) {
    delete file_info_;
  }
  file_info_ = NULL;
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_size_) -
      reinterpret_cast<char*>(&success_)) + sizeof(data_size_));
  _internal_metadata_.Clear();
}

bool OpenCatalogFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.OpenCatalogFileAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.OpenCatalogFileAck.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 file_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.CatalogFileInfo file_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 data_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.CatalogHeader headers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<fixed32, .CARTA.ColumnData> preview_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          OpenCatalogFileAck_PreviewDataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              OpenCatalogFileAck_PreviewDataEntry_DoNotUse,
              ::google::protobuf::uint32, ::CARTA::ColumnData,
              ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData > > parser(&preview_data_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.OpenCatalogFileAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.OpenCatalogFileAck)
  return false;
#undef DO_
}

void OpenCatalogFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.OpenCatalogFileAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenCatalogFileAck.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // sfixed32 file_id = 3;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->file_id(), output);
  }

  // .CARTA.CatalogFileInfo file_info = 4;
  if (this->has_file_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_file_info(), output);
  }

  // sfixed32 data_size = 5;
  if (this->data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->data_size(), output);
  }

  // repeated .CARTA.CatalogHeader headers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->headers(static_cast<int>(i)),
      output);
  }

  // map<fixed32, .CARTA.ColumnData> preview_data = 7;
  if (!this->preview_data().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->preview_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->preview_data().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->preview_data().begin();
          it != this->preview_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<OpenCatalogFileAck_PreviewDataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(preview_data_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
      }
    } else {
      ::std::unique_ptr<OpenCatalogFileAck_PreviewDataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->preview_data().begin();
          it != this->preview_data().end(); ++it) {
        entry.reset(preview_data_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.OpenCatalogFileAck)
}

::google::protobuf::uint8* OpenCatalogFileAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.OpenCatalogFileAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.OpenCatalogFileAck.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // sfixed32 file_id = 3;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->file_id(), target);
  }

  // .CARTA.CatalogFileInfo file_info = 4;
  if (this->has_file_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_file_info(), deterministic, target);
  }

  // sfixed32 data_size = 5;
  if (this->data_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->data_size(), target);
  }

  // repeated .CARTA.CatalogHeader headers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->headers(static_cast<int>(i)), deterministic, target);
  }

  // map<fixed32, .CARTA.ColumnData> preview_data = 7;
  if (!this->preview_data().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->preview_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->preview_data().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->preview_data().begin();
          it != this->preview_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<OpenCatalogFileAck_PreviewDataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(preview_data_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<OpenCatalogFileAck_PreviewDataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->preview_data().begin();
          it != this->preview_data().end(); ++it) {
        entry.reset(preview_data_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.OpenCatalogFileAck)
  return target;
}

size_t OpenCatalogFileAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.OpenCatalogFileAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.CatalogHeader headers = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  // map<fixed32, .CARTA.ColumnData> preview_data = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->preview_data_size());
  {
    ::std::unique_ptr<OpenCatalogFileAck_PreviewDataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
        it = this->preview_data().begin();
        it != this->preview_data().end(); ++it) {
      entry.reset(preview_data_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .CARTA.CatalogFileInfo file_info = 4;
  if (this->has_file_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_info_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // sfixed32 file_id = 3;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 data_size = 5;
  if (this->data_size() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenCatalogFileAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.OpenCatalogFileAck)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenCatalogFileAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenCatalogFileAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.OpenCatalogFileAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.OpenCatalogFileAck)
    MergeFrom(*source);
  }
}

void OpenCatalogFileAck::MergeFrom(const OpenCatalogFileAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.OpenCatalogFileAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  preview_data_.MergeFrom(from.preview_data_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_file_info()) {
    mutable_file_info()->::CARTA::CatalogFileInfo::MergeFrom(from.file_info());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.data_size() != 0) {
    set_data_size(from.data_size());
  }
}

void OpenCatalogFileAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.OpenCatalogFileAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenCatalogFileAck::CopyFrom(const OpenCatalogFileAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.OpenCatalogFileAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenCatalogFileAck::IsInitialized() const {
  return true;
}

void OpenCatalogFileAck::Swap(OpenCatalogFileAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenCatalogFileAck::InternalSwap(OpenCatalogFileAck* other) {
  using std::swap;
  CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
  preview_data_.Swap(&other->preview_data_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_info_, other->file_info_);
  swap(success_, other->success_);
  swap(file_id_, other->file_id_);
  swap(data_size_, other->data_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenCatalogFileAck::GetMetadata() const {
  protobuf_open_5fcatalog_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_open_5fcatalog_5ffile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloseCatalogFile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseCatalogFile::kFileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseCatalogFile::CloseCatalogFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_open_5fcatalog_5ffile_2eproto::scc_info_CloseCatalogFile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.CloseCatalogFile)
}
CloseCatalogFile::CloseCatalogFile(const CloseCatalogFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_ = from.file_id_;
  // @@protoc_insertion_point(copy_constructor:CARTA.CloseCatalogFile)
}

void CloseCatalogFile::SharedCtor() {
  file_id_ = 0;
}

CloseCatalogFile::~CloseCatalogFile() {
  // @@protoc_insertion_point(destructor:CARTA.CloseCatalogFile)
  SharedDtor();
}

void CloseCatalogFile::SharedDtor() {
}

void CloseCatalogFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CloseCatalogFile::descriptor() {
  ::protobuf_open_5fcatalog_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_open_5fcatalog_5ffile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloseCatalogFile& CloseCatalogFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_open_5fcatalog_5ffile_2eproto::scc_info_CloseCatalogFile.base);
  return *internal_default_instance();
}


void CloseCatalogFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.CloseCatalogFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_id_ = 0;
  _internal_metadata_.Clear();
}

bool CloseCatalogFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.CloseCatalogFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.CloseCatalogFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.CloseCatalogFile)
  return false;
#undef DO_
}

void CloseCatalogFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.CloseCatalogFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.CloseCatalogFile)
}

::google::protobuf::uint8* CloseCatalogFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.CloseCatalogFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.CloseCatalogFile)
  return target;
}

size_t CloseCatalogFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.CloseCatalogFile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseCatalogFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.CloseCatalogFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseCatalogFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseCatalogFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.CloseCatalogFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.CloseCatalogFile)
    MergeFrom(*source);
  }
}

void CloseCatalogFile::MergeFrom(const CloseCatalogFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.CloseCatalogFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
}

void CloseCatalogFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.CloseCatalogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseCatalogFile::CopyFrom(const CloseCatalogFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.CloseCatalogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseCatalogFile::IsInitialized() const {
  return true;
}

void CloseCatalogFile::Swap(CloseCatalogFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseCatalogFile::InternalSwap(CloseCatalogFile* other) {
  using std::swap;
  swap(file_id_, other->file_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CloseCatalogFile::GetMetadata() const {
  protobuf_open_5fcatalog_5ffile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_open_5fcatalog_5ffile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::OpenCatalogFile* Arena::CreateMaybeMessage< ::CARTA::OpenCatalogFile >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::OpenCatalogFile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::OpenCatalogFileAck_PreviewDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::CARTA::OpenCatalogFileAck_PreviewDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::OpenCatalogFileAck_PreviewDataEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::OpenCatalogFileAck* Arena::CreateMaybeMessage< ::CARTA::OpenCatalogFileAck >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::OpenCatalogFileAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::CloseCatalogFile* Arena::CreateMaybeMessage< ::CARTA::CloseCatalogFile >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::CloseCatalogFile >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
