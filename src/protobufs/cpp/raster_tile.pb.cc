// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raster_tile.proto

#include "raster_tile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_raster_5ftile_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raster_5ftile_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TileData;
}  // namespace protobuf_raster_5ftile_2eproto
namespace CARTA {
class RasterTileSyncDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RasterTileSync>
      _instance;
} _RasterTileSync_default_instance_;
class RasterTileDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RasterTileData>
      _instance;
} _RasterTileData_default_instance_;
class TileDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TileData>
      _instance;
} _TileData_default_instance_;
}  // namespace CARTA
namespace protobuf_raster_5ftile_2eproto {
static void InitDefaultsRasterTileSync() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_RasterTileSync_default_instance_;
    new (ptr) ::CARTA::RasterTileSync();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::RasterTileSync::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RasterTileSync =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRasterTileSync}, {}};

static void InitDefaultsRasterTileData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_RasterTileData_default_instance_;
    new (ptr) ::CARTA::RasterTileData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::RasterTileData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RasterTileData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRasterTileData}, {
      &protobuf_raster_5ftile_2eproto::scc_info_TileData.base,}};

static void InitDefaultsTileData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_TileData_default_instance_;
    new (ptr) ::CARTA::TileData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::TileData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TileData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTileData}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RasterTileSync.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RasterTileData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TileData.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileSync, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileSync, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileSync, stokes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileSync, animation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileSync, end_sync_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileData, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileData, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileData, stokes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileData, compression_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileData, compression_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileData, animation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RasterTileData, tiles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::TileData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::TileData, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::TileData, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::TileData, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::TileData, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::TileData, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::TileData, image_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::TileData, nan_encodings_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::RasterTileSync)},
  { 10, -1, sizeof(::CARTA::RasterTileData)},
  { 22, -1, sizeof(::CARTA::TileData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_RasterTileSync_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_RasterTileData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_TileData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "raster_tile.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021raster_tile.proto\022\005CARTA\032\013enums.proto\""
      "j\n\016RasterTileSync\022\017\n\007file_id\030\001 \001(\017\022\017\n\007ch"
      "annel\030\002 \001(\017\022\016\n\006stokes\030\003 \001(\017\022\024\n\014animation"
      "_id\030\004 \001(\017\022\020\n\010end_sync\030\005 \001(\010\"\307\001\n\016RasterTi"
      "leData\022\017\n\007file_id\030\001 \001(\017\022\017\n\007channel\030\002 \001(\017"
      "\022\016\n\006stokes\030\003 \001(\017\0220\n\020compression_type\030\004 \001"
      "(\0162\026.CARTA.CompressionType\022\033\n\023compressio"
      "n_quality\030\005 \001(\002\022\024\n\014animation_id\030\006 \001(\017\022\036\n"
      "\005tiles\030\007 \003(\0132\017.CARTA.TileData\"y\n\010TileDat"
      "a\022\r\n\005layer\030\001 \001(\017\022\t\n\001x\030\002 \001(\017\022\t\n\001y\030\003 \001(\017\022\r"
      "\n\005width\030\004 \001(\017\022\016\n\006height\030\005 \001(\017\022\022\n\nimage_d"
      "ata\030\006 \001(\014\022\025\n\rnan_encodings\030\007 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 480);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raster_tile.proto", &protobuf_RegisterTypes);
  ::protobuf_enums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_raster_5ftile_2eproto
namespace CARTA {

// ===================================================================

void RasterTileSync::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RasterTileSync::kFileIdFieldNumber;
const int RasterTileSync::kChannelFieldNumber;
const int RasterTileSync::kStokesFieldNumber;
const int RasterTileSync::kAnimationIdFieldNumber;
const int RasterTileSync::kEndSyncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RasterTileSync::RasterTileSync()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raster_5ftile_2eproto::scc_info_RasterTileSync.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.RasterTileSync)
}
RasterTileSync::RasterTileSync(const RasterTileSync& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_sync_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(end_sync_));
  // @@protoc_insertion_point(copy_constructor:CARTA.RasterTileSync)
}

void RasterTileSync::SharedCtor() {
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_sync_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(end_sync_));
}

RasterTileSync::~RasterTileSync() {
  // @@protoc_insertion_point(destructor:CARTA.RasterTileSync)
  SharedDtor();
}

void RasterTileSync::SharedDtor() {
}

void RasterTileSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RasterTileSync::descriptor() {
  ::protobuf_raster_5ftile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raster_5ftile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RasterTileSync& RasterTileSync::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raster_5ftile_2eproto::scc_info_RasterTileSync.base);
  return *internal_default_instance();
}


void RasterTileSync::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.RasterTileSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_sync_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(end_sync_));
  _internal_metadata_.Clear();
}

bool RasterTileSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.RasterTileSync)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 stokes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &stokes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 animation_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &animation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool end_sync = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.RasterTileSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.RasterTileSync)
  return false;
#undef DO_
}

void RasterTileSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.RasterTileSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // sfixed32 channel = 2;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->channel(), output);
  }

  // sfixed32 stokes = 3;
  if (this->stokes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->stokes(), output);
  }

  // sfixed32 animation_id = 4;
  if (this->animation_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->animation_id(), output);
  }

  // bool end_sync = 5;
  if (this->end_sync() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->end_sync(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.RasterTileSync)
}

::google::protobuf::uint8* RasterTileSync::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.RasterTileSync)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // sfixed32 channel = 2;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->channel(), target);
  }

  // sfixed32 stokes = 3;
  if (this->stokes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->stokes(), target);
  }

  // sfixed32 animation_id = 4;
  if (this->animation_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->animation_id(), target);
  }

  // bool end_sync = 5;
  if (this->end_sync() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->end_sync(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.RasterTileSync)
  return target;
}

size_t RasterTileSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.RasterTileSync)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 channel = 2;
  if (this->channel() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 stokes = 3;
  if (this->stokes() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 animation_id = 4;
  if (this->animation_id() != 0) {
    total_size += 1 + 4;
  }

  // bool end_sync = 5;
  if (this->end_sync() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RasterTileSync::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.RasterTileSync)
  GOOGLE_DCHECK_NE(&from, this);
  const RasterTileSync* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RasterTileSync>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.RasterTileSync)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.RasterTileSync)
    MergeFrom(*source);
  }
}

void RasterTileSync::MergeFrom(const RasterTileSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.RasterTileSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.stokes() != 0) {
    set_stokes(from.stokes());
  }
  if (from.animation_id() != 0) {
    set_animation_id(from.animation_id());
  }
  if (from.end_sync() != 0) {
    set_end_sync(from.end_sync());
  }
}

void RasterTileSync::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.RasterTileSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RasterTileSync::CopyFrom(const RasterTileSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.RasterTileSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RasterTileSync::IsInitialized() const {
  return true;
}

void RasterTileSync::Swap(RasterTileSync* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RasterTileSync::InternalSwap(RasterTileSync* other) {
  using std::swap;
  swap(file_id_, other->file_id_);
  swap(channel_, other->channel_);
  swap(stokes_, other->stokes_);
  swap(animation_id_, other->animation_id_);
  swap(end_sync_, other->end_sync_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RasterTileSync::GetMetadata() const {
  protobuf_raster_5ftile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raster_5ftile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RasterTileData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RasterTileData::kFileIdFieldNumber;
const int RasterTileData::kChannelFieldNumber;
const int RasterTileData::kStokesFieldNumber;
const int RasterTileData::kCompressionTypeFieldNumber;
const int RasterTileData::kCompressionQualityFieldNumber;
const int RasterTileData::kAnimationIdFieldNumber;
const int RasterTileData::kTilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RasterTileData::RasterTileData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raster_5ftile_2eproto::scc_info_RasterTileData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.RasterTileData)
}
RasterTileData::RasterTileData(const RasterTileData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&animation_id_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(animation_id_));
  // @@protoc_insertion_point(copy_constructor:CARTA.RasterTileData)
}

void RasterTileData::SharedCtor() {
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animation_id_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(animation_id_));
}

RasterTileData::~RasterTileData() {
  // @@protoc_insertion_point(destructor:CARTA.RasterTileData)
  SharedDtor();
}

void RasterTileData::SharedDtor() {
}

void RasterTileData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RasterTileData::descriptor() {
  ::protobuf_raster_5ftile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raster_5ftile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RasterTileData& RasterTileData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raster_5ftile_2eproto::scc_info_RasterTileData.base);
  return *internal_default_instance();
}


void RasterTileData::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.RasterTileData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animation_id_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(animation_id_));
  _internal_metadata_.Clear();
}

bool RasterTileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.RasterTileData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 stokes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &stokes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.CompressionType compression_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compression_type(static_cast< ::CARTA::CompressionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float compression_quality = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &compression_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 animation_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &animation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.TileData tiles = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.RasterTileData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.RasterTileData)
  return false;
#undef DO_
}

void RasterTileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.RasterTileData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // sfixed32 channel = 2;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->channel(), output);
  }

  // sfixed32 stokes = 3;
  if (this->stokes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->stokes(), output);
  }

  // .CARTA.CompressionType compression_type = 4;
  if (this->compression_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->compression_type(), output);
  }

  // float compression_quality = 5;
  if (this->compression_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->compression_quality(), output);
  }

  // sfixed32 animation_id = 6;
  if (this->animation_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->animation_id(), output);
  }

  // repeated .CARTA.TileData tiles = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tiles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->tiles(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.RasterTileData)
}

::google::protobuf::uint8* RasterTileData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.RasterTileData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // sfixed32 channel = 2;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->channel(), target);
  }

  // sfixed32 stokes = 3;
  if (this->stokes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->stokes(), target);
  }

  // .CARTA.CompressionType compression_type = 4;
  if (this->compression_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->compression_type(), target);
  }

  // float compression_quality = 5;
  if (this->compression_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->compression_quality(), target);
  }

  // sfixed32 animation_id = 6;
  if (this->animation_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->animation_id(), target);
  }

  // repeated .CARTA.TileData tiles = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tiles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->tiles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.RasterTileData)
  return target;
}

size_t RasterTileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.RasterTileData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.TileData tiles = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->tiles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tiles(static_cast<int>(i)));
    }
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 channel = 2;
  if (this->channel() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 stokes = 3;
  if (this->stokes() != 0) {
    total_size += 1 + 4;
  }

  // .CARTA.CompressionType compression_type = 4;
  if (this->compression_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compression_type());
  }

  // float compression_quality = 5;
  if (this->compression_quality() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 animation_id = 6;
  if (this->animation_id() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RasterTileData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.RasterTileData)
  GOOGLE_DCHECK_NE(&from, this);
  const RasterTileData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RasterTileData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.RasterTileData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.RasterTileData)
    MergeFrom(*source);
  }
}

void RasterTileData::MergeFrom(const RasterTileData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.RasterTileData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.stokes() != 0) {
    set_stokes(from.stokes());
  }
  if (from.compression_type() != 0) {
    set_compression_type(from.compression_type());
  }
  if (from.compression_quality() != 0) {
    set_compression_quality(from.compression_quality());
  }
  if (from.animation_id() != 0) {
    set_animation_id(from.animation_id());
  }
}

void RasterTileData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.RasterTileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RasterTileData::CopyFrom(const RasterTileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.RasterTileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RasterTileData::IsInitialized() const {
  return true;
}

void RasterTileData::Swap(RasterTileData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RasterTileData::InternalSwap(RasterTileData* other) {
  using std::swap;
  CastToBase(&tiles_)->InternalSwap(CastToBase(&other->tiles_));
  swap(file_id_, other->file_id_);
  swap(channel_, other->channel_);
  swap(stokes_, other->stokes_);
  swap(compression_type_, other->compression_type_);
  swap(compression_quality_, other->compression_quality_);
  swap(animation_id_, other->animation_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RasterTileData::GetMetadata() const {
  protobuf_raster_5ftile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raster_5ftile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TileData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TileData::kLayerFieldNumber;
const int TileData::kXFieldNumber;
const int TileData::kYFieldNumber;
const int TileData::kWidthFieldNumber;
const int TileData::kHeightFieldNumber;
const int TileData::kImageDataFieldNumber;
const int TileData::kNanEncodingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TileData::TileData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raster_5ftile_2eproto::scc_info_TileData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.TileData)
}
TileData::TileData(const TileData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_data().size() > 0) {
    image_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
  nan_encodings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nan_encodings().size() > 0) {
    nan_encodings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nan_encodings_);
  }
  ::memcpy(&layer_, &from.layer_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&layer_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:CARTA.TileData)
}

void TileData::SharedCtor() {
  image_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nan_encodings_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(height_));
}

TileData::~TileData() {
  // @@protoc_insertion_point(destructor:CARTA.TileData)
  SharedDtor();
}

void TileData::SharedDtor() {
  image_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nan_encodings_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TileData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TileData::descriptor() {
  ::protobuf_raster_5ftile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raster_5ftile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TileData& TileData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raster_5ftile_2eproto::scc_info_TileData.base);
  return *internal_default_instance();
}


void TileData::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.TileData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nan_encodings_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&layer_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool TileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.TileData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 layer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nan_encodings = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nan_encodings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.TileData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.TileData)
  return false;
#undef DO_
}

void TileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.TileData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 layer = 1;
  if (this->layer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->layer(), output);
  }

  // sfixed32 x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->x(), output);
  }

  // sfixed32 y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->y(), output);
  }

  // sfixed32 width = 4;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->width(), output);
  }

  // sfixed32 height = 5;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->height(), output);
  }

  // bytes image_data = 6;
  if (this->image_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->image_data(), output);
  }

  // bytes nan_encodings = 7;
  if (this->nan_encodings().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->nan_encodings(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.TileData)
}

::google::protobuf::uint8* TileData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.TileData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 layer = 1;
  if (this->layer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->layer(), target);
  }

  // sfixed32 x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->x(), target);
  }

  // sfixed32 y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->y(), target);
  }

  // sfixed32 width = 4;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->width(), target);
  }

  // sfixed32 height = 5;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->height(), target);
  }

  // bytes image_data = 6;
  if (this->image_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->image_data(), target);
  }

  // bytes nan_encodings = 7;
  if (this->nan_encodings().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->nan_encodings(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.TileData)
  return target;
}

size_t TileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.TileData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes image_data = 6;
  if (this->image_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_data());
  }

  // bytes nan_encodings = 7;
  if (this->nan_encodings().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nan_encodings());
  }

  // sfixed32 layer = 1;
  if (this->layer() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 width = 4;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 height = 5;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.TileData)
  GOOGLE_DCHECK_NE(&from, this);
  const TileData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TileData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.TileData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.TileData)
    MergeFrom(*source);
  }
}

void TileData::MergeFrom(const TileData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.TileData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_data().size() > 0) {

    image_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_data_);
  }
  if (from.nan_encodings().size() > 0) {

    nan_encodings_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nan_encodings_);
  }
  if (from.layer() != 0) {
    set_layer(from.layer());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void TileData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.TileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileData::CopyFrom(const TileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.TileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileData::IsInitialized() const {
  return true;
}

void TileData::Swap(TileData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TileData::InternalSwap(TileData* other) {
  using std::swap;
  image_data_.Swap(&other->image_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nan_encodings_.Swap(&other->nan_encodings_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(layer_, other->layer_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TileData::GetMetadata() const {
  protobuf_raster_5ftile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raster_5ftile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::RasterTileSync* Arena::CreateMaybeMessage< ::CARTA::RasterTileSync >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::RasterTileSync >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::RasterTileData* Arena::CreateMaybeMessage< ::CARTA::RasterTileData >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::RasterTileData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::TileData* Arena::CreateMaybeMessage< ::CARTA::TileData >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::TileData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
