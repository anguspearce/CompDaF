// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tiles.proto

#include "tiles.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace CARTA {
class AddRequiredTilesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddRequiredTiles>
      _instance;
} _AddRequiredTiles_default_instance_;
class RemoveRequiredTilesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoveRequiredTiles>
      _instance;
} _RemoveRequiredTiles_default_instance_;
}  // namespace CARTA
namespace protobuf_tiles_2eproto {
static void InitDefaultsAddRequiredTiles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_AddRequiredTiles_default_instance_;
    new (ptr) ::CARTA::AddRequiredTiles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::AddRequiredTiles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddRequiredTiles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddRequiredTiles}, {}};

static void InitDefaultsRemoveRequiredTiles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_RemoveRequiredTiles_default_instance_;
    new (ptr) ::CARTA::RemoveRequiredTiles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::RemoveRequiredTiles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemoveRequiredTiles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemoveRequiredTiles}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AddRequiredTiles.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoveRequiredTiles.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AddRequiredTiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AddRequiredTiles, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AddRequiredTiles, tiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AddRequiredTiles, compression_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::AddRequiredTiles, compression_quality_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RemoveRequiredTiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RemoveRequiredTiles, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::RemoveRequiredTiles, tiles_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::AddRequiredTiles)},
  { 9, -1, sizeof(::CARTA::RemoveRequiredTiles)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_AddRequiredTiles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_RemoveRequiredTiles_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tiles.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013tiles.proto\022\005CARTA\032\013enums.proto\"\201\001\n\020Ad"
      "dRequiredTiles\022\017\n\007file_id\030\001 \001(\017\022\r\n\005tiles"
      "\030\002 \003(\017\0220\n\020compression_type\030\003 \001(\0162\026.CARTA"
      ".CompressionType\022\033\n\023compression_quality\030"
      "\004 \001(\002\"5\n\023RemoveRequiredTiles\022\017\n\007file_id\030"
      "\001 \001(\017\022\r\n\005tiles\030\002 \003(\017b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tiles.proto", &protobuf_RegisterTypes);
  ::protobuf_enums_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tiles_2eproto
namespace CARTA {

// ===================================================================

void AddRequiredTiles::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRequiredTiles::kFileIdFieldNumber;
const int AddRequiredTiles::kTilesFieldNumber;
const int AddRequiredTiles::kCompressionTypeFieldNumber;
const int AddRequiredTiles::kCompressionQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRequiredTiles::AddRequiredTiles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tiles_2eproto::scc_info_AddRequiredTiles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.AddRequiredTiles)
}
AddRequiredTiles::AddRequiredTiles(const AddRequiredTiles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&compression_quality_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(compression_quality_));
  // @@protoc_insertion_point(copy_constructor:CARTA.AddRequiredTiles)
}

void AddRequiredTiles::SharedCtor() {
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_quality_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(compression_quality_));
}

AddRequiredTiles::~AddRequiredTiles() {
  // @@protoc_insertion_point(destructor:CARTA.AddRequiredTiles)
  SharedDtor();
}

void AddRequiredTiles::SharedDtor() {
}

void AddRequiredTiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddRequiredTiles::descriptor() {
  ::protobuf_tiles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tiles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddRequiredTiles& AddRequiredTiles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tiles_2eproto::scc_info_AddRequiredTiles.base);
  return *internal_default_instance();
}


void AddRequiredTiles::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.AddRequiredTiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compression_quality_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(compression_quality_));
  _internal_metadata_.Clear();
}

bool AddRequiredTiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.AddRequiredTiles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed32 tiles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_tiles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 18u, input, this->mutable_tiles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.CompressionType compression_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compression_type(static_cast< ::CARTA::CompressionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float compression_quality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &compression_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.AddRequiredTiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.AddRequiredTiles)
  return false;
#undef DO_
}

void AddRequiredTiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.AddRequiredTiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // repeated sfixed32 tiles = 2;
  if (this->tiles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tiles_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32Array(
      this->tiles().data(), this->tiles_size(), output);
  }

  // .CARTA.CompressionType compression_type = 3;
  if (this->compression_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->compression_type(), output);
  }

  // float compression_quality = 4;
  if (this->compression_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->compression_quality(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.AddRequiredTiles)
}

::google::protobuf::uint8* AddRequiredTiles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.AddRequiredTiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // repeated sfixed32 tiles = 2;
  if (this->tiles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tiles_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32NoTagToArray(this->tiles_, target);
  }

  // .CARTA.CompressionType compression_type = 3;
  if (this->compression_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->compression_type(), target);
  }

  // float compression_quality = 4;
  if (this->compression_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->compression_quality(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.AddRequiredTiles)
  return target;
}

size_t AddRequiredTiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.AddRequiredTiles)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated sfixed32 tiles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tiles_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tiles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // .CARTA.CompressionType compression_type = 3;
  if (this->compression_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compression_type());
  }

  // float compression_quality = 4;
  if (this->compression_quality() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRequiredTiles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.AddRequiredTiles)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRequiredTiles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRequiredTiles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.AddRequiredTiles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.AddRequiredTiles)
    MergeFrom(*source);
  }
}

void AddRequiredTiles::MergeFrom(const AddRequiredTiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.AddRequiredTiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.compression_type() != 0) {
    set_compression_type(from.compression_type());
  }
  if (from.compression_quality() != 0) {
    set_compression_quality(from.compression_quality());
  }
}

void AddRequiredTiles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.AddRequiredTiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRequiredTiles::CopyFrom(const AddRequiredTiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.AddRequiredTiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequiredTiles::IsInitialized() const {
  return true;
}

void AddRequiredTiles::Swap(AddRequiredTiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRequiredTiles::InternalSwap(AddRequiredTiles* other) {
  using std::swap;
  tiles_.InternalSwap(&other->tiles_);
  swap(file_id_, other->file_id_);
  swap(compression_type_, other->compression_type_);
  swap(compression_quality_, other->compression_quality_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddRequiredTiles::GetMetadata() const {
  protobuf_tiles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tiles_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoveRequiredTiles::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveRequiredTiles::kFileIdFieldNumber;
const int RemoveRequiredTiles::kTilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveRequiredTiles::RemoveRequiredTiles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tiles_2eproto::scc_info_RemoveRequiredTiles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.RemoveRequiredTiles)
}
RemoveRequiredTiles::RemoveRequiredTiles(const RemoveRequiredTiles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_id_ = from.file_id_;
  // @@protoc_insertion_point(copy_constructor:CARTA.RemoveRequiredTiles)
}

void RemoveRequiredTiles::SharedCtor() {
  file_id_ = 0;
}

RemoveRequiredTiles::~RemoveRequiredTiles() {
  // @@protoc_insertion_point(destructor:CARTA.RemoveRequiredTiles)
  SharedDtor();
}

void RemoveRequiredTiles::SharedDtor() {
}

void RemoveRequiredTiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RemoveRequiredTiles::descriptor() {
  ::protobuf_tiles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tiles_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoveRequiredTiles& RemoveRequiredTiles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tiles_2eproto::scc_info_RemoveRequiredTiles.base);
  return *internal_default_instance();
}


void RemoveRequiredTiles::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.RemoveRequiredTiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  file_id_ = 0;
  _internal_metadata_.Clear();
}

bool RemoveRequiredTiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.RemoveRequiredTiles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sfixed32 tiles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_tiles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 18u, input, this->mutable_tiles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.RemoveRequiredTiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.RemoveRequiredTiles)
  return false;
#undef DO_
}

void RemoveRequiredTiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.RemoveRequiredTiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // repeated sfixed32 tiles = 2;
  if (this->tiles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tiles_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32Array(
      this->tiles().data(), this->tiles_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.RemoveRequiredTiles)
}

::google::protobuf::uint8* RemoveRequiredTiles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.RemoveRequiredTiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // repeated sfixed32 tiles = 2;
  if (this->tiles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _tiles_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32NoTagToArray(this->tiles_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.RemoveRequiredTiles)
  return target;
}

size_t RemoveRequiredTiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.RemoveRequiredTiles)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated sfixed32 tiles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tiles_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tiles_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveRequiredTiles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.RemoveRequiredTiles)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveRequiredTiles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoveRequiredTiles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.RemoveRequiredTiles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.RemoveRequiredTiles)
    MergeFrom(*source);
  }
}

void RemoveRequiredTiles::MergeFrom(const RemoveRequiredTiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.RemoveRequiredTiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
}

void RemoveRequiredTiles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.RemoveRequiredTiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRequiredTiles::CopyFrom(const RemoveRequiredTiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.RemoveRequiredTiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequiredTiles::IsInitialized() const {
  return true;
}

void RemoveRequiredTiles::Swap(RemoveRequiredTiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveRequiredTiles::InternalSwap(RemoveRequiredTiles* other) {
  using std::swap;
  tiles_.InternalSwap(&other->tiles_);
  swap(file_id_, other->file_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemoveRequiredTiles::GetMetadata() const {
  protobuf_tiles_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tiles_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::AddRequiredTiles* Arena::CreateMaybeMessage< ::CARTA::AddRequiredTiles >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::AddRequiredTiles >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::RemoveRequiredTiles* Arena::CreateMaybeMessage< ::CARTA::RemoveRequiredTiles >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::RemoveRequiredTiles >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
