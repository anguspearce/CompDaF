// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contour_image.proto

#include "contour_image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_contour_5fimage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_contour_5fimage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ContourSet;
}  // namespace protobuf_contour_5fimage_2eproto
namespace protobuf_defs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ImageBounds;
}  // namespace protobuf_defs_2eproto
namespace CARTA {
class ContourImageDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContourImageData>
      _instance;
} _ContourImageData_default_instance_;
class ContourSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContourSet>
      _instance;
} _ContourSet_default_instance_;
}  // namespace CARTA
namespace protobuf_contour_5fimage_2eproto {
static void InitDefaultsContourImageData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_ContourImageData_default_instance_;
    new (ptr) ::CARTA::ContourImageData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::ContourImageData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ContourImageData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsContourImageData}, {
      &protobuf_defs_2eproto::scc_info_ImageBounds.base,
      &protobuf_contour_5fimage_2eproto::scc_info_ContourSet.base,}};

static void InitDefaultsContourSet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_ContourSet_default_instance_;
    new (ptr) ::CARTA::ContourSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::ContourSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContourSet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContourSet}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ContourImageData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContourSet.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourImageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourImageData, file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourImageData, reference_file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourImageData, image_bounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourImageData, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourImageData, stokes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourImageData, contour_sets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourImageData, progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourSet, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourSet, decimation_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourSet, raw_coordinates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourSet, raw_start_indices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::ContourSet, uncompressed_coordinates_size_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::ContourImageData)},
  { 12, -1, sizeof(::CARTA::ContourSet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_ContourImageData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_ContourSet_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "contour_image.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023contour_image.proto\022\005CARTA\032\ndefs.proto"
      "\"\304\001\n\020ContourImageData\022\017\n\007file_id\030\001 \001(\017\022\031"
      "\n\021reference_file_id\030\002 \001(\007\022(\n\014image_bound"
      "s\030\003 \001(\0132\022.CARTA.ImageBounds\022\017\n\007channel\030\004"
      " \001(\017\022\016\n\006stokes\030\005 \001(\017\022\'\n\014contour_sets\030\006 \003"
      "(\0132\021.CARTA.ContourSet\022\020\n\010progress\030\007 \001(\001\""
      "\221\001\n\nContourSet\022\r\n\005level\030\001 \001(\001\022\031\n\021decimat"
      "ion_factor\030\002 \001(\005\022\027\n\017raw_coordinates\030\003 \001("
      "\014\022\031\n\021raw_start_indices\030\004 \001(\014\022%\n\035uncompre"
      "ssed_coordinates_size\030\005 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 395);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "contour_image.proto", &protobuf_RegisterTypes);
  ::protobuf_defs_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_contour_5fimage_2eproto
namespace CARTA {

// ===================================================================

void ContourImageData::InitAsDefaultInstance() {
  ::CARTA::_ContourImageData_default_instance_._instance.get_mutable()->image_bounds_ = const_cast< ::CARTA::ImageBounds*>(
      ::CARTA::ImageBounds::internal_default_instance());
}
void ContourImageData::clear_image_bounds() {
  if (GetArenaNoVirtual() == NULL && image_bounds_ != NULL) {
    delete image_bounds_;
  }
  image_bounds_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContourImageData::kFileIdFieldNumber;
const int ContourImageData::kReferenceFileIdFieldNumber;
const int ContourImageData::kImageBoundsFieldNumber;
const int ContourImageData::kChannelFieldNumber;
const int ContourImageData::kStokesFieldNumber;
const int ContourImageData::kContourSetsFieldNumber;
const int ContourImageData::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContourImageData::ContourImageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_contour_5fimage_2eproto::scc_info_ContourImageData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.ContourImageData)
}
ContourImageData::ContourImageData(const ContourImageData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      contour_sets_(from.contour_sets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image_bounds()) {
    image_bounds_ = new ::CARTA::ImageBounds(*from.image_bounds_);
  } else {
    image_bounds_ = NULL;
  }
  ::memcpy(&file_id_, &from.file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&file_id_)) + sizeof(progress_));
  // @@protoc_insertion_point(copy_constructor:CARTA.ContourImageData)
}

void ContourImageData::SharedCtor() {
  ::memset(&image_bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&image_bounds_)) + sizeof(progress_));
}

ContourImageData::~ContourImageData() {
  // @@protoc_insertion_point(destructor:CARTA.ContourImageData)
  SharedDtor();
}

void ContourImageData::SharedDtor() {
  if (this != internal_default_instance()) delete image_bounds_;
}

void ContourImageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContourImageData::descriptor() {
  ::protobuf_contour_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_contour_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContourImageData& ContourImageData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_contour_5fimage_2eproto::scc_info_ContourImageData.base);
  return *internal_default_instance();
}


void ContourImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.ContourImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contour_sets_.Clear();
  if (GetArenaNoVirtual() == NULL && image_bounds_ != NULL) {
    delete image_bounds_;
  }
  image_bounds_ = NULL;
  ::memset(&file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&file_id_)) + sizeof(progress_));
  _internal_metadata_.Clear();
}

bool ContourImageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.ContourImageData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed32 file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 reference_file_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &reference_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.ImageBounds image_bounds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 channel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 stokes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &stokes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.ContourSet contour_sets = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_contour_sets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double progress = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.ContourImageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.ContourImageData)
  return false;
#undef DO_
}

void ContourImageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.ContourImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->file_id(), output);
  }

  // fixed32 reference_file_id = 2;
  if (this->reference_file_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->reference_file_id(), output);
  }

  // .CARTA.ImageBounds image_bounds = 3;
  if (this->has_image_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_image_bounds(), output);
  }

  // sfixed32 channel = 4;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->channel(), output);
  }

  // sfixed32 stokes = 5;
  if (this->stokes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->stokes(), output);
  }

  // repeated .CARTA.ContourSet contour_sets = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contour_sets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->contour_sets(static_cast<int>(i)),
      output);
  }

  // double progress = 7;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.ContourImageData)
}

::google::protobuf::uint8* ContourImageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.ContourImageData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->file_id(), target);
  }

  // fixed32 reference_file_id = 2;
  if (this->reference_file_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->reference_file_id(), target);
  }

  // .CARTA.ImageBounds image_bounds = 3;
  if (this->has_image_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_image_bounds(), deterministic, target);
  }

  // sfixed32 channel = 4;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->channel(), target);
  }

  // sfixed32 stokes = 5;
  if (this->stokes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->stokes(), target);
  }

  // repeated .CARTA.ContourSet contour_sets = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contour_sets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->contour_sets(static_cast<int>(i)), deterministic, target);
  }

  // double progress = 7;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->progress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.ContourImageData)
  return target;
}

size_t ContourImageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.ContourImageData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.ContourSet contour_sets = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->contour_sets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->contour_sets(static_cast<int>(i)));
    }
  }

  // .CARTA.ImageBounds image_bounds = 3;
  if (this->has_image_bounds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *image_bounds_);
  }

  // sfixed32 file_id = 1;
  if (this->file_id() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 reference_file_id = 2;
  if (this->reference_file_id() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 channel = 4;
  if (this->channel() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 stokes = 5;
  if (this->stokes() != 0) {
    total_size += 1 + 4;
  }

  // double progress = 7;
  if (this->progress() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContourImageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.ContourImageData)
  GOOGLE_DCHECK_NE(&from, this);
  const ContourImageData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContourImageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.ContourImageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.ContourImageData)
    MergeFrom(*source);
  }
}

void ContourImageData::MergeFrom(const ContourImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.ContourImageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contour_sets_.MergeFrom(from.contour_sets_);
  if (from.has_image_bounds()) {
    mutable_image_bounds()->::CARTA::ImageBounds::MergeFrom(from.image_bounds());
  }
  if (from.file_id() != 0) {
    set_file_id(from.file_id());
  }
  if (from.reference_file_id() != 0) {
    set_reference_file_id(from.reference_file_id());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.stokes() != 0) {
    set_stokes(from.stokes());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
}

void ContourImageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.ContourImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContourImageData::CopyFrom(const ContourImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.ContourImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContourImageData::IsInitialized() const {
  return true;
}

void ContourImageData::Swap(ContourImageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContourImageData::InternalSwap(ContourImageData* other) {
  using std::swap;
  CastToBase(&contour_sets_)->InternalSwap(CastToBase(&other->contour_sets_));
  swap(image_bounds_, other->image_bounds_);
  swap(file_id_, other->file_id_);
  swap(reference_file_id_, other->reference_file_id_);
  swap(channel_, other->channel_);
  swap(stokes_, other->stokes_);
  swap(progress_, other->progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContourImageData::GetMetadata() const {
  protobuf_contour_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_contour_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContourSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContourSet::kLevelFieldNumber;
const int ContourSet::kDecimationFactorFieldNumber;
const int ContourSet::kRawCoordinatesFieldNumber;
const int ContourSet::kRawStartIndicesFieldNumber;
const int ContourSet::kUncompressedCoordinatesSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContourSet::ContourSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_contour_5fimage_2eproto::scc_info_ContourSet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.ContourSet)
}
ContourSet::ContourSet(const ContourSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_coordinates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_coordinates().size() > 0) {
    raw_coordinates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_coordinates_);
  }
  raw_start_indices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_start_indices().size() > 0) {
    raw_start_indices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_start_indices_);
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&uncompressed_coordinates_size_) -
    reinterpret_cast<char*>(&level_)) + sizeof(uncompressed_coordinates_size_));
  // @@protoc_insertion_point(copy_constructor:CARTA.ContourSet)
}

void ContourSet::SharedCtor() {
  raw_coordinates_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_start_indices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncompressed_coordinates_size_) -
      reinterpret_cast<char*>(&level_)) + sizeof(uncompressed_coordinates_size_));
}

ContourSet::~ContourSet() {
  // @@protoc_insertion_point(destructor:CARTA.ContourSet)
  SharedDtor();
}

void ContourSet::SharedDtor() {
  raw_coordinates_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_start_indices_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContourSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContourSet::descriptor() {
  ::protobuf_contour_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_contour_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContourSet& ContourSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_contour_5fimage_2eproto::scc_info_ContourSet.base);
  return *internal_default_instance();
}


void ContourSet::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.ContourSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_coordinates_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_start_indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncompressed_coordinates_size_) -
      reinterpret_cast<char*>(&level_)) + sizeof(uncompressed_coordinates_size_));
  _internal_metadata_.Clear();
}

bool ContourSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.ContourSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 decimation_factor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decimation_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw_coordinates = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_coordinates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw_start_indices = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_start_indices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 uncompressed_coordinates_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uncompressed_coordinates_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.ContourSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.ContourSet)
  return false;
#undef DO_
}

void ContourSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.ContourSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->level(), output);
  }

  // int32 decimation_factor = 2;
  if (this->decimation_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->decimation_factor(), output);
  }

  // bytes raw_coordinates = 3;
  if (this->raw_coordinates().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->raw_coordinates(), output);
  }

  // bytes raw_start_indices = 4;
  if (this->raw_start_indices().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->raw_start_indices(), output);
  }

  // int32 uncompressed_coordinates_size = 5;
  if (this->uncompressed_coordinates_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uncompressed_coordinates_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.ContourSet)
}

::google::protobuf::uint8* ContourSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.ContourSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->level(), target);
  }

  // int32 decimation_factor = 2;
  if (this->decimation_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->decimation_factor(), target);
  }

  // bytes raw_coordinates = 3;
  if (this->raw_coordinates().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->raw_coordinates(), target);
  }

  // bytes raw_start_indices = 4;
  if (this->raw_start_indices().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->raw_start_indices(), target);
  }

  // int32 uncompressed_coordinates_size = 5;
  if (this->uncompressed_coordinates_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->uncompressed_coordinates_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.ContourSet)
  return target;
}

size_t ContourSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.ContourSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes raw_coordinates = 3;
  if (this->raw_coordinates().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_coordinates());
  }

  // bytes raw_start_indices = 4;
  if (this->raw_start_indices().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_start_indices());
  }

  // double level = 1;
  if (this->level() != 0) {
    total_size += 1 + 8;
  }

  // int32 decimation_factor = 2;
  if (this->decimation_factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->decimation_factor());
  }

  // int32 uncompressed_coordinates_size = 5;
  if (this->uncompressed_coordinates_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uncompressed_coordinates_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContourSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.ContourSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ContourSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContourSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.ContourSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.ContourSet)
    MergeFrom(*source);
  }
}

void ContourSet::MergeFrom(const ContourSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.ContourSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_coordinates().size() > 0) {

    raw_coordinates_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_coordinates_);
  }
  if (from.raw_start_indices().size() > 0) {

    raw_start_indices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_start_indices_);
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.decimation_factor() != 0) {
    set_decimation_factor(from.decimation_factor());
  }
  if (from.uncompressed_coordinates_size() != 0) {
    set_uncompressed_coordinates_size(from.uncompressed_coordinates_size());
  }
}

void ContourSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.ContourSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContourSet::CopyFrom(const ContourSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.ContourSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContourSet::IsInitialized() const {
  return true;
}

void ContourSet::Swap(ContourSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContourSet::InternalSwap(ContourSet* other) {
  using std::swap;
  raw_coordinates_.Swap(&other->raw_coordinates_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_start_indices_.Swap(&other->raw_start_indices_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  swap(decimation_factor_, other->decimation_factor_);
  swap(uncompressed_coordinates_size_, other->uncompressed_coordinates_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContourSet::GetMetadata() const {
  protobuf_contour_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_contour_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::ContourImageData* Arena::CreateMaybeMessage< ::CARTA::ContourImageData >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::ContourImageData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::ContourSet* Arena::CreateMaybeMessage< ::CARTA::ContourSet >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::ContourSet >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
