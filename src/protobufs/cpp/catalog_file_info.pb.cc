// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: catalog_file_info.proto

#include "catalog_file_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_defs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CatalogHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CatalogFileInfo;
}  // namespace protobuf_defs_2eproto
namespace CARTA {
class CatalogFileInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatalogFileInfoRequest>
      _instance;
} _CatalogFileInfoRequest_default_instance_;
class CatalogFileInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatalogFileInfoResponse>
      _instance;
} _CatalogFileInfoResponse_default_instance_;
}  // namespace CARTA
namespace protobuf_catalog_5ffile_5finfo_2eproto {
static void InitDefaultsCatalogFileInfoRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_CatalogFileInfoRequest_default_instance_;
    new (ptr) ::CARTA::CatalogFileInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::CatalogFileInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CatalogFileInfoRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCatalogFileInfoRequest}, {}};

static void InitDefaultsCatalogFileInfoResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_CatalogFileInfoResponse_default_instance_;
    new (ptr) ::CARTA::CatalogFileInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::CatalogFileInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CatalogFileInfoResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCatalogFileInfoResponse}, {
      &protobuf_defs_2eproto::scc_info_CatalogFileInfo.base,
      &protobuf_defs_2eproto::scc_info_CatalogHeader.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CatalogFileInfoRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CatalogFileInfoResponse.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfoRequest, directory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfoRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfoResponse, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfoResponse, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfoResponse, file_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::CatalogFileInfoResponse, headers_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::CatalogFileInfoRequest)},
  { 7, -1, sizeof(::CARTA::CatalogFileInfoResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_CatalogFileInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_CatalogFileInfoResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "catalog_file_info.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027catalog_file_info.proto\022\005CARTA\032\ndefs.p"
      "roto\"9\n\026CatalogFileInfoRequest\022\021\n\tdirect"
      "ory\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"\215\001\n\027CatalogFileI"
      "nfoResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030"
      "\002 \001(\t\022)\n\tfile_info\030\003 \001(\0132\026.CARTA.Catalog"
      "FileInfo\022%\n\007headers\030\004 \003(\0132\024.CARTA.Catalo"
      "gHeaderb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "catalog_file_info.proto", &protobuf_RegisterTypes);
  ::protobuf_defs_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_catalog_5ffile_5finfo_2eproto
namespace CARTA {

// ===================================================================

void CatalogFileInfoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatalogFileInfoRequest::kDirectoryFieldNumber;
const int CatalogFileInfoRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatalogFileInfoRequest::CatalogFileInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_catalog_5ffile_5finfo_2eproto::scc_info_CatalogFileInfoRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.CatalogFileInfoRequest)
}
CatalogFileInfoRequest::CatalogFileInfoRequest(const CatalogFileInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.directory().size() > 0) {
    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:CARTA.CatalogFileInfoRequest)
}

void CatalogFileInfoRequest::SharedCtor() {
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CatalogFileInfoRequest::~CatalogFileInfoRequest() {
  // @@protoc_insertion_point(destructor:CARTA.CatalogFileInfoRequest)
  SharedDtor();
}

void CatalogFileInfoRequest::SharedDtor() {
  directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CatalogFileInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CatalogFileInfoRequest::descriptor() {
  ::protobuf_catalog_5ffile_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_catalog_5ffile_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CatalogFileInfoRequest& CatalogFileInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_catalog_5ffile_5finfo_2eproto::scc_info_CatalogFileInfoRequest.base);
  return *internal_default_instance();
}


void CatalogFileInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.CatalogFileInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CatalogFileInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.CatalogFileInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string directory = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->directory().data(), static_cast<int>(this->directory().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.CatalogFileInfoRequest.directory"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.CatalogFileInfoRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.CatalogFileInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.CatalogFileInfoRequest)
  return false;
#undef DO_
}

void CatalogFileInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.CatalogFileInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), static_cast<int>(this->directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFileInfoRequest.directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->directory(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFileInfoRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.CatalogFileInfoRequest)
}

::google::protobuf::uint8* CatalogFileInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.CatalogFileInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), static_cast<int>(this->directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFileInfoRequest.directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->directory(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFileInfoRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.CatalogFileInfoRequest)
  return target;
}

size_t CatalogFileInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.CatalogFileInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string directory = 1;
  if (this->directory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->directory());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogFileInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.CatalogFileInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogFileInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CatalogFileInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.CatalogFileInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.CatalogFileInfoRequest)
    MergeFrom(*source);
  }
}

void CatalogFileInfoRequest::MergeFrom(const CatalogFileInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.CatalogFileInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.directory().size() > 0) {

    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CatalogFileInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.CatalogFileInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogFileInfoRequest::CopyFrom(const CatalogFileInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.CatalogFileInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogFileInfoRequest::IsInitialized() const {
  return true;
}

void CatalogFileInfoRequest::Swap(CatalogFileInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatalogFileInfoRequest::InternalSwap(CatalogFileInfoRequest* other) {
  using std::swap;
  directory_.Swap(&other->directory_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CatalogFileInfoRequest::GetMetadata() const {
  protobuf_catalog_5ffile_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_catalog_5ffile_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CatalogFileInfoResponse::InitAsDefaultInstance() {
  ::CARTA::_CatalogFileInfoResponse_default_instance_._instance.get_mutable()->file_info_ = const_cast< ::CARTA::CatalogFileInfo*>(
      ::CARTA::CatalogFileInfo::internal_default_instance());
}
void CatalogFileInfoResponse::clear_file_info() {
  if (GetArenaNoVirtual() == NULL && file_info_ != NULL) {
    delete file_info_;
  }
  file_info_ = NULL;
}
void CatalogFileInfoResponse::clear_headers() {
  headers_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatalogFileInfoResponse::kSuccessFieldNumber;
const int CatalogFileInfoResponse::kMessageFieldNumber;
const int CatalogFileInfoResponse::kFileInfoFieldNumber;
const int CatalogFileInfoResponse::kHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatalogFileInfoResponse::CatalogFileInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_catalog_5ffile_5finfo_2eproto::scc_info_CatalogFileInfoResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.CatalogFileInfoResponse)
}
CatalogFileInfoResponse::CatalogFileInfoResponse(const CatalogFileInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_file_info()) {
    file_info_ = new ::CARTA::CatalogFileInfo(*from.file_info_);
  } else {
    file_info_ = NULL;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CARTA.CatalogFileInfoResponse)
}

void CatalogFileInfoResponse::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&file_info_)) + sizeof(success_));
}

CatalogFileInfoResponse::~CatalogFileInfoResponse() {
  // @@protoc_insertion_point(destructor:CARTA.CatalogFileInfoResponse)
  SharedDtor();
}

void CatalogFileInfoResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_info_;
}

void CatalogFileInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CatalogFileInfoResponse::descriptor() {
  ::protobuf_catalog_5ffile_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_catalog_5ffile_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CatalogFileInfoResponse& CatalogFileInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_catalog_5ffile_5finfo_2eproto::scc_info_CatalogFileInfoResponse.base);
  return *internal_default_instance();
}


void CatalogFileInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.CatalogFileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && file_info_ != NULL) {
    delete file_info_;
  }
  file_info_ = NULL;
  success_ = false;
  _internal_metadata_.Clear();
}

bool CatalogFileInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.CatalogFileInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.CatalogFileInfoResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .CARTA.CatalogFileInfo file_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.CatalogHeader headers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.CatalogFileInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.CatalogFileInfoResponse)
  return false;
#undef DO_
}

void CatalogFileInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.CatalogFileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFileInfoResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // .CARTA.CatalogFileInfo file_info = 3;
  if (this->has_file_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_file_info(), output);
  }

  // repeated .CARTA.CatalogHeader headers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->headers(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.CatalogFileInfoResponse)
}

::google::protobuf::uint8* CatalogFileInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.CatalogFileInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.CatalogFileInfoResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // .CARTA.CatalogFileInfo file_info = 3;
  if (this->has_file_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_file_info(), deterministic, target);
  }

  // repeated .CARTA.CatalogHeader headers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->headers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.CatalogFileInfoResponse)
  return target;
}

size_t CatalogFileInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.CatalogFileInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.CatalogHeader headers = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .CARTA.CatalogFileInfo file_info = 3;
  if (this->has_file_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *file_info_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogFileInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.CatalogFileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogFileInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CatalogFileInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.CatalogFileInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.CatalogFileInfoResponse)
    MergeFrom(*source);
  }
}

void CatalogFileInfoResponse::MergeFrom(const CatalogFileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.CatalogFileInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_file_info()) {
    mutable_file_info()->::CARTA::CatalogFileInfo::MergeFrom(from.file_info());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void CatalogFileInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.CatalogFileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogFileInfoResponse::CopyFrom(const CatalogFileInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.CatalogFileInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogFileInfoResponse::IsInitialized() const {
  return true;
}

void CatalogFileInfoResponse::Swap(CatalogFileInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatalogFileInfoResponse::InternalSwap(CatalogFileInfoResponse* other) {
  using std::swap;
  CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_info_, other->file_info_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CatalogFileInfoResponse::GetMetadata() const {
  protobuf_catalog_5ffile_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_catalog_5ffile_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::CatalogFileInfoRequest* Arena::CreateMaybeMessage< ::CARTA::CatalogFileInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::CatalogFileInfoRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::CatalogFileInfoResponse* Arena::CreateMaybeMessage< ::CARTA::CatalogFileInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::CatalogFileInfoResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
