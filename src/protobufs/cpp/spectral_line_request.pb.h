// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spectral_line_request.proto

#ifndef PROTOBUF_INCLUDED_spectral_5fline_5frequest_2eproto
#define PROTOBUF_INCLUDED_spectral_5fline_5frequest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "defs.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_spectral_5fline_5frequest_2eproto 

namespace protobuf_spectral_5fline_5frequest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_spectral_5fline_5frequest_2eproto
namespace CARTA {
class SpectralLineRequest;
class SpectralLineRequestDefaultTypeInternal;
extern SpectralLineRequestDefaultTypeInternal _SpectralLineRequest_default_instance_;
class SpectralLineResponse;
class SpectralLineResponseDefaultTypeInternal;
extern SpectralLineResponseDefaultTypeInternal _SpectralLineResponse_default_instance_;
class SpectralLineResponse_SpectralLineDataEntry_DoNotUse;
class SpectralLineResponse_SpectralLineDataEntry_DoNotUseDefaultTypeInternal;
extern SpectralLineResponse_SpectralLineDataEntry_DoNotUseDefaultTypeInternal _SpectralLineResponse_SpectralLineDataEntry_DoNotUse_default_instance_;
class SplataloguePing;
class SplataloguePingDefaultTypeInternal;
extern SplataloguePingDefaultTypeInternal _SplataloguePing_default_instance_;
class SplataloguePong;
class SplataloguePongDefaultTypeInternal;
extern SplataloguePongDefaultTypeInternal _SplataloguePong_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::SpectralLineRequest* Arena::CreateMaybeMessage<::CARTA::SpectralLineRequest>(Arena*);
template<> ::CARTA::SpectralLineResponse* Arena::CreateMaybeMessage<::CARTA::SpectralLineResponse>(Arena*);
template<> ::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse* Arena::CreateMaybeMessage<::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse>(Arena*);
template<> ::CARTA::SplataloguePing* Arena::CreateMaybeMessage<::CARTA::SplataloguePing>(Arena*);
template<> ::CARTA::SplataloguePong* Arena::CreateMaybeMessage<::CARTA::SplataloguePong>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class SplataloguePing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SplataloguePing) */ {
 public:
  SplataloguePing();
  virtual ~SplataloguePing();

  SplataloguePing(const SplataloguePing& from);

  inline SplataloguePing& operator=(const SplataloguePing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SplataloguePing(SplataloguePing&& from) noexcept
    : SplataloguePing() {
    *this = ::std::move(from);
  }

  inline SplataloguePing& operator=(SplataloguePing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SplataloguePing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplataloguePing* internal_default_instance() {
    return reinterpret_cast<const SplataloguePing*>(
               &_SplataloguePing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SplataloguePing* other);
  friend void swap(SplataloguePing& a, SplataloguePing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SplataloguePing* New() const final {
    return CreateMaybeMessage<SplataloguePing>(NULL);
  }

  SplataloguePing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SplataloguePing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SplataloguePing& from);
  void MergeFrom(const SplataloguePing& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplataloguePing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CARTA.SplataloguePing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_spectral_5fline_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SplataloguePong : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SplataloguePong) */ {
 public:
  SplataloguePong();
  virtual ~SplataloguePong();

  SplataloguePong(const SplataloguePong& from);

  inline SplataloguePong& operator=(const SplataloguePong& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SplataloguePong(SplataloguePong&& from) noexcept
    : SplataloguePong() {
    *this = ::std::move(from);
  }

  inline SplataloguePong& operator=(SplataloguePong&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SplataloguePong& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SplataloguePong* internal_default_instance() {
    return reinterpret_cast<const SplataloguePong*>(
               &_SplataloguePong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SplataloguePong* other);
  friend void swap(SplataloguePong& a, SplataloguePong& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SplataloguePong* New() const final {
    return CreateMaybeMessage<SplataloguePong>(NULL);
  }

  SplataloguePong* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SplataloguePong>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SplataloguePong& from);
  void MergeFrom(const SplataloguePong& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SplataloguePong* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:CARTA.SplataloguePong)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_spectral_5fline_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpectralLineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SpectralLineRequest) */ {
 public:
  SpectralLineRequest();
  virtual ~SpectralLineRequest();

  SpectralLineRequest(const SpectralLineRequest& from);

  inline SpectralLineRequest& operator=(const SpectralLineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpectralLineRequest(SpectralLineRequest&& from) noexcept
    : SpectralLineRequest() {
    *this = ::std::move(from);
  }

  inline SpectralLineRequest& operator=(SpectralLineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpectralLineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpectralLineRequest* internal_default_instance() {
    return reinterpret_cast<const SpectralLineRequest*>(
               &_SpectralLineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SpectralLineRequest* other);
  friend void swap(SpectralLineRequest& a, SpectralLineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpectralLineRequest* New() const final {
    return CreateMaybeMessage<SpectralLineRequest>(NULL);
  }

  SpectralLineRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpectralLineRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpectralLineRequest& from);
  void MergeFrom(const SpectralLineRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpectralLineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CARTA.DoubleBounds frequency_range = 1;
  bool has_frequency_range() const;
  void clear_frequency_range();
  static const int kFrequencyRangeFieldNumber = 1;
  private:
  const ::CARTA::DoubleBounds& _internal_frequency_range() const;
  public:
  const ::CARTA::DoubleBounds& frequency_range() const;
  ::CARTA::DoubleBounds* release_frequency_range();
  ::CARTA::DoubleBounds* mutable_frequency_range();
  void set_allocated_frequency_range(::CARTA::DoubleBounds* frequency_range);

  // double line_intensity_lower_limit = 2;
  void clear_line_intensity_lower_limit();
  static const int kLineIntensityLowerLimitFieldNumber = 2;
  double line_intensity_lower_limit() const;
  void set_line_intensity_lower_limit(double value);

  // @@protoc_insertion_point(class_scope:CARTA.SpectralLineRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::CARTA::DoubleBounds* frequency_range_;
  double line_intensity_lower_limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_spectral_5fline_5frequest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpectralLineResponse_SpectralLineDataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SpectralLineResponse_SpectralLineDataEntry_DoNotUse, 
    ::google::protobuf::uint32, ::CARTA::ColumnData,
    ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SpectralLineResponse_SpectralLineDataEntry_DoNotUse, 
    ::google::protobuf::uint32, ::CARTA::ColumnData,
    ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SpectralLineResponse_SpectralLineDataEntry_DoNotUse();
  SpectralLineResponse_SpectralLineDataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SpectralLineResponse_SpectralLineDataEntry_DoNotUse& other);
  static const SpectralLineResponse_SpectralLineDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SpectralLineResponse_SpectralLineDataEntry_DoNotUse*>(&_SpectralLineResponse_SpectralLineDataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SpectralLineResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SpectralLineResponse) */ {
 public:
  SpectralLineResponse();
  virtual ~SpectralLineResponse();

  SpectralLineResponse(const SpectralLineResponse& from);

  inline SpectralLineResponse& operator=(const SpectralLineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpectralLineResponse(SpectralLineResponse&& from) noexcept
    : SpectralLineResponse() {
    *this = ::std::move(from);
  }

  inline SpectralLineResponse& operator=(SpectralLineResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpectralLineResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpectralLineResponse* internal_default_instance() {
    return reinterpret_cast<const SpectralLineResponse*>(
               &_SpectralLineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SpectralLineResponse* other);
  friend void swap(SpectralLineResponse& a, SpectralLineResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpectralLineResponse* New() const final {
    return CreateMaybeMessage<SpectralLineResponse>(NULL);
  }

  SpectralLineResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpectralLineResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpectralLineResponse& from);
  void MergeFrom(const SpectralLineResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpectralLineResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .CARTA.CatalogHeader headers = 4;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 4;
  ::CARTA::CatalogHeader* mutable_headers(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogHeader >*
      mutable_headers();
  const ::CARTA::CatalogHeader& headers(int index) const;
  ::CARTA::CatalogHeader* add_headers();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogHeader >&
      headers() const;

  // map<fixed32, .CARTA.ColumnData> spectral_line_data = 5;
  int spectral_line_data_size() const;
  void clear_spectral_line_data();
  static const int kSpectralLineDataFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >&
      spectral_line_data() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >*
      mutable_spectral_line_data();

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // sfixed32 data_size = 3;
  void clear_data_size();
  static const int kDataSizeFieldNumber = 3;
  ::google::protobuf::int32 data_size() const;
  void set_data_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.SpectralLineResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogHeader > headers_;
  ::google::protobuf::internal::MapField<
      SpectralLineResponse_SpectralLineDataEntry_DoNotUse,
      ::google::protobuf::uint32, ::CARTA::ColumnData,
      ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > spectral_line_data_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool success_;
  ::google::protobuf::int32 data_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_spectral_5fline_5frequest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SplataloguePing

// -------------------------------------------------------------------

// SplataloguePong

// bool success = 1;
inline void SplataloguePong::clear_success() {
  success_ = false;
}
inline bool SplataloguePong::success() const {
  // @@protoc_insertion_point(field_get:CARTA.SplataloguePong.success)
  return success_;
}
inline void SplataloguePong::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SplataloguePong.success)
}

// string message = 2;
inline void SplataloguePong::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SplataloguePong::message() const {
  // @@protoc_insertion_point(field_get:CARTA.SplataloguePong.message)
  return message_.GetNoArena();
}
inline void SplataloguePong::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SplataloguePong.message)
}
#if LANG_CXX11
inline void SplataloguePong::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SplataloguePong.message)
}
#endif
inline void SplataloguePong::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SplataloguePong.message)
}
inline void SplataloguePong::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SplataloguePong.message)
}
inline ::std::string* SplataloguePong::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SplataloguePong.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SplataloguePong::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.SplataloguePong.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SplataloguePong::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SplataloguePong.message)
}

// -------------------------------------------------------------------

// SpectralLineRequest

// .CARTA.DoubleBounds frequency_range = 1;
inline bool SpectralLineRequest::has_frequency_range() const {
  return this != internal_default_instance() && frequency_range_ != NULL;
}
inline const ::CARTA::DoubleBounds& SpectralLineRequest::_internal_frequency_range() const {
  return *frequency_range_;
}
inline const ::CARTA::DoubleBounds& SpectralLineRequest::frequency_range() const {
  const ::CARTA::DoubleBounds* p = frequency_range_;
  // @@protoc_insertion_point(field_get:CARTA.SpectralLineRequest.frequency_range)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::DoubleBounds*>(
      &::CARTA::_DoubleBounds_default_instance_);
}
inline ::CARTA::DoubleBounds* SpectralLineRequest::release_frequency_range() {
  // @@protoc_insertion_point(field_release:CARTA.SpectralLineRequest.frequency_range)
  
  ::CARTA::DoubleBounds* temp = frequency_range_;
  frequency_range_ = NULL;
  return temp;
}
inline ::CARTA::DoubleBounds* SpectralLineRequest::mutable_frequency_range() {
  
  if (frequency_range_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::DoubleBounds>(GetArenaNoVirtual());
    frequency_range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.SpectralLineRequest.frequency_range)
  return frequency_range_;
}
inline void SpectralLineRequest::set_allocated_frequency_range(::CARTA::DoubleBounds* frequency_range) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(frequency_range_);
  }
  if (frequency_range) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frequency_range = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frequency_range, submessage_arena);
    }
    
  } else {
    
  }
  frequency_range_ = frequency_range;
  // @@protoc_insertion_point(field_set_allocated:CARTA.SpectralLineRequest.frequency_range)
}

// double line_intensity_lower_limit = 2;
inline void SpectralLineRequest::clear_line_intensity_lower_limit() {
  line_intensity_lower_limit_ = 0;
}
inline double SpectralLineRequest::line_intensity_lower_limit() const {
  // @@protoc_insertion_point(field_get:CARTA.SpectralLineRequest.line_intensity_lower_limit)
  return line_intensity_lower_limit_;
}
inline void SpectralLineRequest::set_line_intensity_lower_limit(double value) {
  
  line_intensity_lower_limit_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SpectralLineRequest.line_intensity_lower_limit)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SpectralLineResponse

// bool success = 1;
inline void SpectralLineResponse::clear_success() {
  success_ = false;
}
inline bool SpectralLineResponse::success() const {
  // @@protoc_insertion_point(field_get:CARTA.SpectralLineResponse.success)
  return success_;
}
inline void SpectralLineResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SpectralLineResponse.success)
}

// string message = 2;
inline void SpectralLineResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpectralLineResponse::message() const {
  // @@protoc_insertion_point(field_get:CARTA.SpectralLineResponse.message)
  return message_.GetNoArena();
}
inline void SpectralLineResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SpectralLineResponse.message)
}
#if LANG_CXX11
inline void SpectralLineResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SpectralLineResponse.message)
}
#endif
inline void SpectralLineResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SpectralLineResponse.message)
}
inline void SpectralLineResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SpectralLineResponse.message)
}
inline ::std::string* SpectralLineResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SpectralLineResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpectralLineResponse::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.SpectralLineResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpectralLineResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SpectralLineResponse.message)
}

// sfixed32 data_size = 3;
inline void SpectralLineResponse::clear_data_size() {
  data_size_ = 0;
}
inline ::google::protobuf::int32 SpectralLineResponse::data_size() const {
  // @@protoc_insertion_point(field_get:CARTA.SpectralLineResponse.data_size)
  return data_size_;
}
inline void SpectralLineResponse::set_data_size(::google::protobuf::int32 value) {
  
  data_size_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SpectralLineResponse.data_size)
}

// repeated .CARTA.CatalogHeader headers = 4;
inline int SpectralLineResponse::headers_size() const {
  return headers_.size();
}
inline ::CARTA::CatalogHeader* SpectralLineResponse::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.SpectralLineResponse.headers)
  return headers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogHeader >*
SpectralLineResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.SpectralLineResponse.headers)
  return &headers_;
}
inline const ::CARTA::CatalogHeader& SpectralLineResponse::headers(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.SpectralLineResponse.headers)
  return headers_.Get(index);
}
inline ::CARTA::CatalogHeader* SpectralLineResponse::add_headers() {
  // @@protoc_insertion_point(field_add:CARTA.SpectralLineResponse.headers)
  return headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::CatalogHeader >&
SpectralLineResponse::headers() const {
  // @@protoc_insertion_point(field_list:CARTA.SpectralLineResponse.headers)
  return headers_;
}

// map<fixed32, .CARTA.ColumnData> spectral_line_data = 5;
inline int SpectralLineResponse::spectral_line_data_size() const {
  return spectral_line_data_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >&
SpectralLineResponse::spectral_line_data() const {
  // @@protoc_insertion_point(field_map:CARTA.SpectralLineResponse.spectral_line_data)
  return spectral_line_data_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >*
SpectralLineResponse::mutable_spectral_line_data() {
  // @@protoc_insertion_point(field_mutable_map:CARTA.SpectralLineResponse.spectral_line_data)
  return spectral_line_data_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_spectral_5fline_5frequest_2eproto
