// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: defs.proto

#ifndef PROTOBUF_INCLUDED_defs_2eproto
#define PROTOBUF_INCLUDED_defs_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto 

namespace protobuf_defs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[25];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_defs_2eproto
namespace CARTA {
class AnimationFrame;
class AnimationFrameDefaultTypeInternal;
extern AnimationFrameDefaultTypeInternal _AnimationFrame_default_instance_;
class Beam;
class BeamDefaultTypeInternal;
extern BeamDefaultTypeInternal _Beam_default_instance_;
class CatalogFileInfo;
class CatalogFileInfoDefaultTypeInternal;
extern CatalogFileInfoDefaultTypeInternal _CatalogFileInfo_default_instance_;
class CatalogHeader;
class CatalogHeaderDefaultTypeInternal;
extern CatalogHeaderDefaultTypeInternal _CatalogHeader_default_instance_;
class CatalogImageBounds;
class CatalogImageBoundsDefaultTypeInternal;
extern CatalogImageBoundsDefaultTypeInternal _CatalogImageBounds_default_instance_;
class ColumnData;
class ColumnDataDefaultTypeInternal;
extern ColumnDataDefaultTypeInternal _ColumnData_default_instance_;
class Coosys;
class CoosysDefaultTypeInternal;
extern CoosysDefaultTypeInternal _Coosys_default_instance_;
class DirectoryInfo;
class DirectoryInfoDefaultTypeInternal;
extern DirectoryInfoDefaultTypeInternal _DirectoryInfo_default_instance_;
class DoubleBounds;
class DoubleBoundsDefaultTypeInternal;
extern DoubleBoundsDefaultTypeInternal _DoubleBounds_default_instance_;
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class FileInfoExtended;
class FileInfoExtendedDefaultTypeInternal;
extern FileInfoExtendedDefaultTypeInternal _FileInfoExtended_default_instance_;
class FilterConfig;
class FilterConfigDefaultTypeInternal;
extern FilterConfigDefaultTypeInternal _FilterConfig_default_instance_;
class FloatBounds;
class FloatBoundsDefaultTypeInternal;
extern FloatBoundsDefaultTypeInternal _FloatBounds_default_instance_;
class HeaderEntry;
class HeaderEntryDefaultTypeInternal;
extern HeaderEntryDefaultTypeInternal _HeaderEntry_default_instance_;
class Histogram;
class HistogramDefaultTypeInternal;
extern HistogramDefaultTypeInternal _Histogram_default_instance_;
class ImageBounds;
class ImageBoundsDefaultTypeInternal;
extern ImageBoundsDefaultTypeInternal _ImageBounds_default_instance_;
class IntBounds;
class IntBoundsDefaultTypeInternal;
extern IntBoundsDefaultTypeInternal _IntBounds_default_instance_;
class ListProgress;
class ListProgressDefaultTypeInternal;
extern ListProgressDefaultTypeInternal _ListProgress_default_instance_;
class MatchedFrameList;
class MatchedFrameListDefaultTypeInternal;
extern MatchedFrameListDefaultTypeInternal _MatchedFrameList_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RegionInfo;
class RegionInfoDefaultTypeInternal;
extern RegionInfoDefaultTypeInternal _RegionInfo_default_instance_;
class RegionStyle;
class RegionStyleDefaultTypeInternal;
extern RegionStyleDefaultTypeInternal _RegionStyle_default_instance_;
class SpatialProfile;
class SpatialProfileDefaultTypeInternal;
extern SpatialProfileDefaultTypeInternal _SpatialProfile_default_instance_;
class SpectralProfile;
class SpectralProfileDefaultTypeInternal;
extern SpectralProfileDefaultTypeInternal _SpectralProfile_default_instance_;
class StatisticsValue;
class StatisticsValueDefaultTypeInternal;
extern StatisticsValueDefaultTypeInternal _StatisticsValue_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::AnimationFrame* Arena::CreateMaybeMessage<::CARTA::AnimationFrame>(Arena*);
template<> ::CARTA::Beam* Arena::CreateMaybeMessage<::CARTA::Beam>(Arena*);
template<> ::CARTA::CatalogFileInfo* Arena::CreateMaybeMessage<::CARTA::CatalogFileInfo>(Arena*);
template<> ::CARTA::CatalogHeader* Arena::CreateMaybeMessage<::CARTA::CatalogHeader>(Arena*);
template<> ::CARTA::CatalogImageBounds* Arena::CreateMaybeMessage<::CARTA::CatalogImageBounds>(Arena*);
template<> ::CARTA::ColumnData* Arena::CreateMaybeMessage<::CARTA::ColumnData>(Arena*);
template<> ::CARTA::Coosys* Arena::CreateMaybeMessage<::CARTA::Coosys>(Arena*);
template<> ::CARTA::DirectoryInfo* Arena::CreateMaybeMessage<::CARTA::DirectoryInfo>(Arena*);
template<> ::CARTA::DoubleBounds* Arena::CreateMaybeMessage<::CARTA::DoubleBounds>(Arena*);
template<> ::CARTA::FileInfo* Arena::CreateMaybeMessage<::CARTA::FileInfo>(Arena*);
template<> ::CARTA::FileInfoExtended* Arena::CreateMaybeMessage<::CARTA::FileInfoExtended>(Arena*);
template<> ::CARTA::FilterConfig* Arena::CreateMaybeMessage<::CARTA::FilterConfig>(Arena*);
template<> ::CARTA::FloatBounds* Arena::CreateMaybeMessage<::CARTA::FloatBounds>(Arena*);
template<> ::CARTA::HeaderEntry* Arena::CreateMaybeMessage<::CARTA::HeaderEntry>(Arena*);
template<> ::CARTA::Histogram* Arena::CreateMaybeMessage<::CARTA::Histogram>(Arena*);
template<> ::CARTA::ImageBounds* Arena::CreateMaybeMessage<::CARTA::ImageBounds>(Arena*);
template<> ::CARTA::IntBounds* Arena::CreateMaybeMessage<::CARTA::IntBounds>(Arena*);
template<> ::CARTA::ListProgress* Arena::CreateMaybeMessage<::CARTA::ListProgress>(Arena*);
template<> ::CARTA::MatchedFrameList* Arena::CreateMaybeMessage<::CARTA::MatchedFrameList>(Arena*);
template<> ::CARTA::Point* Arena::CreateMaybeMessage<::CARTA::Point>(Arena*);
template<> ::CARTA::RegionInfo* Arena::CreateMaybeMessage<::CARTA::RegionInfo>(Arena*);
template<> ::CARTA::RegionStyle* Arena::CreateMaybeMessage<::CARTA::RegionStyle>(Arena*);
template<> ::CARTA::SpatialProfile* Arena::CreateMaybeMessage<::CARTA::SpatialProfile>(Arena*);
template<> ::CARTA::SpectralProfile* Arena::CreateMaybeMessage<::CARTA::SpectralProfile>(Arena*);
template<> ::CARTA::StatisticsValue* Arena::CreateMaybeMessage<::CARTA::StatisticsValue>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(NULL);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:CARTA.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.FileInfo) */ {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(FileInfo* other);
  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(NULL);
  }

  FileInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string HDU_list = 4;
  int hdu_list_size() const;
  void clear_hdu_list();
  static const int kHDUListFieldNumber = 4;
  const ::std::string& hdu_list(int index) const;
  ::std::string* mutable_hdu_list(int index);
  void set_hdu_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_hdu_list(int index, ::std::string&& value);
  #endif
  void set_hdu_list(int index, const char* value);
  void set_hdu_list(int index, const char* value, size_t size);
  ::std::string* add_hdu_list();
  void add_hdu_list(const ::std::string& value);
  #if LANG_CXX11
  void add_hdu_list(::std::string&& value);
  #endif
  void add_hdu_list(const char* value);
  void add_hdu_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hdu_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hdu_list();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // sfixed64 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // sfixed64 date = 5;
  void clear_date();
  static const int kDateFieldNumber = 5;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // .CARTA.FileType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::CARTA::FileType type() const;
  void set_type(::CARTA::FileType value);

  // @@protoc_insertion_point(class_scope:CARTA.FileInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hdu_list_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 date_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectoryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.DirectoryInfo) */ {
 public:
  DirectoryInfo();
  virtual ~DirectoryInfo();

  DirectoryInfo(const DirectoryInfo& from);

  inline DirectoryInfo& operator=(const DirectoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectoryInfo(DirectoryInfo&& from) noexcept
    : DirectoryInfo() {
    *this = ::std::move(from);
  }

  inline DirectoryInfo& operator=(DirectoryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectoryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectoryInfo* internal_default_instance() {
    return reinterpret_cast<const DirectoryInfo*>(
               &_DirectoryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DirectoryInfo* other);
  friend void swap(DirectoryInfo& a, DirectoryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectoryInfo* New() const final {
    return CreateMaybeMessage<DirectoryInfo>(NULL);
  }

  DirectoryInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DirectoryInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DirectoryInfo& from);
  void MergeFrom(const DirectoryInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectoryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // sfixed64 date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // sfixed32 item_count = 2;
  void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  ::google::protobuf::int32 item_count() const;
  void set_item_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.DirectoryInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 date_;
  ::google::protobuf::int32 item_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileInfoExtended : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.FileInfoExtended) */ {
 public:
  FileInfoExtended();
  virtual ~FileInfoExtended();

  FileInfoExtended(const FileInfoExtended& from);

  inline FileInfoExtended& operator=(const FileInfoExtended& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileInfoExtended(FileInfoExtended&& from) noexcept
    : FileInfoExtended() {
    *this = ::std::move(from);
  }

  inline FileInfoExtended& operator=(FileInfoExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfoExtended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfoExtended* internal_default_instance() {
    return reinterpret_cast<const FileInfoExtended*>(
               &_FileInfoExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FileInfoExtended* other);
  friend void swap(FileInfoExtended& a, FileInfoExtended& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileInfoExtended* New() const final {
    return CreateMaybeMessage<FileInfoExtended>(NULL);
  }

  FileInfoExtended* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileInfoExtended>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileInfoExtended& from);
  void MergeFrom(const FileInfoExtended& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfoExtended* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stokes_vals = 6;
  int stokes_vals_size() const;
  void clear_stokes_vals();
  static const int kStokesValsFieldNumber = 6;
  const ::std::string& stokes_vals(int index) const;
  ::std::string* mutable_stokes_vals(int index);
  void set_stokes_vals(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stokes_vals(int index, ::std::string&& value);
  #endif
  void set_stokes_vals(int index, const char* value);
  void set_stokes_vals(int index, const char* value, size_t size);
  ::std::string* add_stokes_vals();
  void add_stokes_vals(const ::std::string& value);
  #if LANG_CXX11
  void add_stokes_vals(::std::string&& value);
  #endif
  void add_stokes_vals(const char* value);
  void add_stokes_vals(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stokes_vals() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stokes_vals();

  // repeated .CARTA.HeaderEntry header_entries = 7;
  int header_entries_size() const;
  void clear_header_entries();
  static const int kHeaderEntriesFieldNumber = 7;
  ::CARTA::HeaderEntry* mutable_header_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::HeaderEntry >*
      mutable_header_entries();
  const ::CARTA::HeaderEntry& header_entries(int index) const;
  ::CARTA::HeaderEntry* add_header_entries();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::HeaderEntry >&
      header_entries() const;

  // repeated .CARTA.HeaderEntry computed_entries = 8;
  int computed_entries_size() const;
  void clear_computed_entries();
  static const int kComputedEntriesFieldNumber = 8;
  ::CARTA::HeaderEntry* mutable_computed_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::HeaderEntry >*
      mutable_computed_entries();
  const ::CARTA::HeaderEntry& computed_entries(int index) const;
  ::CARTA::HeaderEntry* add_computed_entries();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::HeaderEntry >&
      computed_entries() const;

  // sfixed32 dimensions = 1;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 1;
  ::google::protobuf::int32 dimensions() const;
  void set_dimensions(::google::protobuf::int32 value);

  // sfixed32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // sfixed32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // sfixed32 depth = 4;
  void clear_depth();
  static const int kDepthFieldNumber = 4;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // sfixed32 stokes = 5;
  void clear_stokes();
  static const int kStokesFieldNumber = 5;
  ::google::protobuf::int32 stokes() const;
  void set_stokes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.FileInfoExtended)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stokes_vals_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::HeaderEntry > header_entries_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::HeaderEntry > computed_entries_;
  ::google::protobuf::int32 dimensions_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 stokes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeaderEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.HeaderEntry) */ {
 public:
  HeaderEntry();
  virtual ~HeaderEntry();

  HeaderEntry(const HeaderEntry& from);

  inline HeaderEntry& operator=(const HeaderEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeaderEntry(HeaderEntry&& from) noexcept
    : HeaderEntry() {
    *this = ::std::move(from);
  }

  inline HeaderEntry& operator=(HeaderEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeaderEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeaderEntry* internal_default_instance() {
    return reinterpret_cast<const HeaderEntry*>(
               &_HeaderEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(HeaderEntry* other);
  friend void swap(HeaderEntry& a, HeaderEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeaderEntry* New() const final {
    return CreateMaybeMessage<HeaderEntry>(NULL);
  }

  HeaderEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeaderEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HeaderEntry& from);
  void MergeFrom(const HeaderEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string comment = 5;
  void clear_comment();
  static const int kCommentFieldNumber = 5;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // double numeric_value = 4;
  void clear_numeric_value();
  static const int kNumericValueFieldNumber = 4;
  double numeric_value() const;
  void set_numeric_value(double value);

  // .CARTA.EntryType entry_type = 3;
  void clear_entry_type();
  static const int kEntryTypeFieldNumber = 3;
  ::CARTA::EntryType entry_type() const;
  void set_entry_type(::CARTA::EntryType value);

  // @@protoc_insertion_point(class_scope:CARTA.HeaderEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  double numeric_value_;
  int entry_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IntBounds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.IntBounds) */ {
 public:
  IntBounds();
  virtual ~IntBounds();

  IntBounds(const IntBounds& from);

  inline IntBounds& operator=(const IntBounds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntBounds(IntBounds&& from) noexcept
    : IntBounds() {
    *this = ::std::move(from);
  }

  inline IntBounds& operator=(IntBounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IntBounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntBounds* internal_default_instance() {
    return reinterpret_cast<const IntBounds*>(
               &_IntBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(IntBounds* other);
  friend void swap(IntBounds& a, IntBounds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntBounds* New() const final {
    return CreateMaybeMessage<IntBounds>(NULL);
  }

  IntBounds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntBounds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntBounds& from);
  void MergeFrom(const IntBounds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntBounds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed32 min = 1;
  void clear_min();
  static const int kMinFieldNumber = 1;
  ::google::protobuf::int32 min() const;
  void set_min(::google::protobuf::int32 value);

  // sfixed32 max = 2;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  ::google::protobuf::int32 max() const;
  void set_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.IntBounds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 min_;
  ::google::protobuf::int32 max_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FloatBounds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.FloatBounds) */ {
 public:
  FloatBounds();
  virtual ~FloatBounds();

  FloatBounds(const FloatBounds& from);

  inline FloatBounds& operator=(const FloatBounds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FloatBounds(FloatBounds&& from) noexcept
    : FloatBounds() {
    *this = ::std::move(from);
  }

  inline FloatBounds& operator=(FloatBounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatBounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatBounds* internal_default_instance() {
    return reinterpret_cast<const FloatBounds*>(
               &_FloatBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(FloatBounds* other);
  friend void swap(FloatBounds& a, FloatBounds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FloatBounds* New() const final {
    return CreateMaybeMessage<FloatBounds>(NULL);
  }

  FloatBounds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FloatBounds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FloatBounds& from);
  void MergeFrom(const FloatBounds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatBounds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float min = 1;
  void clear_min();
  static const int kMinFieldNumber = 1;
  float min() const;
  void set_min(float value);

  // float max = 2;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  float max() const;
  void set_max(float value);

  // @@protoc_insertion_point(class_scope:CARTA.FloatBounds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float min_;
  float max_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DoubleBounds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.DoubleBounds) */ {
 public:
  DoubleBounds();
  virtual ~DoubleBounds();

  DoubleBounds(const DoubleBounds& from);

  inline DoubleBounds& operator=(const DoubleBounds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoubleBounds(DoubleBounds&& from) noexcept
    : DoubleBounds() {
    *this = ::std::move(from);
  }

  inline DoubleBounds& operator=(DoubleBounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleBounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleBounds* internal_default_instance() {
    return reinterpret_cast<const DoubleBounds*>(
               &_DoubleBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DoubleBounds* other);
  friend void swap(DoubleBounds& a, DoubleBounds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleBounds* New() const final {
    return CreateMaybeMessage<DoubleBounds>(NULL);
  }

  DoubleBounds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DoubleBounds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DoubleBounds& from);
  void MergeFrom(const DoubleBounds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleBounds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double min = 1;
  void clear_min();
  static const int kMinFieldNumber = 1;
  double min() const;
  void set_min(double value);

  // double max = 2;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  double max() const;
  void set_max(double value);

  // @@protoc_insertion_point(class_scope:CARTA.DoubleBounds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double min_;
  double max_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageBounds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ImageBounds) */ {
 public:
  ImageBounds();
  virtual ~ImageBounds();

  ImageBounds(const ImageBounds& from);

  inline ImageBounds& operator=(const ImageBounds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageBounds(ImageBounds&& from) noexcept
    : ImageBounds() {
    *this = ::std::move(from);
  }

  inline ImageBounds& operator=(ImageBounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageBounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageBounds* internal_default_instance() {
    return reinterpret_cast<const ImageBounds*>(
               &_ImageBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ImageBounds* other);
  friend void swap(ImageBounds& a, ImageBounds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageBounds* New() const final {
    return CreateMaybeMessage<ImageBounds>(NULL);
  }

  ImageBounds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageBounds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageBounds& from);
  void MergeFrom(const ImageBounds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageBounds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed32 x_min = 1;
  void clear_x_min();
  static const int kXMinFieldNumber = 1;
  ::google::protobuf::int32 x_min() const;
  void set_x_min(::google::protobuf::int32 value);

  // sfixed32 x_max = 2;
  void clear_x_max();
  static const int kXMaxFieldNumber = 2;
  ::google::protobuf::int32 x_max() const;
  void set_x_max(::google::protobuf::int32 value);

  // sfixed32 y_min = 3;
  void clear_y_min();
  static const int kYMinFieldNumber = 3;
  ::google::protobuf::int32 y_min() const;
  void set_y_min(::google::protobuf::int32 value);

  // sfixed32 y_max = 4;
  void clear_y_max();
  static const int kYMaxFieldNumber = 4;
  ::google::protobuf::int32 y_max() const;
  void set_y_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.ImageBounds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_min_;
  ::google::protobuf::int32 x_max_;
  ::google::protobuf::int32 y_min_;
  ::google::protobuf::int32 y_max_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnimationFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.AnimationFrame) */ {
 public:
  AnimationFrame();
  virtual ~AnimationFrame();

  AnimationFrame(const AnimationFrame& from);

  inline AnimationFrame& operator=(const AnimationFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnimationFrame(AnimationFrame&& from) noexcept
    : AnimationFrame() {
    *this = ::std::move(from);
  }

  inline AnimationFrame& operator=(AnimationFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnimationFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimationFrame* internal_default_instance() {
    return reinterpret_cast<const AnimationFrame*>(
               &_AnimationFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AnimationFrame* other);
  friend void swap(AnimationFrame& a, AnimationFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnimationFrame* New() const final {
    return CreateMaybeMessage<AnimationFrame>(NULL);
  }

  AnimationFrame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnimationFrame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnimationFrame& from);
  void MergeFrom(const AnimationFrame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed32 channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // sfixed32 stokes = 2;
  void clear_stokes();
  static const int kStokesFieldNumber = 2;
  ::google::protobuf::int32 stokes() const;
  void set_stokes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.AnimationFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 stokes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpatialProfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SpatialProfile) */ {
 public:
  SpatialProfile();
  virtual ~SpatialProfile();

  SpatialProfile(const SpatialProfile& from);

  inline SpatialProfile& operator=(const SpatialProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpatialProfile(SpatialProfile&& from) noexcept
    : SpatialProfile() {
    *this = ::std::move(from);
  }

  inline SpatialProfile& operator=(SpatialProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpatialProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpatialProfile* internal_default_instance() {
    return reinterpret_cast<const SpatialProfile*>(
               &_SpatialProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SpatialProfile* other);
  friend void swap(SpatialProfile& a, SpatialProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpatialProfile* New() const final {
    return CreateMaybeMessage<SpatialProfile>(NULL);
  }

  SpatialProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpatialProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpatialProfile& from);
  void MergeFrom(const SpatialProfile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes raw_values_fp32 = 3;
  void clear_raw_values_fp32();
  static const int kRawValuesFp32FieldNumber = 3;
  const ::std::string& raw_values_fp32() const;
  void set_raw_values_fp32(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_values_fp32(::std::string&& value);
  #endif
  void set_raw_values_fp32(const char* value);
  void set_raw_values_fp32(const void* value, size_t size);
  ::std::string* mutable_raw_values_fp32();
  ::std::string* release_raw_values_fp32();
  void set_allocated_raw_values_fp32(::std::string* raw_values_fp32);

  // string coordinate = 4;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 4;
  const ::std::string& coordinate() const;
  void set_coordinate(const ::std::string& value);
  #if LANG_CXX11
  void set_coordinate(::std::string&& value);
  #endif
  void set_coordinate(const char* value);
  void set_coordinate(const char* value, size_t size);
  ::std::string* mutable_coordinate();
  ::std::string* release_coordinate();
  void set_allocated_coordinate(::std::string* coordinate);

  // sfixed32 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int32 start() const;
  void set_start(::google::protobuf::int32 value);

  // sfixed32 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // sfixed32 mip = 5;
  void clear_mip();
  static const int kMipFieldNumber = 5;
  ::google::protobuf::int32 mip() const;
  void set_mip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.SpatialProfile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr raw_values_fp32_;
  ::google::protobuf::internal::ArenaStringPtr coordinate_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;
  ::google::protobuf::int32 mip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpectralProfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.SpectralProfile) */ {
 public:
  SpectralProfile();
  virtual ~SpectralProfile();

  SpectralProfile(const SpectralProfile& from);

  inline SpectralProfile& operator=(const SpectralProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpectralProfile(SpectralProfile&& from) noexcept
    : SpectralProfile() {
    *this = ::std::move(from);
  }

  inline SpectralProfile& operator=(SpectralProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpectralProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpectralProfile* internal_default_instance() {
    return reinterpret_cast<const SpectralProfile*>(
               &_SpectralProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SpectralProfile* other);
  friend void swap(SpectralProfile& a, SpectralProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpectralProfile* New() const final {
    return CreateMaybeMessage<SpectralProfile>(NULL);
  }

  SpectralProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpectralProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpectralProfile& from);
  void MergeFrom(const SpectralProfile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpectralProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string coordinate = 1;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 1;
  const ::std::string& coordinate() const;
  void set_coordinate(const ::std::string& value);
  #if LANG_CXX11
  void set_coordinate(::std::string&& value);
  #endif
  void set_coordinate(const char* value);
  void set_coordinate(const char* value, size_t size);
  ::std::string* mutable_coordinate();
  ::std::string* release_coordinate();
  void set_allocated_coordinate(::std::string* coordinate);

  // bytes raw_values_fp32 = 3;
  void clear_raw_values_fp32();
  static const int kRawValuesFp32FieldNumber = 3;
  const ::std::string& raw_values_fp32() const;
  void set_raw_values_fp32(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_values_fp32(::std::string&& value);
  #endif
  void set_raw_values_fp32(const char* value);
  void set_raw_values_fp32(const void* value, size_t size);
  ::std::string* mutable_raw_values_fp32();
  ::std::string* release_raw_values_fp32();
  void set_allocated_raw_values_fp32(::std::string* raw_values_fp32);

  // bytes raw_values_fp64 = 4;
  void clear_raw_values_fp64();
  static const int kRawValuesFp64FieldNumber = 4;
  const ::std::string& raw_values_fp64() const;
  void set_raw_values_fp64(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_values_fp64(::std::string&& value);
  #endif
  void set_raw_values_fp64(const char* value);
  void set_raw_values_fp64(const void* value, size_t size);
  ::std::string* mutable_raw_values_fp64();
  ::std::string* release_raw_values_fp64();
  void set_allocated_raw_values_fp64(::std::string* raw_values_fp64);

  // .CARTA.StatsType stats_type = 2;
  void clear_stats_type();
  static const int kStatsTypeFieldNumber = 2;
  ::CARTA::StatsType stats_type() const;
  void set_stats_type(::CARTA::StatsType value);

  // @@protoc_insertion_point(class_scope:CARTA.SpectralProfile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr coordinate_;
  ::google::protobuf::internal::ArenaStringPtr raw_values_fp32_;
  ::google::protobuf::internal::ArenaStringPtr raw_values_fp64_;
  int stats_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatisticsValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.StatisticsValue) */ {
 public:
  StatisticsValue();
  virtual ~StatisticsValue();

  StatisticsValue(const StatisticsValue& from);

  inline StatisticsValue& operator=(const StatisticsValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatisticsValue(StatisticsValue&& from) noexcept
    : StatisticsValue() {
    *this = ::std::move(from);
  }

  inline StatisticsValue& operator=(StatisticsValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatisticsValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatisticsValue* internal_default_instance() {
    return reinterpret_cast<const StatisticsValue*>(
               &_StatisticsValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(StatisticsValue* other);
  friend void swap(StatisticsValue& a, StatisticsValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatisticsValue* New() const final {
    return CreateMaybeMessage<StatisticsValue>(NULL);
  }

  StatisticsValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatisticsValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatisticsValue& from);
  void MergeFrom(const StatisticsValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  double value() const;
  void set_value(double value);

  // .CARTA.StatsType stats_type = 1;
  void clear_stats_type();
  static const int kStatsTypeFieldNumber = 1;
  ::CARTA::StatsType stats_type() const;
  void set_stats_type(::CARTA::StatsType value);

  // @@protoc_insertion_point(class_scope:CARTA.StatisticsValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double value_;
  int stats_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Histogram : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.Histogram) */ {
 public:
  Histogram();
  virtual ~Histogram();

  Histogram(const Histogram& from);

  inline Histogram& operator=(const Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Histogram(Histogram&& from) noexcept
    : Histogram() {
    *this = ::std::move(from);
  }

  inline Histogram& operator=(Histogram&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Histogram& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Histogram* internal_default_instance() {
    return reinterpret_cast<const Histogram*>(
               &_Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Histogram* other);
  friend void swap(Histogram& a, Histogram& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Histogram* New() const final {
    return CreateMaybeMessage<Histogram>(NULL);
  }

  Histogram* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Histogram>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Histogram& from);
  void MergeFrom(const Histogram& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Histogram* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sfixed32 bins = 5;
  int bins_size() const;
  void clear_bins();
  static const int kBinsFieldNumber = 5;
  ::google::protobuf::int32 bins(int index) const;
  void set_bins(int index, ::google::protobuf::int32 value);
  void add_bins(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bins() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bins();

  // sfixed32 channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // sfixed32 num_bins = 2;
  void clear_num_bins();
  static const int kNumBinsFieldNumber = 2;
  ::google::protobuf::int32 num_bins() const;
  void set_num_bins(::google::protobuf::int32 value);

  // double bin_width = 3;
  void clear_bin_width();
  static const int kBinWidthFieldNumber = 3;
  double bin_width() const;
  void set_bin_width(double value);

  // double first_bin_center = 4;
  void clear_first_bin_center();
  static const int kFirstBinCenterFieldNumber = 4;
  double first_bin_center() const;
  void set_first_bin_center(double value);

  // double mean = 6;
  void clear_mean();
  static const int kMeanFieldNumber = 6;
  double mean() const;
  void set_mean(double value);

  // double std_dev = 7;
  void clear_std_dev();
  static const int kStdDevFieldNumber = 7;
  double std_dev() const;
  void set_std_dev(double value);

  // @@protoc_insertion_point(class_scope:CARTA.Histogram)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bins_;
  mutable int _bins_cached_byte_size_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 num_bins_;
  double bin_width_;
  double first_bin_center_;
  double mean_;
  double std_dev_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.RegionInfo) */ {
 public:
  RegionInfo();
  virtual ~RegionInfo();

  RegionInfo(const RegionInfo& from);

  inline RegionInfo& operator=(const RegionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionInfo(RegionInfo&& from) noexcept
    : RegionInfo() {
    *this = ::std::move(from);
  }

  inline RegionInfo& operator=(RegionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionInfo* internal_default_instance() {
    return reinterpret_cast<const RegionInfo*>(
               &_RegionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(RegionInfo* other);
  friend void swap(RegionInfo& a, RegionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionInfo* New() const final {
    return CreateMaybeMessage<RegionInfo>(NULL);
  }

  RegionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegionInfo& from);
  void MergeFrom(const RegionInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARTA.Point control_points = 2;
  int control_points_size() const;
  void clear_control_points();
  static const int kControlPointsFieldNumber = 2;
  ::CARTA::Point* mutable_control_points(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::Point >*
      mutable_control_points();
  const ::CARTA::Point& control_points(int index) const;
  ::CARTA::Point* add_control_points();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::Point >&
      control_points() const;

  // .CARTA.RegionType region_type = 1;
  void clear_region_type();
  static const int kRegionTypeFieldNumber = 1;
  ::CARTA::RegionType region_type() const;
  void set_region_type(::CARTA::RegionType value);

  // float rotation = 3;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  float rotation() const;
  void set_rotation(float value);

  // @@protoc_insertion_point(class_scope:CARTA.RegionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::Point > control_points_;
  int region_type_;
  float rotation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegionStyle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.RegionStyle) */ {
 public:
  RegionStyle();
  virtual ~RegionStyle();

  RegionStyle(const RegionStyle& from);

  inline RegionStyle& operator=(const RegionStyle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegionStyle(RegionStyle&& from) noexcept
    : RegionStyle() {
    *this = ::std::move(from);
  }

  inline RegionStyle& operator=(RegionStyle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionStyle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegionStyle* internal_default_instance() {
    return reinterpret_cast<const RegionStyle*>(
               &_RegionStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(RegionStyle* other);
  friend void swap(RegionStyle& a, RegionStyle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegionStyle* New() const final {
    return CreateMaybeMessage<RegionStyle>(NULL);
  }

  RegionStyle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegionStyle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegionStyle& from);
  void MergeFrom(const RegionStyle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionStyle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sfixed32 dash_list = 4;
  int dash_list_size() const;
  void clear_dash_list();
  static const int kDashListFieldNumber = 4;
  ::google::protobuf::int32 dash_list(int index) const;
  void set_dash_list(int index, ::google::protobuf::int32 value);
  void add_dash_list(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dash_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dash_list();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string color = 2;
  void clear_color();
  static const int kColorFieldNumber = 2;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // sfixed32 line_width = 3;
  void clear_line_width();
  static const int kLineWidthFieldNumber = 3;
  ::google::protobuf::int32 line_width() const;
  void set_line_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.RegionStyle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dash_list_;
  mutable int _dash_list_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::int32 line_width_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CatalogFileInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.CatalogFileInfo) */ {
 public:
  CatalogFileInfo();
  virtual ~CatalogFileInfo();

  CatalogFileInfo(const CatalogFileInfo& from);

  inline CatalogFileInfo& operator=(const CatalogFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CatalogFileInfo(CatalogFileInfo&& from) noexcept
    : CatalogFileInfo() {
    *this = ::std::move(from);
  }

  inline CatalogFileInfo& operator=(CatalogFileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CatalogFileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CatalogFileInfo* internal_default_instance() {
    return reinterpret_cast<const CatalogFileInfo*>(
               &_CatalogFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(CatalogFileInfo* other);
  friend void swap(CatalogFileInfo& a, CatalogFileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CatalogFileInfo* New() const final {
    return CreateMaybeMessage<CatalogFileInfo>(NULL);
  }

  CatalogFileInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CatalogFileInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CatalogFileInfo& from);
  void MergeFrom(const CatalogFileInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogFileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CARTA.Coosys coosys = 5;
  int coosys_size() const;
  void clear_coosys();
  static const int kCoosysFieldNumber = 5;
  ::CARTA::Coosys* mutable_coosys(int index);
  ::google::protobuf::RepeatedPtrField< ::CARTA::Coosys >*
      mutable_coosys();
  const ::CARTA::Coosys& coosys(int index) const;
  ::CARTA::Coosys* add_coosys();
  const ::google::protobuf::RepeatedPtrField< ::CARTA::Coosys >&
      coosys() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // sfixed64 file_size = 3;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 3;
  ::google::protobuf::int64 file_size() const;
  void set_file_size(::google::protobuf::int64 value);

  // sfixed64 date = 6;
  void clear_date();
  static const int kDateFieldNumber = 6;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // .CARTA.CatalogFileType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::CARTA::CatalogFileType type() const;
  void set_type(::CARTA::CatalogFileType value);

  // @@protoc_insertion_point(class_scope:CARTA.CatalogFileInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::CARTA::Coosys > coosys_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int64 file_size_;
  ::google::protobuf::int64 date_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Coosys : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.Coosys) */ {
 public:
  Coosys();
  virtual ~Coosys();

  Coosys(const Coosys& from);

  inline Coosys& operator=(const Coosys& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Coosys(Coosys&& from) noexcept
    : Coosys() {
    *this = ::std::move(from);
  }

  inline Coosys& operator=(Coosys&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Coosys& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coosys* internal_default_instance() {
    return reinterpret_cast<const Coosys*>(
               &_Coosys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Coosys* other);
  friend void swap(Coosys& a, Coosys& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Coosys* New() const final {
    return CreateMaybeMessage<Coosys>(NULL);
  }

  Coosys* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Coosys>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Coosys& from);
  void MergeFrom(const Coosys& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coosys* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string equinox = 1;
  void clear_equinox();
  static const int kEquinoxFieldNumber = 1;
  const ::std::string& equinox() const;
  void set_equinox(const ::std::string& value);
  #if LANG_CXX11
  void set_equinox(::std::string&& value);
  #endif
  void set_equinox(const char* value);
  void set_equinox(const char* value, size_t size);
  ::std::string* mutable_equinox();
  ::std::string* release_equinox();
  void set_allocated_equinox(::std::string* equinox);

  // string epoch = 2;
  void clear_epoch();
  static const int kEpochFieldNumber = 2;
  const ::std::string& epoch() const;
  void set_epoch(const ::std::string& value);
  #if LANG_CXX11
  void set_epoch(::std::string&& value);
  #endif
  void set_epoch(const char* value);
  void set_epoch(const char* value, size_t size);
  ::std::string* mutable_epoch();
  ::std::string* release_epoch();
  void set_allocated_epoch(::std::string* epoch);

  // string system = 3;
  void clear_system();
  static const int kSystemFieldNumber = 3;
  const ::std::string& system() const;
  void set_system(const ::std::string& value);
  #if LANG_CXX11
  void set_system(::std::string&& value);
  #endif
  void set_system(const char* value);
  void set_system(const char* value, size_t size);
  ::std::string* mutable_system();
  ::std::string* release_system();
  void set_allocated_system(::std::string* system);

  // @@protoc_insertion_point(class_scope:CARTA.Coosys)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr equinox_;
  ::google::protobuf::internal::ArenaStringPtr epoch_;
  ::google::protobuf::internal::ArenaStringPtr system_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CatalogHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.CatalogHeader) */ {
 public:
  CatalogHeader();
  virtual ~CatalogHeader();

  CatalogHeader(const CatalogHeader& from);

  inline CatalogHeader& operator=(const CatalogHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CatalogHeader(CatalogHeader&& from) noexcept
    : CatalogHeader() {
    *this = ::std::move(from);
  }

  inline CatalogHeader& operator=(CatalogHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CatalogHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CatalogHeader* internal_default_instance() {
    return reinterpret_cast<const CatalogHeader*>(
               &_CatalogHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CatalogHeader* other);
  friend void swap(CatalogHeader& a, CatalogHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CatalogHeader* New() const final {
    return CreateMaybeMessage<CatalogHeader>(NULL);
  }

  CatalogHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CatalogHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CatalogHeader& from);
  void MergeFrom(const CatalogHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string units = 6;
  void clear_units();
  static const int kUnitsFieldNumber = 6;
  const ::std::string& units() const;
  void set_units(const ::std::string& value);
  #if LANG_CXX11
  void set_units(::std::string&& value);
  #endif
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  ::std::string* mutable_units();
  ::std::string* release_units();
  void set_allocated_units(::std::string* units);

  // .CARTA.ColumnType data_type = 2;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  ::CARTA::ColumnType data_type() const;
  void set_data_type(::CARTA::ColumnType value);

  // sfixed32 column_index = 3;
  void clear_column_index();
  static const int kColumnIndexFieldNumber = 3;
  ::google::protobuf::int32 column_index() const;
  void set_column_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.CatalogHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr units_;
  int data_type_;
  ::google::protobuf::int32 column_index_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ColumnData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ColumnData) */ {
 public:
  ColumnData();
  virtual ~ColumnData();

  ColumnData(const ColumnData& from);

  inline ColumnData& operator=(const ColumnData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ColumnData(ColumnData&& from) noexcept
    : ColumnData() {
    *this = ::std::move(from);
  }

  inline ColumnData& operator=(ColumnData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColumnData* internal_default_instance() {
    return reinterpret_cast<const ColumnData*>(
               &_ColumnData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ColumnData* other);
  friend void swap(ColumnData& a, ColumnData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ColumnData* New() const final {
    return CreateMaybeMessage<ColumnData>(NULL);
  }

  ColumnData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ColumnData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ColumnData& from);
  void MergeFrom(const ColumnData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string string_data = 2;
  int string_data_size() const;
  void clear_string_data();
  static const int kStringDataFieldNumber = 2;
  const ::std::string& string_data(int index) const;
  ::std::string* mutable_string_data(int index);
  void set_string_data(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_string_data(int index, ::std::string&& value);
  #endif
  void set_string_data(int index, const char* value);
  void set_string_data(int index, const char* value, size_t size);
  ::std::string* add_string_data();
  void add_string_data(const ::std::string& value);
  #if LANG_CXX11
  void add_string_data(::std::string&& value);
  #endif
  void add_string_data(const char* value);
  void add_string_data(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string_data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_data();

  // bytes binary_data = 3;
  void clear_binary_data();
  static const int kBinaryDataFieldNumber = 3;
  const ::std::string& binary_data() const;
  void set_binary_data(const ::std::string& value);
  #if LANG_CXX11
  void set_binary_data(::std::string&& value);
  #endif
  void set_binary_data(const char* value);
  void set_binary_data(const void* value, size_t size);
  ::std::string* mutable_binary_data();
  ::std::string* release_binary_data();
  void set_allocated_binary_data(::std::string* binary_data);

  // .CARTA.ColumnType data_type = 1;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  ::CARTA::ColumnType data_type() const;
  void set_data_type(::CARTA::ColumnType value);

  // @@protoc_insertion_point(class_scope:CARTA.ColumnData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_data_;
  ::google::protobuf::internal::ArenaStringPtr binary_data_;
  int data_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FilterConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.FilterConfig) */ {
 public:
  FilterConfig();
  virtual ~FilterConfig();

  FilterConfig(const FilterConfig& from);

  inline FilterConfig& operator=(const FilterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FilterConfig(FilterConfig&& from) noexcept
    : FilterConfig() {
    *this = ::std::move(from);
  }

  inline FilterConfig& operator=(FilterConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterConfig* internal_default_instance() {
    return reinterpret_cast<const FilterConfig*>(
               &_FilterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(FilterConfig* other);
  friend void swap(FilterConfig& a, FilterConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FilterConfig* New() const final {
    return CreateMaybeMessage<FilterConfig>(NULL);
  }

  FilterConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FilterConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FilterConfig& from);
  void MergeFrom(const FilterConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string column_name = 1;
  void clear_column_name();
  static const int kColumnNameFieldNumber = 1;
  const ::std::string& column_name() const;
  void set_column_name(const ::std::string& value);
  #if LANG_CXX11
  void set_column_name(::std::string&& value);
  #endif
  void set_column_name(const char* value);
  void set_column_name(const char* value, size_t size);
  ::std::string* mutable_column_name();
  ::std::string* release_column_name();
  void set_allocated_column_name(::std::string* column_name);

  // string sub_string = 5;
  void clear_sub_string();
  static const int kSubStringFieldNumber = 5;
  const ::std::string& sub_string() const;
  void set_sub_string(const ::std::string& value);
  #if LANG_CXX11
  void set_sub_string(::std::string&& value);
  #endif
  void set_sub_string(const char* value);
  void set_sub_string(const char* value, size_t size);
  ::std::string* mutable_sub_string();
  ::std::string* release_sub_string();
  void set_allocated_sub_string(::std::string* sub_string);

  // double value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  double value() const;
  void set_value(double value);

  // double secondary_value = 4;
  void clear_secondary_value();
  static const int kSecondaryValueFieldNumber = 4;
  double secondary_value() const;
  void set_secondary_value(double value);

  // .CARTA.ComparisonOperator comparison_operator = 2;
  void clear_comparison_operator();
  static const int kComparisonOperatorFieldNumber = 2;
  ::CARTA::ComparisonOperator comparison_operator() const;
  void set_comparison_operator(::CARTA::ComparisonOperator value);

  // @@protoc_insertion_point(class_scope:CARTA.FilterConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr column_name_;
  ::google::protobuf::internal::ArenaStringPtr sub_string_;
  double value_;
  double secondary_value_;
  int comparison_operator_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CatalogImageBounds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.CatalogImageBounds) */ {
 public:
  CatalogImageBounds();
  virtual ~CatalogImageBounds();

  CatalogImageBounds(const CatalogImageBounds& from);

  inline CatalogImageBounds& operator=(const CatalogImageBounds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CatalogImageBounds(CatalogImageBounds&& from) noexcept
    : CatalogImageBounds() {
    *this = ::std::move(from);
  }

  inline CatalogImageBounds& operator=(CatalogImageBounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CatalogImageBounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CatalogImageBounds* internal_default_instance() {
    return reinterpret_cast<const CatalogImageBounds*>(
               &_CatalogImageBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(CatalogImageBounds* other);
  friend void swap(CatalogImageBounds& a, CatalogImageBounds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CatalogImageBounds* New() const final {
    return CreateMaybeMessage<CatalogImageBounds>(NULL);
  }

  CatalogImageBounds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CatalogImageBounds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CatalogImageBounds& from);
  void MergeFrom(const CatalogImageBounds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogImageBounds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string x_column_name = 1;
  void clear_x_column_name();
  static const int kXColumnNameFieldNumber = 1;
  const ::std::string& x_column_name() const;
  void set_x_column_name(const ::std::string& value);
  #if LANG_CXX11
  void set_x_column_name(::std::string&& value);
  #endif
  void set_x_column_name(const char* value);
  void set_x_column_name(const char* value, size_t size);
  ::std::string* mutable_x_column_name();
  ::std::string* release_x_column_name();
  void set_allocated_x_column_name(::std::string* x_column_name);

  // string y_column_name = 2;
  void clear_y_column_name();
  static const int kYColumnNameFieldNumber = 2;
  const ::std::string& y_column_name() const;
  void set_y_column_name(const ::std::string& value);
  #if LANG_CXX11
  void set_y_column_name(::std::string&& value);
  #endif
  void set_y_column_name(const char* value);
  void set_y_column_name(const char* value, size_t size);
  ::std::string* mutable_y_column_name();
  ::std::string* release_y_column_name();
  void set_allocated_y_column_name(::std::string* y_column_name);

  // .CARTA.ImageBounds image_bounds = 3;
  bool has_image_bounds() const;
  void clear_image_bounds();
  static const int kImageBoundsFieldNumber = 3;
  private:
  const ::CARTA::ImageBounds& _internal_image_bounds() const;
  public:
  const ::CARTA::ImageBounds& image_bounds() const;
  ::CARTA::ImageBounds* release_image_bounds();
  ::CARTA::ImageBounds* mutable_image_bounds();
  void set_allocated_image_bounds(::CARTA::ImageBounds* image_bounds);

  // @@protoc_insertion_point(class_scope:CARTA.CatalogImageBounds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr x_column_name_;
  ::google::protobuf::internal::ArenaStringPtr y_column_name_;
  ::CARTA::ImageBounds* image_bounds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatchedFrameList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.MatchedFrameList) */ {
 public:
  MatchedFrameList();
  virtual ~MatchedFrameList();

  MatchedFrameList(const MatchedFrameList& from);

  inline MatchedFrameList& operator=(const MatchedFrameList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchedFrameList(MatchedFrameList&& from) noexcept
    : MatchedFrameList() {
    *this = ::std::move(from);
  }

  inline MatchedFrameList& operator=(MatchedFrameList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchedFrameList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchedFrameList* internal_default_instance() {
    return reinterpret_cast<const MatchedFrameList*>(
               &_MatchedFrameList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(MatchedFrameList* other);
  friend void swap(MatchedFrameList& a, MatchedFrameList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchedFrameList* New() const final {
    return CreateMaybeMessage<MatchedFrameList>(NULL);
  }

  MatchedFrameList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatchedFrameList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatchedFrameList& from);
  void MergeFrom(const MatchedFrameList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchedFrameList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float frame_numbers = 1;
  int frame_numbers_size() const;
  void clear_frame_numbers();
  static const int kFrameNumbersFieldNumber = 1;
  float frame_numbers(int index) const;
  void set_frame_numbers(int index, float value);
  void add_frame_numbers(float value);
  const ::google::protobuf::RepeatedField< float >&
      frame_numbers() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_frame_numbers();

  // @@protoc_insertion_point(class_scope:CARTA.MatchedFrameList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > frame_numbers_;
  mutable int _frame_numbers_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Beam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.Beam) */ {
 public:
  Beam();
  virtual ~Beam();

  Beam(const Beam& from);

  inline Beam& operator=(const Beam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Beam(Beam&& from) noexcept
    : Beam() {
    *this = ::std::move(from);
  }

  inline Beam& operator=(Beam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Beam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Beam* internal_default_instance() {
    return reinterpret_cast<const Beam*>(
               &_Beam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(Beam* other);
  friend void swap(Beam& a, Beam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Beam* New() const final {
    return CreateMaybeMessage<Beam>(NULL);
  }

  Beam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Beam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Beam& from);
  void MergeFrom(const Beam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Beam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sfixed32 channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // sfixed32 stokes = 2;
  void clear_stokes();
  static const int kStokesFieldNumber = 2;
  ::google::protobuf::int32 stokes() const;
  void set_stokes(::google::protobuf::int32 value);

  // float major_axis = 3;
  void clear_major_axis();
  static const int kMajorAxisFieldNumber = 3;
  float major_axis() const;
  void set_major_axis(float value);

  // float minor_axis = 4;
  void clear_minor_axis();
  static const int kMinorAxisFieldNumber = 4;
  float minor_axis() const;
  void set_minor_axis(float value);

  // float pa = 5;
  void clear_pa();
  static const int kPaFieldNumber = 5;
  float pa() const;
  void set_pa(float value);

  // @@protoc_insertion_point(class_scope:CARTA.Beam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 stokes_;
  float major_axis_;
  float minor_axis_;
  float pa_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListProgress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ListProgress) */ {
 public:
  ListProgress();
  virtual ~ListProgress();

  ListProgress(const ListProgress& from);

  inline ListProgress& operator=(const ListProgress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListProgress(ListProgress&& from) noexcept
    : ListProgress() {
    *this = ::std::move(from);
  }

  inline ListProgress& operator=(ListProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListProgress* internal_default_instance() {
    return reinterpret_cast<const ListProgress*>(
               &_ListProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ListProgress* other);
  friend void swap(ListProgress& a, ListProgress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListProgress* New() const final {
    return CreateMaybeMessage<ListProgress>(NULL);
  }

  ListProgress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListProgress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListProgress& from);
  void MergeFrom(const ListProgress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProgress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .CARTA.FileListType file_list_type = 1;
  void clear_file_list_type();
  static const int kFileListTypeFieldNumber = 1;
  ::CARTA::FileListType file_list_type() const;
  void set_file_list_type(::CARTA::FileListType value);

  // float percentage = 2;
  void clear_percentage();
  static const int kPercentageFieldNumber = 2;
  float percentage() const;
  void set_percentage(float value);

  // sfixed32 checked_count = 3;
  void clear_checked_count();
  static const int kCheckedCountFieldNumber = 3;
  ::google::protobuf::int32 checked_count() const;
  void set_checked_count(::google::protobuf::int32 value);

  // sfixed32 total_count = 4;
  void clear_total_count();
  static const int kTotalCountFieldNumber = 4;
  ::google::protobuf::int32 total_count() const;
  void set_total_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CARTA.ListProgress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int file_list_type_;
  float percentage_;
  ::google::protobuf::int32 checked_count_;
  ::google::protobuf::int32 total_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_defs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// float x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:CARTA.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Point.x)
}

// float y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:CARTA.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Point.y)
}

// -------------------------------------------------------------------

// FileInfo

// string name = 1;
inline void FileInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileInfo::name() const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfo.name)
  return name_.GetNoArena();
}
inline void FileInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.FileInfo.name)
}
#if LANG_CXX11
inline void FileInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.FileInfo.name)
}
#endif
inline void FileInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.FileInfo.name)
}
inline void FileInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.FileInfo.name)
}
inline ::std::string* FileInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.FileInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileInfo::release_name() {
  // @@protoc_insertion_point(field_release:CARTA.FileInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CARTA.FileInfo.name)
}

// .CARTA.FileType type = 2;
inline void FileInfo::clear_type() {
  type_ = 0;
}
inline ::CARTA::FileType FileInfo::type() const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfo.type)
  return static_cast< ::CARTA::FileType >(type_);
}
inline void FileInfo::set_type(::CARTA::FileType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FileInfo.type)
}

// sfixed64 size = 3;
inline void FileInfo::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileInfo::size() const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfo.size)
  return size_;
}
inline void FileInfo::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FileInfo.size)
}

// repeated string HDU_list = 4;
inline int FileInfo::hdu_list_size() const {
  return hdu_list_.size();
}
inline void FileInfo::clear_hdu_list() {
  hdu_list_.Clear();
}
inline const ::std::string& FileInfo::hdu_list(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfo.HDU_list)
  return hdu_list_.Get(index);
}
inline ::std::string* FileInfo::mutable_hdu_list(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.FileInfo.HDU_list)
  return hdu_list_.Mutable(index);
}
inline void FileInfo::set_hdu_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CARTA.FileInfo.HDU_list)
  hdu_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FileInfo::set_hdu_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CARTA.FileInfo.HDU_list)
  hdu_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FileInfo::set_hdu_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hdu_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CARTA.FileInfo.HDU_list)
}
inline void FileInfo::set_hdu_list(int index, const char* value, size_t size) {
  hdu_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CARTA.FileInfo.HDU_list)
}
inline ::std::string* FileInfo::add_hdu_list() {
  // @@protoc_insertion_point(field_add_mutable:CARTA.FileInfo.HDU_list)
  return hdu_list_.Add();
}
inline void FileInfo::add_hdu_list(const ::std::string& value) {
  hdu_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CARTA.FileInfo.HDU_list)
}
#if LANG_CXX11
inline void FileInfo::add_hdu_list(::std::string&& value) {
  hdu_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CARTA.FileInfo.HDU_list)
}
#endif
inline void FileInfo::add_hdu_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hdu_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CARTA.FileInfo.HDU_list)
}
inline void FileInfo::add_hdu_list(const char* value, size_t size) {
  hdu_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CARTA.FileInfo.HDU_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FileInfo::hdu_list() const {
  // @@protoc_insertion_point(field_list:CARTA.FileInfo.HDU_list)
  return hdu_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FileInfo::mutable_hdu_list() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.FileInfo.HDU_list)
  return &hdu_list_;
}

// sfixed64 date = 5;
inline void FileInfo::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileInfo::date() const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfo.date)
  return date_;
}
inline void FileInfo::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FileInfo.date)
}

// -------------------------------------------------------------------

// DirectoryInfo

// string name = 1;
inline void DirectoryInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirectoryInfo::name() const {
  // @@protoc_insertion_point(field_get:CARTA.DirectoryInfo.name)
  return name_.GetNoArena();
}
inline void DirectoryInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.DirectoryInfo.name)
}
#if LANG_CXX11
inline void DirectoryInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.DirectoryInfo.name)
}
#endif
inline void DirectoryInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.DirectoryInfo.name)
}
inline void DirectoryInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.DirectoryInfo.name)
}
inline ::std::string* DirectoryInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.DirectoryInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirectoryInfo::release_name() {
  // @@protoc_insertion_point(field_release:CARTA.DirectoryInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirectoryInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CARTA.DirectoryInfo.name)
}

// sfixed32 item_count = 2;
inline void DirectoryInfo::clear_item_count() {
  item_count_ = 0;
}
inline ::google::protobuf::int32 DirectoryInfo::item_count() const {
  // @@protoc_insertion_point(field_get:CARTA.DirectoryInfo.item_count)
  return item_count_;
}
inline void DirectoryInfo::set_item_count(::google::protobuf::int32 value) {
  
  item_count_ = value;
  // @@protoc_insertion_point(field_set:CARTA.DirectoryInfo.item_count)
}

// sfixed64 date = 3;
inline void DirectoryInfo::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DirectoryInfo::date() const {
  // @@protoc_insertion_point(field_get:CARTA.DirectoryInfo.date)
  return date_;
}
inline void DirectoryInfo::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:CARTA.DirectoryInfo.date)
}

// -------------------------------------------------------------------

// FileInfoExtended

// sfixed32 dimensions = 1;
inline void FileInfoExtended::clear_dimensions() {
  dimensions_ = 0;
}
inline ::google::protobuf::int32 FileInfoExtended::dimensions() const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfoExtended.dimensions)
  return dimensions_;
}
inline void FileInfoExtended::set_dimensions(::google::protobuf::int32 value) {
  
  dimensions_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FileInfoExtended.dimensions)
}

// sfixed32 width = 2;
inline void FileInfoExtended::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 FileInfoExtended::width() const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfoExtended.width)
  return width_;
}
inline void FileInfoExtended::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FileInfoExtended.width)
}

// sfixed32 height = 3;
inline void FileInfoExtended::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 FileInfoExtended::height() const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfoExtended.height)
  return height_;
}
inline void FileInfoExtended::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FileInfoExtended.height)
}

// sfixed32 depth = 4;
inline void FileInfoExtended::clear_depth() {
  depth_ = 0;
}
inline ::google::protobuf::int32 FileInfoExtended::depth() const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfoExtended.depth)
  return depth_;
}
inline void FileInfoExtended::set_depth(::google::protobuf::int32 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FileInfoExtended.depth)
}

// sfixed32 stokes = 5;
inline void FileInfoExtended::clear_stokes() {
  stokes_ = 0;
}
inline ::google::protobuf::int32 FileInfoExtended::stokes() const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfoExtended.stokes)
  return stokes_;
}
inline void FileInfoExtended::set_stokes(::google::protobuf::int32 value) {
  
  stokes_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FileInfoExtended.stokes)
}

// repeated string stokes_vals = 6;
inline int FileInfoExtended::stokes_vals_size() const {
  return stokes_vals_.size();
}
inline void FileInfoExtended::clear_stokes_vals() {
  stokes_vals_.Clear();
}
inline const ::std::string& FileInfoExtended::stokes_vals(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfoExtended.stokes_vals)
  return stokes_vals_.Get(index);
}
inline ::std::string* FileInfoExtended::mutable_stokes_vals(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.FileInfoExtended.stokes_vals)
  return stokes_vals_.Mutable(index);
}
inline void FileInfoExtended::set_stokes_vals(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CARTA.FileInfoExtended.stokes_vals)
  stokes_vals_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FileInfoExtended::set_stokes_vals(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CARTA.FileInfoExtended.stokes_vals)
  stokes_vals_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FileInfoExtended::set_stokes_vals(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stokes_vals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CARTA.FileInfoExtended.stokes_vals)
}
inline void FileInfoExtended::set_stokes_vals(int index, const char* value, size_t size) {
  stokes_vals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CARTA.FileInfoExtended.stokes_vals)
}
inline ::std::string* FileInfoExtended::add_stokes_vals() {
  // @@protoc_insertion_point(field_add_mutable:CARTA.FileInfoExtended.stokes_vals)
  return stokes_vals_.Add();
}
inline void FileInfoExtended::add_stokes_vals(const ::std::string& value) {
  stokes_vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CARTA.FileInfoExtended.stokes_vals)
}
#if LANG_CXX11
inline void FileInfoExtended::add_stokes_vals(::std::string&& value) {
  stokes_vals_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CARTA.FileInfoExtended.stokes_vals)
}
#endif
inline void FileInfoExtended::add_stokes_vals(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  stokes_vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CARTA.FileInfoExtended.stokes_vals)
}
inline void FileInfoExtended::add_stokes_vals(const char* value, size_t size) {
  stokes_vals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CARTA.FileInfoExtended.stokes_vals)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FileInfoExtended::stokes_vals() const {
  // @@protoc_insertion_point(field_list:CARTA.FileInfoExtended.stokes_vals)
  return stokes_vals_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FileInfoExtended::mutable_stokes_vals() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.FileInfoExtended.stokes_vals)
  return &stokes_vals_;
}

// repeated .CARTA.HeaderEntry header_entries = 7;
inline int FileInfoExtended::header_entries_size() const {
  return header_entries_.size();
}
inline void FileInfoExtended::clear_header_entries() {
  header_entries_.Clear();
}
inline ::CARTA::HeaderEntry* FileInfoExtended::mutable_header_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.FileInfoExtended.header_entries)
  return header_entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::HeaderEntry >*
FileInfoExtended::mutable_header_entries() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.FileInfoExtended.header_entries)
  return &header_entries_;
}
inline const ::CARTA::HeaderEntry& FileInfoExtended::header_entries(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfoExtended.header_entries)
  return header_entries_.Get(index);
}
inline ::CARTA::HeaderEntry* FileInfoExtended::add_header_entries() {
  // @@protoc_insertion_point(field_add:CARTA.FileInfoExtended.header_entries)
  return header_entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::HeaderEntry >&
FileInfoExtended::header_entries() const {
  // @@protoc_insertion_point(field_list:CARTA.FileInfoExtended.header_entries)
  return header_entries_;
}

// repeated .CARTA.HeaderEntry computed_entries = 8;
inline int FileInfoExtended::computed_entries_size() const {
  return computed_entries_.size();
}
inline void FileInfoExtended::clear_computed_entries() {
  computed_entries_.Clear();
}
inline ::CARTA::HeaderEntry* FileInfoExtended::mutable_computed_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.FileInfoExtended.computed_entries)
  return computed_entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::HeaderEntry >*
FileInfoExtended::mutable_computed_entries() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.FileInfoExtended.computed_entries)
  return &computed_entries_;
}
inline const ::CARTA::HeaderEntry& FileInfoExtended::computed_entries(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.FileInfoExtended.computed_entries)
  return computed_entries_.Get(index);
}
inline ::CARTA::HeaderEntry* FileInfoExtended::add_computed_entries() {
  // @@protoc_insertion_point(field_add:CARTA.FileInfoExtended.computed_entries)
  return computed_entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::HeaderEntry >&
FileInfoExtended::computed_entries() const {
  // @@protoc_insertion_point(field_list:CARTA.FileInfoExtended.computed_entries)
  return computed_entries_;
}

// -------------------------------------------------------------------

// HeaderEntry

// string name = 1;
inline void HeaderEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderEntry::name() const {
  // @@protoc_insertion_point(field_get:CARTA.HeaderEntry.name)
  return name_.GetNoArena();
}
inline void HeaderEntry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.HeaderEntry.name)
}
#if LANG_CXX11
inline void HeaderEntry::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.HeaderEntry.name)
}
#endif
inline void HeaderEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.HeaderEntry.name)
}
inline void HeaderEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.HeaderEntry.name)
}
inline ::std::string* HeaderEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.HeaderEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderEntry::release_name() {
  // @@protoc_insertion_point(field_release:CARTA.HeaderEntry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CARTA.HeaderEntry.name)
}

// string value = 2;
inline void HeaderEntry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderEntry::value() const {
  // @@protoc_insertion_point(field_get:CARTA.HeaderEntry.value)
  return value_.GetNoArena();
}
inline void HeaderEntry::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.HeaderEntry.value)
}
#if LANG_CXX11
inline void HeaderEntry::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.HeaderEntry.value)
}
#endif
inline void HeaderEntry::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.HeaderEntry.value)
}
inline void HeaderEntry::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.HeaderEntry.value)
}
inline ::std::string* HeaderEntry::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.HeaderEntry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderEntry::release_value() {
  // @@protoc_insertion_point(field_release:CARTA.HeaderEntry.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderEntry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:CARTA.HeaderEntry.value)
}

// .CARTA.EntryType entry_type = 3;
inline void HeaderEntry::clear_entry_type() {
  entry_type_ = 0;
}
inline ::CARTA::EntryType HeaderEntry::entry_type() const {
  // @@protoc_insertion_point(field_get:CARTA.HeaderEntry.entry_type)
  return static_cast< ::CARTA::EntryType >(entry_type_);
}
inline void HeaderEntry::set_entry_type(::CARTA::EntryType value) {
  
  entry_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.HeaderEntry.entry_type)
}

// double numeric_value = 4;
inline void HeaderEntry::clear_numeric_value() {
  numeric_value_ = 0;
}
inline double HeaderEntry::numeric_value() const {
  // @@protoc_insertion_point(field_get:CARTA.HeaderEntry.numeric_value)
  return numeric_value_;
}
inline void HeaderEntry::set_numeric_value(double value) {
  
  numeric_value_ = value;
  // @@protoc_insertion_point(field_set:CARTA.HeaderEntry.numeric_value)
}

// string comment = 5;
inline void HeaderEntry::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeaderEntry::comment() const {
  // @@protoc_insertion_point(field_get:CARTA.HeaderEntry.comment)
  return comment_.GetNoArena();
}
inline void HeaderEntry::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.HeaderEntry.comment)
}
#if LANG_CXX11
inline void HeaderEntry::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.HeaderEntry.comment)
}
#endif
inline void HeaderEntry::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.HeaderEntry.comment)
}
inline void HeaderEntry::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.HeaderEntry.comment)
}
inline ::std::string* HeaderEntry::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.HeaderEntry.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeaderEntry::release_comment() {
  // @@protoc_insertion_point(field_release:CARTA.HeaderEntry.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeaderEntry::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:CARTA.HeaderEntry.comment)
}

// -------------------------------------------------------------------

// IntBounds

// sfixed32 min = 1;
inline void IntBounds::clear_min() {
  min_ = 0;
}
inline ::google::protobuf::int32 IntBounds::min() const {
  // @@protoc_insertion_point(field_get:CARTA.IntBounds.min)
  return min_;
}
inline void IntBounds::set_min(::google::protobuf::int32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:CARTA.IntBounds.min)
}

// sfixed32 max = 2;
inline void IntBounds::clear_max() {
  max_ = 0;
}
inline ::google::protobuf::int32 IntBounds::max() const {
  // @@protoc_insertion_point(field_get:CARTA.IntBounds.max)
  return max_;
}
inline void IntBounds::set_max(::google::protobuf::int32 value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:CARTA.IntBounds.max)
}

// -------------------------------------------------------------------

// FloatBounds

// float min = 1;
inline void FloatBounds::clear_min() {
  min_ = 0;
}
inline float FloatBounds::min() const {
  // @@protoc_insertion_point(field_get:CARTA.FloatBounds.min)
  return min_;
}
inline void FloatBounds::set_min(float value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FloatBounds.min)
}

// float max = 2;
inline void FloatBounds::clear_max() {
  max_ = 0;
}
inline float FloatBounds::max() const {
  // @@protoc_insertion_point(field_get:CARTA.FloatBounds.max)
  return max_;
}
inline void FloatBounds::set_max(float value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FloatBounds.max)
}

// -------------------------------------------------------------------

// DoubleBounds

// double min = 1;
inline void DoubleBounds::clear_min() {
  min_ = 0;
}
inline double DoubleBounds::min() const {
  // @@protoc_insertion_point(field_get:CARTA.DoubleBounds.min)
  return min_;
}
inline void DoubleBounds::set_min(double value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:CARTA.DoubleBounds.min)
}

// double max = 2;
inline void DoubleBounds::clear_max() {
  max_ = 0;
}
inline double DoubleBounds::max() const {
  // @@protoc_insertion_point(field_get:CARTA.DoubleBounds.max)
  return max_;
}
inline void DoubleBounds::set_max(double value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:CARTA.DoubleBounds.max)
}

// -------------------------------------------------------------------

// ImageBounds

// sfixed32 x_min = 1;
inline void ImageBounds::clear_x_min() {
  x_min_ = 0;
}
inline ::google::protobuf::int32 ImageBounds::x_min() const {
  // @@protoc_insertion_point(field_get:CARTA.ImageBounds.x_min)
  return x_min_;
}
inline void ImageBounds::set_x_min(::google::protobuf::int32 value) {
  
  x_min_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ImageBounds.x_min)
}

// sfixed32 x_max = 2;
inline void ImageBounds::clear_x_max() {
  x_max_ = 0;
}
inline ::google::protobuf::int32 ImageBounds::x_max() const {
  // @@protoc_insertion_point(field_get:CARTA.ImageBounds.x_max)
  return x_max_;
}
inline void ImageBounds::set_x_max(::google::protobuf::int32 value) {
  
  x_max_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ImageBounds.x_max)
}

// sfixed32 y_min = 3;
inline void ImageBounds::clear_y_min() {
  y_min_ = 0;
}
inline ::google::protobuf::int32 ImageBounds::y_min() const {
  // @@protoc_insertion_point(field_get:CARTA.ImageBounds.y_min)
  return y_min_;
}
inline void ImageBounds::set_y_min(::google::protobuf::int32 value) {
  
  y_min_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ImageBounds.y_min)
}

// sfixed32 y_max = 4;
inline void ImageBounds::clear_y_max() {
  y_max_ = 0;
}
inline ::google::protobuf::int32 ImageBounds::y_max() const {
  // @@protoc_insertion_point(field_get:CARTA.ImageBounds.y_max)
  return y_max_;
}
inline void ImageBounds::set_y_max(::google::protobuf::int32 value) {
  
  y_max_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ImageBounds.y_max)
}

// -------------------------------------------------------------------

// AnimationFrame

// sfixed32 channel = 1;
inline void AnimationFrame::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 AnimationFrame::channel() const {
  // @@protoc_insertion_point(field_get:CARTA.AnimationFrame.channel)
  return channel_;
}
inline void AnimationFrame::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CARTA.AnimationFrame.channel)
}

// sfixed32 stokes = 2;
inline void AnimationFrame::clear_stokes() {
  stokes_ = 0;
}
inline ::google::protobuf::int32 AnimationFrame::stokes() const {
  // @@protoc_insertion_point(field_get:CARTA.AnimationFrame.stokes)
  return stokes_;
}
inline void AnimationFrame::set_stokes(::google::protobuf::int32 value) {
  
  stokes_ = value;
  // @@protoc_insertion_point(field_set:CARTA.AnimationFrame.stokes)
}

// -------------------------------------------------------------------

// SpatialProfile

// sfixed32 start = 1;
inline void SpatialProfile::clear_start() {
  start_ = 0;
}
inline ::google::protobuf::int32 SpatialProfile::start() const {
  // @@protoc_insertion_point(field_get:CARTA.SpatialProfile.start)
  return start_;
}
inline void SpatialProfile::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SpatialProfile.start)
}

// sfixed32 end = 2;
inline void SpatialProfile::clear_end() {
  end_ = 0;
}
inline ::google::protobuf::int32 SpatialProfile::end() const {
  // @@protoc_insertion_point(field_get:CARTA.SpatialProfile.end)
  return end_;
}
inline void SpatialProfile::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SpatialProfile.end)
}

// bytes raw_values_fp32 = 3;
inline void SpatialProfile::clear_raw_values_fp32() {
  raw_values_fp32_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpatialProfile::raw_values_fp32() const {
  // @@protoc_insertion_point(field_get:CARTA.SpatialProfile.raw_values_fp32)
  return raw_values_fp32_.GetNoArena();
}
inline void SpatialProfile::set_raw_values_fp32(const ::std::string& value) {
  
  raw_values_fp32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SpatialProfile.raw_values_fp32)
}
#if LANG_CXX11
inline void SpatialProfile::set_raw_values_fp32(::std::string&& value) {
  
  raw_values_fp32_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SpatialProfile.raw_values_fp32)
}
#endif
inline void SpatialProfile::set_raw_values_fp32(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_values_fp32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SpatialProfile.raw_values_fp32)
}
inline void SpatialProfile::set_raw_values_fp32(const void* value, size_t size) {
  
  raw_values_fp32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SpatialProfile.raw_values_fp32)
}
inline ::std::string* SpatialProfile::mutable_raw_values_fp32() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SpatialProfile.raw_values_fp32)
  return raw_values_fp32_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpatialProfile::release_raw_values_fp32() {
  // @@protoc_insertion_point(field_release:CARTA.SpatialProfile.raw_values_fp32)
  
  return raw_values_fp32_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpatialProfile::set_allocated_raw_values_fp32(::std::string* raw_values_fp32) {
  if (raw_values_fp32 != NULL) {
    
  } else {
    
  }
  raw_values_fp32_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_values_fp32);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SpatialProfile.raw_values_fp32)
}

// string coordinate = 4;
inline void SpatialProfile::clear_coordinate() {
  coordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpatialProfile::coordinate() const {
  // @@protoc_insertion_point(field_get:CARTA.SpatialProfile.coordinate)
  return coordinate_.GetNoArena();
}
inline void SpatialProfile::set_coordinate(const ::std::string& value) {
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SpatialProfile.coordinate)
}
#if LANG_CXX11
inline void SpatialProfile::set_coordinate(::std::string&& value) {
  
  coordinate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SpatialProfile.coordinate)
}
#endif
inline void SpatialProfile::set_coordinate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SpatialProfile.coordinate)
}
inline void SpatialProfile::set_coordinate(const char* value, size_t size) {
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SpatialProfile.coordinate)
}
inline ::std::string* SpatialProfile::mutable_coordinate() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SpatialProfile.coordinate)
  return coordinate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpatialProfile::release_coordinate() {
  // @@protoc_insertion_point(field_release:CARTA.SpatialProfile.coordinate)
  
  return coordinate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpatialProfile::set_allocated_coordinate(::std::string* coordinate) {
  if (coordinate != NULL) {
    
  } else {
    
  }
  coordinate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coordinate);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SpatialProfile.coordinate)
}

// sfixed32 mip = 5;
inline void SpatialProfile::clear_mip() {
  mip_ = 0;
}
inline ::google::protobuf::int32 SpatialProfile::mip() const {
  // @@protoc_insertion_point(field_get:CARTA.SpatialProfile.mip)
  return mip_;
}
inline void SpatialProfile::set_mip(::google::protobuf::int32 value) {
  
  mip_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SpatialProfile.mip)
}

// -------------------------------------------------------------------

// SpectralProfile

// string coordinate = 1;
inline void SpectralProfile::clear_coordinate() {
  coordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpectralProfile::coordinate() const {
  // @@protoc_insertion_point(field_get:CARTA.SpectralProfile.coordinate)
  return coordinate_.GetNoArena();
}
inline void SpectralProfile::set_coordinate(const ::std::string& value) {
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SpectralProfile.coordinate)
}
#if LANG_CXX11
inline void SpectralProfile::set_coordinate(::std::string&& value) {
  
  coordinate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SpectralProfile.coordinate)
}
#endif
inline void SpectralProfile::set_coordinate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SpectralProfile.coordinate)
}
inline void SpectralProfile::set_coordinate(const char* value, size_t size) {
  
  coordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SpectralProfile.coordinate)
}
inline ::std::string* SpectralProfile::mutable_coordinate() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SpectralProfile.coordinate)
  return coordinate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpectralProfile::release_coordinate() {
  // @@protoc_insertion_point(field_release:CARTA.SpectralProfile.coordinate)
  
  return coordinate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpectralProfile::set_allocated_coordinate(::std::string* coordinate) {
  if (coordinate != NULL) {
    
  } else {
    
  }
  coordinate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coordinate);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SpectralProfile.coordinate)
}

// .CARTA.StatsType stats_type = 2;
inline void SpectralProfile::clear_stats_type() {
  stats_type_ = 0;
}
inline ::CARTA::StatsType SpectralProfile::stats_type() const {
  // @@protoc_insertion_point(field_get:CARTA.SpectralProfile.stats_type)
  return static_cast< ::CARTA::StatsType >(stats_type_);
}
inline void SpectralProfile::set_stats_type(::CARTA::StatsType value) {
  
  stats_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.SpectralProfile.stats_type)
}

// bytes raw_values_fp32 = 3;
inline void SpectralProfile::clear_raw_values_fp32() {
  raw_values_fp32_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpectralProfile::raw_values_fp32() const {
  // @@protoc_insertion_point(field_get:CARTA.SpectralProfile.raw_values_fp32)
  return raw_values_fp32_.GetNoArena();
}
inline void SpectralProfile::set_raw_values_fp32(const ::std::string& value) {
  
  raw_values_fp32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SpectralProfile.raw_values_fp32)
}
#if LANG_CXX11
inline void SpectralProfile::set_raw_values_fp32(::std::string&& value) {
  
  raw_values_fp32_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SpectralProfile.raw_values_fp32)
}
#endif
inline void SpectralProfile::set_raw_values_fp32(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_values_fp32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SpectralProfile.raw_values_fp32)
}
inline void SpectralProfile::set_raw_values_fp32(const void* value, size_t size) {
  
  raw_values_fp32_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SpectralProfile.raw_values_fp32)
}
inline ::std::string* SpectralProfile::mutable_raw_values_fp32() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SpectralProfile.raw_values_fp32)
  return raw_values_fp32_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpectralProfile::release_raw_values_fp32() {
  // @@protoc_insertion_point(field_release:CARTA.SpectralProfile.raw_values_fp32)
  
  return raw_values_fp32_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpectralProfile::set_allocated_raw_values_fp32(::std::string* raw_values_fp32) {
  if (raw_values_fp32 != NULL) {
    
  } else {
    
  }
  raw_values_fp32_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_values_fp32);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SpectralProfile.raw_values_fp32)
}

// bytes raw_values_fp64 = 4;
inline void SpectralProfile::clear_raw_values_fp64() {
  raw_values_fp64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpectralProfile::raw_values_fp64() const {
  // @@protoc_insertion_point(field_get:CARTA.SpectralProfile.raw_values_fp64)
  return raw_values_fp64_.GetNoArena();
}
inline void SpectralProfile::set_raw_values_fp64(const ::std::string& value) {
  
  raw_values_fp64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.SpectralProfile.raw_values_fp64)
}
#if LANG_CXX11
inline void SpectralProfile::set_raw_values_fp64(::std::string&& value) {
  
  raw_values_fp64_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.SpectralProfile.raw_values_fp64)
}
#endif
inline void SpectralProfile::set_raw_values_fp64(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_values_fp64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.SpectralProfile.raw_values_fp64)
}
inline void SpectralProfile::set_raw_values_fp64(const void* value, size_t size) {
  
  raw_values_fp64_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.SpectralProfile.raw_values_fp64)
}
inline ::std::string* SpectralProfile::mutable_raw_values_fp64() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.SpectralProfile.raw_values_fp64)
  return raw_values_fp64_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpectralProfile::release_raw_values_fp64() {
  // @@protoc_insertion_point(field_release:CARTA.SpectralProfile.raw_values_fp64)
  
  return raw_values_fp64_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpectralProfile::set_allocated_raw_values_fp64(::std::string* raw_values_fp64) {
  if (raw_values_fp64 != NULL) {
    
  } else {
    
  }
  raw_values_fp64_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_values_fp64);
  // @@protoc_insertion_point(field_set_allocated:CARTA.SpectralProfile.raw_values_fp64)
}

// -------------------------------------------------------------------

// StatisticsValue

// .CARTA.StatsType stats_type = 1;
inline void StatisticsValue::clear_stats_type() {
  stats_type_ = 0;
}
inline ::CARTA::StatsType StatisticsValue::stats_type() const {
  // @@protoc_insertion_point(field_get:CARTA.StatisticsValue.stats_type)
  return static_cast< ::CARTA::StatsType >(stats_type_);
}
inline void StatisticsValue::set_stats_type(::CARTA::StatsType value) {
  
  stats_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.StatisticsValue.stats_type)
}

// double value = 2;
inline void StatisticsValue::clear_value() {
  value_ = 0;
}
inline double StatisticsValue::value() const {
  // @@protoc_insertion_point(field_get:CARTA.StatisticsValue.value)
  return value_;
}
inline void StatisticsValue::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:CARTA.StatisticsValue.value)
}

// -------------------------------------------------------------------

// Histogram

// sfixed32 channel = 1;
inline void Histogram::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 Histogram::channel() const {
  // @@protoc_insertion_point(field_get:CARTA.Histogram.channel)
  return channel_;
}
inline void Histogram::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Histogram.channel)
}

// sfixed32 num_bins = 2;
inline void Histogram::clear_num_bins() {
  num_bins_ = 0;
}
inline ::google::protobuf::int32 Histogram::num_bins() const {
  // @@protoc_insertion_point(field_get:CARTA.Histogram.num_bins)
  return num_bins_;
}
inline void Histogram::set_num_bins(::google::protobuf::int32 value) {
  
  num_bins_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Histogram.num_bins)
}

// double bin_width = 3;
inline void Histogram::clear_bin_width() {
  bin_width_ = 0;
}
inline double Histogram::bin_width() const {
  // @@protoc_insertion_point(field_get:CARTA.Histogram.bin_width)
  return bin_width_;
}
inline void Histogram::set_bin_width(double value) {
  
  bin_width_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Histogram.bin_width)
}

// double first_bin_center = 4;
inline void Histogram::clear_first_bin_center() {
  first_bin_center_ = 0;
}
inline double Histogram::first_bin_center() const {
  // @@protoc_insertion_point(field_get:CARTA.Histogram.first_bin_center)
  return first_bin_center_;
}
inline void Histogram::set_first_bin_center(double value) {
  
  first_bin_center_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Histogram.first_bin_center)
}

// repeated sfixed32 bins = 5;
inline int Histogram::bins_size() const {
  return bins_.size();
}
inline void Histogram::clear_bins() {
  bins_.Clear();
}
inline ::google::protobuf::int32 Histogram::bins(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.Histogram.bins)
  return bins_.Get(index);
}
inline void Histogram::set_bins(int index, ::google::protobuf::int32 value) {
  bins_.Set(index, value);
  // @@protoc_insertion_point(field_set:CARTA.Histogram.bins)
}
inline void Histogram::add_bins(::google::protobuf::int32 value) {
  bins_.Add(value);
  // @@protoc_insertion_point(field_add:CARTA.Histogram.bins)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Histogram::bins() const {
  // @@protoc_insertion_point(field_list:CARTA.Histogram.bins)
  return bins_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Histogram::mutable_bins() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.Histogram.bins)
  return &bins_;
}

// double mean = 6;
inline void Histogram::clear_mean() {
  mean_ = 0;
}
inline double Histogram::mean() const {
  // @@protoc_insertion_point(field_get:CARTA.Histogram.mean)
  return mean_;
}
inline void Histogram::set_mean(double value) {
  
  mean_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Histogram.mean)
}

// double std_dev = 7;
inline void Histogram::clear_std_dev() {
  std_dev_ = 0;
}
inline double Histogram::std_dev() const {
  // @@protoc_insertion_point(field_get:CARTA.Histogram.std_dev)
  return std_dev_;
}
inline void Histogram::set_std_dev(double value) {
  
  std_dev_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Histogram.std_dev)
}

// -------------------------------------------------------------------

// RegionInfo

// .CARTA.RegionType region_type = 1;
inline void RegionInfo::clear_region_type() {
  region_type_ = 0;
}
inline ::CARTA::RegionType RegionInfo::region_type() const {
  // @@protoc_insertion_point(field_get:CARTA.RegionInfo.region_type)
  return static_cast< ::CARTA::RegionType >(region_type_);
}
inline void RegionInfo::set_region_type(::CARTA::RegionType value) {
  
  region_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RegionInfo.region_type)
}

// repeated .CARTA.Point control_points = 2;
inline int RegionInfo::control_points_size() const {
  return control_points_.size();
}
inline void RegionInfo::clear_control_points() {
  control_points_.Clear();
}
inline ::CARTA::Point* RegionInfo::mutable_control_points(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.RegionInfo.control_points)
  return control_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::Point >*
RegionInfo::mutable_control_points() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.RegionInfo.control_points)
  return &control_points_;
}
inline const ::CARTA::Point& RegionInfo::control_points(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.RegionInfo.control_points)
  return control_points_.Get(index);
}
inline ::CARTA::Point* RegionInfo::add_control_points() {
  // @@protoc_insertion_point(field_add:CARTA.RegionInfo.control_points)
  return control_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::Point >&
RegionInfo::control_points() const {
  // @@protoc_insertion_point(field_list:CARTA.RegionInfo.control_points)
  return control_points_;
}

// float rotation = 3;
inline void RegionInfo::clear_rotation() {
  rotation_ = 0;
}
inline float RegionInfo::rotation() const {
  // @@protoc_insertion_point(field_get:CARTA.RegionInfo.rotation)
  return rotation_;
}
inline void RegionInfo::set_rotation(float value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RegionInfo.rotation)
}

// -------------------------------------------------------------------

// RegionStyle

// string name = 1;
inline void RegionStyle::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegionStyle::name() const {
  // @@protoc_insertion_point(field_get:CARTA.RegionStyle.name)
  return name_.GetNoArena();
}
inline void RegionStyle::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.RegionStyle.name)
}
#if LANG_CXX11
inline void RegionStyle::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.RegionStyle.name)
}
#endif
inline void RegionStyle::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.RegionStyle.name)
}
inline void RegionStyle::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.RegionStyle.name)
}
inline ::std::string* RegionStyle::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.RegionStyle.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegionStyle::release_name() {
  // @@protoc_insertion_point(field_release:CARTA.RegionStyle.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegionStyle::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CARTA.RegionStyle.name)
}

// string color = 2;
inline void RegionStyle::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegionStyle::color() const {
  // @@protoc_insertion_point(field_get:CARTA.RegionStyle.color)
  return color_.GetNoArena();
}
inline void RegionStyle::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.RegionStyle.color)
}
#if LANG_CXX11
inline void RegionStyle::set_color(::std::string&& value) {
  
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.RegionStyle.color)
}
#endif
inline void RegionStyle::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.RegionStyle.color)
}
inline void RegionStyle::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.RegionStyle.color)
}
inline ::std::string* RegionStyle::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.RegionStyle.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegionStyle::release_color() {
  // @@protoc_insertion_point(field_release:CARTA.RegionStyle.color)
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegionStyle::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:CARTA.RegionStyle.color)
}

// sfixed32 line_width = 3;
inline void RegionStyle::clear_line_width() {
  line_width_ = 0;
}
inline ::google::protobuf::int32 RegionStyle::line_width() const {
  // @@protoc_insertion_point(field_get:CARTA.RegionStyle.line_width)
  return line_width_;
}
inline void RegionStyle::set_line_width(::google::protobuf::int32 value) {
  
  line_width_ = value;
  // @@protoc_insertion_point(field_set:CARTA.RegionStyle.line_width)
}

// repeated sfixed32 dash_list = 4;
inline int RegionStyle::dash_list_size() const {
  return dash_list_.size();
}
inline void RegionStyle::clear_dash_list() {
  dash_list_.Clear();
}
inline ::google::protobuf::int32 RegionStyle::dash_list(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.RegionStyle.dash_list)
  return dash_list_.Get(index);
}
inline void RegionStyle::set_dash_list(int index, ::google::protobuf::int32 value) {
  dash_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:CARTA.RegionStyle.dash_list)
}
inline void RegionStyle::add_dash_list(::google::protobuf::int32 value) {
  dash_list_.Add(value);
  // @@protoc_insertion_point(field_add:CARTA.RegionStyle.dash_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RegionStyle::dash_list() const {
  // @@protoc_insertion_point(field_list:CARTA.RegionStyle.dash_list)
  return dash_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RegionStyle::mutable_dash_list() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.RegionStyle.dash_list)
  return &dash_list_;
}

// -------------------------------------------------------------------

// CatalogFileInfo

// string name = 1;
inline void CatalogFileInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogFileInfo::name() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfo.name)
  return name_.GetNoArena();
}
inline void CatalogFileInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogFileInfo.name)
}
#if LANG_CXX11
inline void CatalogFileInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogFileInfo.name)
}
#endif
inline void CatalogFileInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogFileInfo.name)
}
inline void CatalogFileInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogFileInfo.name)
}
inline ::std::string* CatalogFileInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogFileInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogFileInfo::release_name() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogFileInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogFileInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogFileInfo.name)
}

// .CARTA.CatalogFileType type = 2;
inline void CatalogFileInfo::clear_type() {
  type_ = 0;
}
inline ::CARTA::CatalogFileType CatalogFileInfo::type() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfo.type)
  return static_cast< ::CARTA::CatalogFileType >(type_);
}
inline void CatalogFileInfo::set_type(::CARTA::CatalogFileType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFileInfo.type)
}

// sfixed64 file_size = 3;
inline void CatalogFileInfo::clear_file_size() {
  file_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CatalogFileInfo::file_size() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfo.file_size)
  return file_size_;
}
inline void CatalogFileInfo::set_file_size(::google::protobuf::int64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFileInfo.file_size)
}

// string description = 4;
inline void CatalogFileInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogFileInfo::description() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfo.description)
  return description_.GetNoArena();
}
inline void CatalogFileInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogFileInfo.description)
}
#if LANG_CXX11
inline void CatalogFileInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogFileInfo.description)
}
#endif
inline void CatalogFileInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogFileInfo.description)
}
inline void CatalogFileInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogFileInfo.description)
}
inline ::std::string* CatalogFileInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogFileInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogFileInfo::release_description() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogFileInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogFileInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogFileInfo.description)
}

// repeated .CARTA.Coosys coosys = 5;
inline int CatalogFileInfo::coosys_size() const {
  return coosys_.size();
}
inline void CatalogFileInfo::clear_coosys() {
  coosys_.Clear();
}
inline ::CARTA::Coosys* CatalogFileInfo::mutable_coosys(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogFileInfo.coosys)
  return coosys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CARTA::Coosys >*
CatalogFileInfo::mutable_coosys() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.CatalogFileInfo.coosys)
  return &coosys_;
}
inline const ::CARTA::Coosys& CatalogFileInfo::coosys(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfo.coosys)
  return coosys_.Get(index);
}
inline ::CARTA::Coosys* CatalogFileInfo::add_coosys() {
  // @@protoc_insertion_point(field_add:CARTA.CatalogFileInfo.coosys)
  return coosys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CARTA::Coosys >&
CatalogFileInfo::coosys() const {
  // @@protoc_insertion_point(field_list:CARTA.CatalogFileInfo.coosys)
  return coosys_;
}

// sfixed64 date = 6;
inline void CatalogFileInfo::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CatalogFileInfo::date() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogFileInfo.date)
  return date_;
}
inline void CatalogFileInfo::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogFileInfo.date)
}

// -------------------------------------------------------------------

// Coosys

// string equinox = 1;
inline void Coosys::clear_equinox() {
  equinox_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Coosys::equinox() const {
  // @@protoc_insertion_point(field_get:CARTA.Coosys.equinox)
  return equinox_.GetNoArena();
}
inline void Coosys::set_equinox(const ::std::string& value) {
  
  equinox_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.Coosys.equinox)
}
#if LANG_CXX11
inline void Coosys::set_equinox(::std::string&& value) {
  
  equinox_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.Coosys.equinox)
}
#endif
inline void Coosys::set_equinox(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  equinox_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.Coosys.equinox)
}
inline void Coosys::set_equinox(const char* value, size_t size) {
  
  equinox_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.Coosys.equinox)
}
inline ::std::string* Coosys::mutable_equinox() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.Coosys.equinox)
  return equinox_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Coosys::release_equinox() {
  // @@protoc_insertion_point(field_release:CARTA.Coosys.equinox)
  
  return equinox_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Coosys::set_allocated_equinox(::std::string* equinox) {
  if (equinox != NULL) {
    
  } else {
    
  }
  equinox_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), equinox);
  // @@protoc_insertion_point(field_set_allocated:CARTA.Coosys.equinox)
}

// string epoch = 2;
inline void Coosys::clear_epoch() {
  epoch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Coosys::epoch() const {
  // @@protoc_insertion_point(field_get:CARTA.Coosys.epoch)
  return epoch_.GetNoArena();
}
inline void Coosys::set_epoch(const ::std::string& value) {
  
  epoch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.Coosys.epoch)
}
#if LANG_CXX11
inline void Coosys::set_epoch(::std::string&& value) {
  
  epoch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.Coosys.epoch)
}
#endif
inline void Coosys::set_epoch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  epoch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.Coosys.epoch)
}
inline void Coosys::set_epoch(const char* value, size_t size) {
  
  epoch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.Coosys.epoch)
}
inline ::std::string* Coosys::mutable_epoch() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.Coosys.epoch)
  return epoch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Coosys::release_epoch() {
  // @@protoc_insertion_point(field_release:CARTA.Coosys.epoch)
  
  return epoch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Coosys::set_allocated_epoch(::std::string* epoch) {
  if (epoch != NULL) {
    
  } else {
    
  }
  epoch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), epoch);
  // @@protoc_insertion_point(field_set_allocated:CARTA.Coosys.epoch)
}

// string system = 3;
inline void Coosys::clear_system() {
  system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Coosys::system() const {
  // @@protoc_insertion_point(field_get:CARTA.Coosys.system)
  return system_.GetNoArena();
}
inline void Coosys::set_system(const ::std::string& value) {
  
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.Coosys.system)
}
#if LANG_CXX11
inline void Coosys::set_system(::std::string&& value) {
  
  system_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.Coosys.system)
}
#endif
inline void Coosys::set_system(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.Coosys.system)
}
inline void Coosys::set_system(const char* value, size_t size) {
  
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.Coosys.system)
}
inline ::std::string* Coosys::mutable_system() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.Coosys.system)
  return system_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Coosys::release_system() {
  // @@protoc_insertion_point(field_release:CARTA.Coosys.system)
  
  return system_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Coosys::set_allocated_system(::std::string* system) {
  if (system != NULL) {
    
  } else {
    
  }
  system_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system);
  // @@protoc_insertion_point(field_set_allocated:CARTA.Coosys.system)
}

// -------------------------------------------------------------------

// CatalogHeader

// string name = 1;
inline void CatalogHeader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogHeader::name() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogHeader.name)
  return name_.GetNoArena();
}
inline void CatalogHeader::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogHeader.name)
}
#if LANG_CXX11
inline void CatalogHeader::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogHeader.name)
}
#endif
inline void CatalogHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogHeader.name)
}
inline void CatalogHeader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogHeader.name)
}
inline ::std::string* CatalogHeader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogHeader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogHeader::release_name() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogHeader.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogHeader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogHeader.name)
}

// .CARTA.ColumnType data_type = 2;
inline void CatalogHeader::clear_data_type() {
  data_type_ = 0;
}
inline ::CARTA::ColumnType CatalogHeader::data_type() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogHeader.data_type)
  return static_cast< ::CARTA::ColumnType >(data_type_);
}
inline void CatalogHeader::set_data_type(::CARTA::ColumnType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogHeader.data_type)
}

// sfixed32 column_index = 3;
inline void CatalogHeader::clear_column_index() {
  column_index_ = 0;
}
inline ::google::protobuf::int32 CatalogHeader::column_index() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogHeader.column_index)
  return column_index_;
}
inline void CatalogHeader::set_column_index(::google::protobuf::int32 value) {
  
  column_index_ = value;
  // @@protoc_insertion_point(field_set:CARTA.CatalogHeader.column_index)
}

// string description = 5;
inline void CatalogHeader::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogHeader::description() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogHeader.description)
  return description_.GetNoArena();
}
inline void CatalogHeader::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogHeader.description)
}
#if LANG_CXX11
inline void CatalogHeader::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogHeader.description)
}
#endif
inline void CatalogHeader::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogHeader.description)
}
inline void CatalogHeader::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogHeader.description)
}
inline ::std::string* CatalogHeader::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogHeader.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogHeader::release_description() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogHeader.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogHeader::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogHeader.description)
}

// string units = 6;
inline void CatalogHeader::clear_units() {
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogHeader::units() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogHeader.units)
  return units_.GetNoArena();
}
inline void CatalogHeader::set_units(const ::std::string& value) {
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogHeader.units)
}
#if LANG_CXX11
inline void CatalogHeader::set_units(::std::string&& value) {
  
  units_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogHeader.units)
}
#endif
inline void CatalogHeader::set_units(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogHeader.units)
}
inline void CatalogHeader::set_units(const char* value, size_t size) {
  
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogHeader.units)
}
inline ::std::string* CatalogHeader::mutable_units() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogHeader.units)
  return units_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogHeader::release_units() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogHeader.units)
  
  return units_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogHeader::set_allocated_units(::std::string* units) {
  if (units != NULL) {
    
  } else {
    
  }
  units_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), units);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogHeader.units)
}

// -------------------------------------------------------------------

// ColumnData

// .CARTA.ColumnType data_type = 1;
inline void ColumnData::clear_data_type() {
  data_type_ = 0;
}
inline ::CARTA::ColumnType ColumnData::data_type() const {
  // @@protoc_insertion_point(field_get:CARTA.ColumnData.data_type)
  return static_cast< ::CARTA::ColumnType >(data_type_);
}
inline void ColumnData::set_data_type(::CARTA::ColumnType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ColumnData.data_type)
}

// repeated string string_data = 2;
inline int ColumnData::string_data_size() const {
  return string_data_.size();
}
inline void ColumnData::clear_string_data() {
  string_data_.Clear();
}
inline const ::std::string& ColumnData::string_data(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.ColumnData.string_data)
  return string_data_.Get(index);
}
inline ::std::string* ColumnData::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:CARTA.ColumnData.string_data)
  return string_data_.Mutable(index);
}
inline void ColumnData::set_string_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CARTA.ColumnData.string_data)
  string_data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ColumnData::set_string_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:CARTA.ColumnData.string_data)
  string_data_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ColumnData::set_string_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CARTA.ColumnData.string_data)
}
inline void ColumnData::set_string_data(int index, const char* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CARTA.ColumnData.string_data)
}
inline ::std::string* ColumnData::add_string_data() {
  // @@protoc_insertion_point(field_add_mutable:CARTA.ColumnData.string_data)
  return string_data_.Add();
}
inline void ColumnData::add_string_data(const ::std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CARTA.ColumnData.string_data)
}
#if LANG_CXX11
inline void ColumnData::add_string_data(::std::string&& value) {
  string_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CARTA.ColumnData.string_data)
}
#endif
inline void ColumnData::add_string_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CARTA.ColumnData.string_data)
}
inline void ColumnData::add_string_data(const char* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CARTA.ColumnData.string_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ColumnData::string_data() const {
  // @@protoc_insertion_point(field_list:CARTA.ColumnData.string_data)
  return string_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ColumnData::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.ColumnData.string_data)
  return &string_data_;
}

// bytes binary_data = 3;
inline void ColumnData::clear_binary_data() {
  binary_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ColumnData::binary_data() const {
  // @@protoc_insertion_point(field_get:CARTA.ColumnData.binary_data)
  return binary_data_.GetNoArena();
}
inline void ColumnData::set_binary_data(const ::std::string& value) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ColumnData.binary_data)
}
#if LANG_CXX11
inline void ColumnData::set_binary_data(::std::string&& value) {
  
  binary_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ColumnData.binary_data)
}
#endif
inline void ColumnData::set_binary_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ColumnData.binary_data)
}
inline void ColumnData::set_binary_data(const void* value, size_t size) {
  
  binary_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ColumnData.binary_data)
}
inline ::std::string* ColumnData::mutable_binary_data() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ColumnData.binary_data)
  return binary_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ColumnData::release_binary_data() {
  // @@protoc_insertion_point(field_release:CARTA.ColumnData.binary_data)
  
  return binary_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ColumnData::set_allocated_binary_data(::std::string* binary_data) {
  if (binary_data != NULL) {
    
  } else {
    
  }
  binary_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary_data);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ColumnData.binary_data)
}

// -------------------------------------------------------------------

// FilterConfig

// string column_name = 1;
inline void FilterConfig::clear_column_name() {
  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FilterConfig::column_name() const {
  // @@protoc_insertion_point(field_get:CARTA.FilterConfig.column_name)
  return column_name_.GetNoArena();
}
inline void FilterConfig::set_column_name(const ::std::string& value) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.FilterConfig.column_name)
}
#if LANG_CXX11
inline void FilterConfig::set_column_name(::std::string&& value) {
  
  column_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.FilterConfig.column_name)
}
#endif
inline void FilterConfig::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.FilterConfig.column_name)
}
inline void FilterConfig::set_column_name(const char* value, size_t size) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.FilterConfig.column_name)
}
inline ::std::string* FilterConfig::mutable_column_name() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.FilterConfig.column_name)
  return column_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilterConfig::release_column_name() {
  // @@protoc_insertion_point(field_release:CARTA.FilterConfig.column_name)
  
  return column_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterConfig::set_allocated_column_name(::std::string* column_name) {
  if (column_name != NULL) {
    
  } else {
    
  }
  column_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_name);
  // @@protoc_insertion_point(field_set_allocated:CARTA.FilterConfig.column_name)
}

// .CARTA.ComparisonOperator comparison_operator = 2;
inline void FilterConfig::clear_comparison_operator() {
  comparison_operator_ = 0;
}
inline ::CARTA::ComparisonOperator FilterConfig::comparison_operator() const {
  // @@protoc_insertion_point(field_get:CARTA.FilterConfig.comparison_operator)
  return static_cast< ::CARTA::ComparisonOperator >(comparison_operator_);
}
inline void FilterConfig::set_comparison_operator(::CARTA::ComparisonOperator value) {
  
  comparison_operator_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FilterConfig.comparison_operator)
}

// double value = 3;
inline void FilterConfig::clear_value() {
  value_ = 0;
}
inline double FilterConfig::value() const {
  // @@protoc_insertion_point(field_get:CARTA.FilterConfig.value)
  return value_;
}
inline void FilterConfig::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FilterConfig.value)
}

// double secondary_value = 4;
inline void FilterConfig::clear_secondary_value() {
  secondary_value_ = 0;
}
inline double FilterConfig::secondary_value() const {
  // @@protoc_insertion_point(field_get:CARTA.FilterConfig.secondary_value)
  return secondary_value_;
}
inline void FilterConfig::set_secondary_value(double value) {
  
  secondary_value_ = value;
  // @@protoc_insertion_point(field_set:CARTA.FilterConfig.secondary_value)
}

// string sub_string = 5;
inline void FilterConfig::clear_sub_string() {
  sub_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FilterConfig::sub_string() const {
  // @@protoc_insertion_point(field_get:CARTA.FilterConfig.sub_string)
  return sub_string_.GetNoArena();
}
inline void FilterConfig::set_sub_string(const ::std::string& value) {
  
  sub_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.FilterConfig.sub_string)
}
#if LANG_CXX11
inline void FilterConfig::set_sub_string(::std::string&& value) {
  
  sub_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.FilterConfig.sub_string)
}
#endif
inline void FilterConfig::set_sub_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sub_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.FilterConfig.sub_string)
}
inline void FilterConfig::set_sub_string(const char* value, size_t size) {
  
  sub_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.FilterConfig.sub_string)
}
inline ::std::string* FilterConfig::mutable_sub_string() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.FilterConfig.sub_string)
  return sub_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilterConfig::release_sub_string() {
  // @@protoc_insertion_point(field_release:CARTA.FilterConfig.sub_string)
  
  return sub_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterConfig::set_allocated_sub_string(::std::string* sub_string) {
  if (sub_string != NULL) {
    
  } else {
    
  }
  sub_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_string);
  // @@protoc_insertion_point(field_set_allocated:CARTA.FilterConfig.sub_string)
}

// -------------------------------------------------------------------

// CatalogImageBounds

// string x_column_name = 1;
inline void CatalogImageBounds::clear_x_column_name() {
  x_column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogImageBounds::x_column_name() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogImageBounds.x_column_name)
  return x_column_name_.GetNoArena();
}
inline void CatalogImageBounds::set_x_column_name(const ::std::string& value) {
  
  x_column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogImageBounds.x_column_name)
}
#if LANG_CXX11
inline void CatalogImageBounds::set_x_column_name(::std::string&& value) {
  
  x_column_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogImageBounds.x_column_name)
}
#endif
inline void CatalogImageBounds::set_x_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  x_column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogImageBounds.x_column_name)
}
inline void CatalogImageBounds::set_x_column_name(const char* value, size_t size) {
  
  x_column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogImageBounds.x_column_name)
}
inline ::std::string* CatalogImageBounds::mutable_x_column_name() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogImageBounds.x_column_name)
  return x_column_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogImageBounds::release_x_column_name() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogImageBounds.x_column_name)
  
  return x_column_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogImageBounds::set_allocated_x_column_name(::std::string* x_column_name) {
  if (x_column_name != NULL) {
    
  } else {
    
  }
  x_column_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x_column_name);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogImageBounds.x_column_name)
}

// string y_column_name = 2;
inline void CatalogImageBounds::clear_y_column_name() {
  y_column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatalogImageBounds::y_column_name() const {
  // @@protoc_insertion_point(field_get:CARTA.CatalogImageBounds.y_column_name)
  return y_column_name_.GetNoArena();
}
inline void CatalogImageBounds::set_y_column_name(const ::std::string& value) {
  
  y_column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.CatalogImageBounds.y_column_name)
}
#if LANG_CXX11
inline void CatalogImageBounds::set_y_column_name(::std::string&& value) {
  
  y_column_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.CatalogImageBounds.y_column_name)
}
#endif
inline void CatalogImageBounds::set_y_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  y_column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.CatalogImageBounds.y_column_name)
}
inline void CatalogImageBounds::set_y_column_name(const char* value, size_t size) {
  
  y_column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.CatalogImageBounds.y_column_name)
}
inline ::std::string* CatalogImageBounds::mutable_y_column_name() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogImageBounds.y_column_name)
  return y_column_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatalogImageBounds::release_y_column_name() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogImageBounds.y_column_name)
  
  return y_column_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatalogImageBounds::set_allocated_y_column_name(::std::string* y_column_name) {
  if (y_column_name != NULL) {
    
  } else {
    
  }
  y_column_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y_column_name);
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogImageBounds.y_column_name)
}

// .CARTA.ImageBounds image_bounds = 3;
inline bool CatalogImageBounds::has_image_bounds() const {
  return this != internal_default_instance() && image_bounds_ != NULL;
}
inline void CatalogImageBounds::clear_image_bounds() {
  if (GetArenaNoVirtual() == NULL && image_bounds_ != NULL) {
    delete image_bounds_;
  }
  image_bounds_ = NULL;
}
inline const ::CARTA::ImageBounds& CatalogImageBounds::_internal_image_bounds() const {
  return *image_bounds_;
}
inline const ::CARTA::ImageBounds& CatalogImageBounds::image_bounds() const {
  const ::CARTA::ImageBounds* p = image_bounds_;
  // @@protoc_insertion_point(field_get:CARTA.CatalogImageBounds.image_bounds)
  return p != NULL ? *p : *reinterpret_cast<const ::CARTA::ImageBounds*>(
      &::CARTA::_ImageBounds_default_instance_);
}
inline ::CARTA::ImageBounds* CatalogImageBounds::release_image_bounds() {
  // @@protoc_insertion_point(field_release:CARTA.CatalogImageBounds.image_bounds)
  
  ::CARTA::ImageBounds* temp = image_bounds_;
  image_bounds_ = NULL;
  return temp;
}
inline ::CARTA::ImageBounds* CatalogImageBounds::mutable_image_bounds() {
  
  if (image_bounds_ == NULL) {
    auto* p = CreateMaybeMessage<::CARTA::ImageBounds>(GetArenaNoVirtual());
    image_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CARTA.CatalogImageBounds.image_bounds)
  return image_bounds_;
}
inline void CatalogImageBounds::set_allocated_image_bounds(::CARTA::ImageBounds* image_bounds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_bounds_;
  }
  if (image_bounds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image_bounds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image_bounds, submessage_arena);
    }
    
  } else {
    
  }
  image_bounds_ = image_bounds;
  // @@protoc_insertion_point(field_set_allocated:CARTA.CatalogImageBounds.image_bounds)
}

// -------------------------------------------------------------------

// MatchedFrameList

// repeated float frame_numbers = 1;
inline int MatchedFrameList::frame_numbers_size() const {
  return frame_numbers_.size();
}
inline void MatchedFrameList::clear_frame_numbers() {
  frame_numbers_.Clear();
}
inline float MatchedFrameList::frame_numbers(int index) const {
  // @@protoc_insertion_point(field_get:CARTA.MatchedFrameList.frame_numbers)
  return frame_numbers_.Get(index);
}
inline void MatchedFrameList::set_frame_numbers(int index, float value) {
  frame_numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:CARTA.MatchedFrameList.frame_numbers)
}
inline void MatchedFrameList::add_frame_numbers(float value) {
  frame_numbers_.Add(value);
  // @@protoc_insertion_point(field_add:CARTA.MatchedFrameList.frame_numbers)
}
inline const ::google::protobuf::RepeatedField< float >&
MatchedFrameList::frame_numbers() const {
  // @@protoc_insertion_point(field_list:CARTA.MatchedFrameList.frame_numbers)
  return frame_numbers_;
}
inline ::google::protobuf::RepeatedField< float >*
MatchedFrameList::mutable_frame_numbers() {
  // @@protoc_insertion_point(field_mutable_list:CARTA.MatchedFrameList.frame_numbers)
  return &frame_numbers_;
}

// -------------------------------------------------------------------

// Beam

// sfixed32 channel = 1;
inline void Beam::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 Beam::channel() const {
  // @@protoc_insertion_point(field_get:CARTA.Beam.channel)
  return channel_;
}
inline void Beam::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Beam.channel)
}

// sfixed32 stokes = 2;
inline void Beam::clear_stokes() {
  stokes_ = 0;
}
inline ::google::protobuf::int32 Beam::stokes() const {
  // @@protoc_insertion_point(field_get:CARTA.Beam.stokes)
  return stokes_;
}
inline void Beam::set_stokes(::google::protobuf::int32 value) {
  
  stokes_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Beam.stokes)
}

// float major_axis = 3;
inline void Beam::clear_major_axis() {
  major_axis_ = 0;
}
inline float Beam::major_axis() const {
  // @@protoc_insertion_point(field_get:CARTA.Beam.major_axis)
  return major_axis_;
}
inline void Beam::set_major_axis(float value) {
  
  major_axis_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Beam.major_axis)
}

// float minor_axis = 4;
inline void Beam::clear_minor_axis() {
  minor_axis_ = 0;
}
inline float Beam::minor_axis() const {
  // @@protoc_insertion_point(field_get:CARTA.Beam.minor_axis)
  return minor_axis_;
}
inline void Beam::set_minor_axis(float value) {
  
  minor_axis_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Beam.minor_axis)
}

// float pa = 5;
inline void Beam::clear_pa() {
  pa_ = 0;
}
inline float Beam::pa() const {
  // @@protoc_insertion_point(field_get:CARTA.Beam.pa)
  return pa_;
}
inline void Beam::set_pa(float value) {
  
  pa_ = value;
  // @@protoc_insertion_point(field_set:CARTA.Beam.pa)
}

// -------------------------------------------------------------------

// ListProgress

// .CARTA.FileListType file_list_type = 1;
inline void ListProgress::clear_file_list_type() {
  file_list_type_ = 0;
}
inline ::CARTA::FileListType ListProgress::file_list_type() const {
  // @@protoc_insertion_point(field_get:CARTA.ListProgress.file_list_type)
  return static_cast< ::CARTA::FileListType >(file_list_type_);
}
inline void ListProgress::set_file_list_type(::CARTA::FileListType value) {
  
  file_list_type_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ListProgress.file_list_type)
}

// float percentage = 2;
inline void ListProgress::clear_percentage() {
  percentage_ = 0;
}
inline float ListProgress::percentage() const {
  // @@protoc_insertion_point(field_get:CARTA.ListProgress.percentage)
  return percentage_;
}
inline void ListProgress::set_percentage(float value) {
  
  percentage_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ListProgress.percentage)
}

// sfixed32 checked_count = 3;
inline void ListProgress::clear_checked_count() {
  checked_count_ = 0;
}
inline ::google::protobuf::int32 ListProgress::checked_count() const {
  // @@protoc_insertion_point(field_get:CARTA.ListProgress.checked_count)
  return checked_count_;
}
inline void ListProgress::set_checked_count(::google::protobuf::int32 value) {
  
  checked_count_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ListProgress.checked_count)
}

// sfixed32 total_count = 4;
inline void ListProgress::clear_total_count() {
  total_count_ = 0;
}
inline ::google::protobuf::int32 ListProgress::total_count() const {
  // @@protoc_insertion_point(field_get:CARTA.ListProgress.total_count)
  return total_count_;
}
inline void ListProgress::set_total_count(::google::protobuf::int32 value) {
  
  total_count_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ListProgress.total_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_defs_2eproto
