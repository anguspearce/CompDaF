// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scripting.proto

#ifndef PROTOBUF_INCLUDED_scripting_2eproto
#define PROTOBUF_INCLUDED_scripting_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_scripting_2eproto 

namespace protobuf_scripting_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_scripting_2eproto
namespace CARTA {
class ScriptingRequest;
class ScriptingRequestDefaultTypeInternal;
extern ScriptingRequestDefaultTypeInternal _ScriptingRequest_default_instance_;
class ScriptingResponse;
class ScriptingResponseDefaultTypeInternal;
extern ScriptingResponseDefaultTypeInternal _ScriptingResponse_default_instance_;
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> ::CARTA::ScriptingRequest* Arena::CreateMaybeMessage<::CARTA::ScriptingRequest>(Arena*);
template<> ::CARTA::ScriptingResponse* Arena::CreateMaybeMessage<::CARTA::ScriptingResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CARTA {

// ===================================================================

class ScriptingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ScriptingRequest) */ {
 public:
  ScriptingRequest();
  virtual ~ScriptingRequest();

  ScriptingRequest(const ScriptingRequest& from);

  inline ScriptingRequest& operator=(const ScriptingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScriptingRequest(ScriptingRequest&& from) noexcept
    : ScriptingRequest() {
    *this = ::std::move(from);
  }

  inline ScriptingRequest& operator=(ScriptingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScriptingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScriptingRequest* internal_default_instance() {
    return reinterpret_cast<const ScriptingRequest*>(
               &_ScriptingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ScriptingRequest* other);
  friend void swap(ScriptingRequest& a, ScriptingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScriptingRequest* New() const final {
    return CreateMaybeMessage<ScriptingRequest>(NULL);
  }

  ScriptingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScriptingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScriptingRequest& from);
  void MergeFrom(const ScriptingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string target = 2;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  #if LANG_CXX11
  void set_target(::std::string&& value);
  #endif
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);

  // string action = 3;
  void clear_action();
  static const int kActionFieldNumber = 3;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // string parameters = 4;
  void clear_parameters();
  static const int kParametersFieldNumber = 4;
  const ::std::string& parameters() const;
  void set_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_parameters(::std::string&& value);
  #endif
  void set_parameters(const char* value);
  void set_parameters(const char* value, size_t size);
  ::std::string* mutable_parameters();
  ::std::string* release_parameters();
  void set_allocated_parameters(::std::string* parameters);

  // string return_path = 6;
  void clear_return_path();
  static const int kReturnPathFieldNumber = 6;
  const ::std::string& return_path() const;
  void set_return_path(const ::std::string& value);
  #if LANG_CXX11
  void set_return_path(::std::string&& value);
  #endif
  void set_return_path(const char* value);
  void set_return_path(const char* value, size_t size);
  ::std::string* mutable_return_path();
  ::std::string* release_return_path();
  void set_allocated_return_path(::std::string* return_path);

  // sfixed32 scripting_request_id = 1;
  void clear_scripting_request_id();
  static const int kScriptingRequestIdFieldNumber = 1;
  ::google::protobuf::int32 scripting_request_id() const;
  void set_scripting_request_id(::google::protobuf::int32 value);

  // bool async = 5;
  void clear_async();
  static const int kAsyncFieldNumber = 5;
  bool async() const;
  void set_async(bool value);

  // @@protoc_insertion_point(class_scope:CARTA.ScriptingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::google::protobuf::internal::ArenaStringPtr parameters_;
  ::google::protobuf::internal::ArenaStringPtr return_path_;
  ::google::protobuf::int32 scripting_request_id_;
  bool async_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_scripting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScriptingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CARTA.ScriptingResponse) */ {
 public:
  ScriptingResponse();
  virtual ~ScriptingResponse();

  ScriptingResponse(const ScriptingResponse& from);

  inline ScriptingResponse& operator=(const ScriptingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScriptingResponse(ScriptingResponse&& from) noexcept
    : ScriptingResponse() {
    *this = ::std::move(from);
  }

  inline ScriptingResponse& operator=(ScriptingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScriptingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScriptingResponse* internal_default_instance() {
    return reinterpret_cast<const ScriptingResponse*>(
               &_ScriptingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ScriptingResponse* other);
  friend void swap(ScriptingResponse& a, ScriptingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScriptingResponse* New() const final {
    return CreateMaybeMessage<ScriptingResponse>(NULL);
  }

  ScriptingResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScriptingResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScriptingResponse& from);
  void MergeFrom(const ScriptingResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string response = 4;
  void clear_response();
  static const int kResponseFieldNumber = 4;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // sfixed32 scripting_request_id = 1;
  void clear_scripting_request_id();
  static const int kScriptingRequestIdFieldNumber = 1;
  ::google::protobuf::int32 scripting_request_id() const;
  void set_scripting_request_id(::google::protobuf::int32 value);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:CARTA.ScriptingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  ::google::protobuf::int32 scripting_request_id_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_scripting_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScriptingRequest

// sfixed32 scripting_request_id = 1;
inline void ScriptingRequest::clear_scripting_request_id() {
  scripting_request_id_ = 0;
}
inline ::google::protobuf::int32 ScriptingRequest::scripting_request_id() const {
  // @@protoc_insertion_point(field_get:CARTA.ScriptingRequest.scripting_request_id)
  return scripting_request_id_;
}
inline void ScriptingRequest::set_scripting_request_id(::google::protobuf::int32 value) {
  
  scripting_request_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ScriptingRequest.scripting_request_id)
}

// string target = 2;
inline void ScriptingRequest::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScriptingRequest::target() const {
  // @@protoc_insertion_point(field_get:CARTA.ScriptingRequest.target)
  return target_.GetNoArena();
}
inline void ScriptingRequest::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ScriptingRequest.target)
}
#if LANG_CXX11
inline void ScriptingRequest::set_target(::std::string&& value) {
  
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ScriptingRequest.target)
}
#endif
inline void ScriptingRequest::set_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ScriptingRequest.target)
}
inline void ScriptingRequest::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ScriptingRequest.target)
}
inline ::std::string* ScriptingRequest::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ScriptingRequest.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScriptingRequest::release_target() {
  // @@protoc_insertion_point(field_release:CARTA.ScriptingRequest.target)
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScriptingRequest::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ScriptingRequest.target)
}

// string action = 3;
inline void ScriptingRequest::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScriptingRequest::action() const {
  // @@protoc_insertion_point(field_get:CARTA.ScriptingRequest.action)
  return action_.GetNoArena();
}
inline void ScriptingRequest::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ScriptingRequest.action)
}
#if LANG_CXX11
inline void ScriptingRequest::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ScriptingRequest.action)
}
#endif
inline void ScriptingRequest::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ScriptingRequest.action)
}
inline void ScriptingRequest::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ScriptingRequest.action)
}
inline ::std::string* ScriptingRequest::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ScriptingRequest.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScriptingRequest::release_action() {
  // @@protoc_insertion_point(field_release:CARTA.ScriptingRequest.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScriptingRequest::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ScriptingRequest.action)
}

// string parameters = 4;
inline void ScriptingRequest::clear_parameters() {
  parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScriptingRequest::parameters() const {
  // @@protoc_insertion_point(field_get:CARTA.ScriptingRequest.parameters)
  return parameters_.GetNoArena();
}
inline void ScriptingRequest::set_parameters(const ::std::string& value) {
  
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ScriptingRequest.parameters)
}
#if LANG_CXX11
inline void ScriptingRequest::set_parameters(::std::string&& value) {
  
  parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ScriptingRequest.parameters)
}
#endif
inline void ScriptingRequest::set_parameters(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ScriptingRequest.parameters)
}
inline void ScriptingRequest::set_parameters(const char* value, size_t size) {
  
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ScriptingRequest.parameters)
}
inline ::std::string* ScriptingRequest::mutable_parameters() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ScriptingRequest.parameters)
  return parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScriptingRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:CARTA.ScriptingRequest.parameters)
  
  return parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScriptingRequest::set_allocated_parameters(::std::string* parameters) {
  if (parameters != NULL) {
    
  } else {
    
  }
  parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameters);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ScriptingRequest.parameters)
}

// bool async = 5;
inline void ScriptingRequest::clear_async() {
  async_ = false;
}
inline bool ScriptingRequest::async() const {
  // @@protoc_insertion_point(field_get:CARTA.ScriptingRequest.async)
  return async_;
}
inline void ScriptingRequest::set_async(bool value) {
  
  async_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ScriptingRequest.async)
}

// string return_path = 6;
inline void ScriptingRequest::clear_return_path() {
  return_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScriptingRequest::return_path() const {
  // @@protoc_insertion_point(field_get:CARTA.ScriptingRequest.return_path)
  return return_path_.GetNoArena();
}
inline void ScriptingRequest::set_return_path(const ::std::string& value) {
  
  return_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ScriptingRequest.return_path)
}
#if LANG_CXX11
inline void ScriptingRequest::set_return_path(::std::string&& value) {
  
  return_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ScriptingRequest.return_path)
}
#endif
inline void ScriptingRequest::set_return_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  return_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ScriptingRequest.return_path)
}
inline void ScriptingRequest::set_return_path(const char* value, size_t size) {
  
  return_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ScriptingRequest.return_path)
}
inline ::std::string* ScriptingRequest::mutable_return_path() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ScriptingRequest.return_path)
  return return_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScriptingRequest::release_return_path() {
  // @@protoc_insertion_point(field_release:CARTA.ScriptingRequest.return_path)
  
  return return_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScriptingRequest::set_allocated_return_path(::std::string* return_path) {
  if (return_path != NULL) {
    
  } else {
    
  }
  return_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), return_path);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ScriptingRequest.return_path)
}

// -------------------------------------------------------------------

// ScriptingResponse

// sfixed32 scripting_request_id = 1;
inline void ScriptingResponse::clear_scripting_request_id() {
  scripting_request_id_ = 0;
}
inline ::google::protobuf::int32 ScriptingResponse::scripting_request_id() const {
  // @@protoc_insertion_point(field_get:CARTA.ScriptingResponse.scripting_request_id)
  return scripting_request_id_;
}
inline void ScriptingResponse::set_scripting_request_id(::google::protobuf::int32 value) {
  
  scripting_request_id_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ScriptingResponse.scripting_request_id)
}

// bool success = 2;
inline void ScriptingResponse::clear_success() {
  success_ = false;
}
inline bool ScriptingResponse::success() const {
  // @@protoc_insertion_point(field_get:CARTA.ScriptingResponse.success)
  return success_;
}
inline void ScriptingResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:CARTA.ScriptingResponse.success)
}

// string message = 3;
inline void ScriptingResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScriptingResponse::message() const {
  // @@protoc_insertion_point(field_get:CARTA.ScriptingResponse.message)
  return message_.GetNoArena();
}
inline void ScriptingResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ScriptingResponse.message)
}
#if LANG_CXX11
inline void ScriptingResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ScriptingResponse.message)
}
#endif
inline void ScriptingResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ScriptingResponse.message)
}
inline void ScriptingResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ScriptingResponse.message)
}
inline ::std::string* ScriptingResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ScriptingResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScriptingResponse::release_message() {
  // @@protoc_insertion_point(field_release:CARTA.ScriptingResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScriptingResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ScriptingResponse.message)
}

// string response = 4;
inline void ScriptingResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScriptingResponse::response() const {
  // @@protoc_insertion_point(field_get:CARTA.ScriptingResponse.response)
  return response_.GetNoArena();
}
inline void ScriptingResponse::set_response(const ::std::string& value) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CARTA.ScriptingResponse.response)
}
#if LANG_CXX11
inline void ScriptingResponse::set_response(::std::string&& value) {
  
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CARTA.ScriptingResponse.response)
}
#endif
inline void ScriptingResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CARTA.ScriptingResponse.response)
}
inline void ScriptingResponse::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CARTA.ScriptingResponse.response)
}
inline ::std::string* ScriptingResponse::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:CARTA.ScriptingResponse.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScriptingResponse::release_response() {
  // @@protoc_insertion_point(field_release:CARTA.ScriptingResponse.response)
  
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScriptingResponse::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:CARTA.ScriptingResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CARTA

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_scripting_2eproto
