// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spectral_line_request.proto

#include "spectral_line_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_defs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CatalogHeader;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ColumnData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_defs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DoubleBounds;
}  // namespace protobuf_defs_2eproto
namespace protobuf_spectral_5fline_5frequest_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spectral_5fline_5frequest_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpectralLineResponse_SpectralLineDataEntry_DoNotUse;
}  // namespace protobuf_spectral_5fline_5frequest_2eproto
namespace CARTA {
class SplataloguePingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplataloguePing>
      _instance;
} _SplataloguePing_default_instance_;
class SplataloguePongDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SplataloguePong>
      _instance;
} _SplataloguePong_default_instance_;
class SpectralLineRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpectralLineRequest>
      _instance;
} _SpectralLineRequest_default_instance_;
class SpectralLineResponse_SpectralLineDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpectralLineResponse_SpectralLineDataEntry_DoNotUse>
      _instance;
} _SpectralLineResponse_SpectralLineDataEntry_DoNotUse_default_instance_;
class SpectralLineResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpectralLineResponse>
      _instance;
} _SpectralLineResponse_default_instance_;
}  // namespace CARTA
namespace protobuf_spectral_5fline_5frequest_2eproto {
static void InitDefaultsSplataloguePing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SplataloguePing_default_instance_;
    new (ptr) ::CARTA::SplataloguePing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SplataloguePing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SplataloguePing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSplataloguePing}, {}};

static void InitDefaultsSplataloguePong() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SplataloguePong_default_instance_;
    new (ptr) ::CARTA::SplataloguePong();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SplataloguePong::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SplataloguePong =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSplataloguePong}, {}};

static void InitDefaultsSpectralLineRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SpectralLineRequest_default_instance_;
    new (ptr) ::CARTA::SpectralLineRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SpectralLineRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpectralLineRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpectralLineRequest}, {
      &protobuf_defs_2eproto::scc_info_DoubleBounds.base,}};

static void InitDefaultsSpectralLineResponse_SpectralLineDataEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SpectralLineResponse_SpectralLineDataEntry_DoNotUse_default_instance_;
    new (ptr) ::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse();
  }
  ::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpectralLineResponse_SpectralLineDataEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpectralLineResponse_SpectralLineDataEntry_DoNotUse}, {
      &protobuf_defs_2eproto::scc_info_ColumnData.base,}};

static void InitDefaultsSpectralLineResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CARTA::_SpectralLineResponse_default_instance_;
    new (ptr) ::CARTA::SpectralLineResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CARTA::SpectralLineResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SpectralLineResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSpectralLineResponse}, {
      &protobuf_defs_2eproto::scc_info_CatalogHeader.base,
      &protobuf_spectral_5fline_5frequest_2eproto::scc_info_SpectralLineResponse_SpectralLineDataEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SplataloguePing.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SplataloguePong.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpectralLineRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpectralLineResponse_SpectralLineDataEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpectralLineResponse.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SplataloguePing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SplataloguePong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SplataloguePong, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SplataloguePong, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineRequest, frequency_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineRequest, line_intensity_lower_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineResponse, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineResponse, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineResponse, data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineResponse, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CARTA::SpectralLineResponse, spectral_line_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CARTA::SplataloguePing)},
  { 5, -1, sizeof(::CARTA::SplataloguePong)},
  { 12, -1, sizeof(::CARTA::SpectralLineRequest)},
  { 19, 26, sizeof(::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse)},
  { 28, -1, sizeof(::CARTA::SpectralLineResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SplataloguePing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SplataloguePong_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SpectralLineRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SpectralLineResponse_SpectralLineDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::CARTA::_SpectralLineResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "spectral_line_request.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033spectral_line_request.proto\022\005CARTA\032\nde"
      "fs.proto\"\021\n\017SplataloguePing\"3\n\017Splatalog"
      "uePong\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t"
      "\"g\n\023SpectralLineRequest\022,\n\017frequency_ran"
      "ge\030\001 \001(\0132\023.CARTA.DoubleBounds\022\"\n\032line_in"
      "tensity_lower_limit\030\002 \001(\001\"\215\002\n\024SpectralLi"
      "neResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002"
      " \001(\t\022\021\n\tdata_size\030\003 \001(\017\022%\n\007headers\030\004 \003(\013"
      "2\024.CARTA.CatalogHeader\022M\n\022spectral_line_"
      "data\030\005 \003(\01321.CARTA.SpectralLineResponse."
      "SpectralLineDataEntry\032J\n\025SpectralLineDat"
      "aEntry\022\013\n\003key\030\001 \001(\007\022 \n\005value\030\002 \001(\0132\021.CAR"
      "TA.ColumnData:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spectral_line_request.proto", &protobuf_RegisterTypes);
  ::protobuf_defs_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_spectral_5fline_5frequest_2eproto
namespace CARTA {

// ===================================================================

void SplataloguePing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplataloguePing::SplataloguePing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spectral_5fline_5frequest_2eproto::scc_info_SplataloguePing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SplataloguePing)
}
SplataloguePing::SplataloguePing(const SplataloguePing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CARTA.SplataloguePing)
}

void SplataloguePing::SharedCtor() {
}

SplataloguePing::~SplataloguePing() {
  // @@protoc_insertion_point(destructor:CARTA.SplataloguePing)
  SharedDtor();
}

void SplataloguePing::SharedDtor() {
}

void SplataloguePing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SplataloguePing::descriptor() {
  ::protobuf_spectral_5fline_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spectral_5fline_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SplataloguePing& SplataloguePing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spectral_5fline_5frequest_2eproto::scc_info_SplataloguePing.base);
  return *internal_default_instance();
}


void SplataloguePing::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SplataloguePing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SplataloguePing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SplataloguePing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SplataloguePing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SplataloguePing)
  return false;
#undef DO_
}

void SplataloguePing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SplataloguePing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SplataloguePing)
}

::google::protobuf::uint8* SplataloguePing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SplataloguePing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SplataloguePing)
  return target;
}

size_t SplataloguePing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SplataloguePing)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplataloguePing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SplataloguePing)
  GOOGLE_DCHECK_NE(&from, this);
  const SplataloguePing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplataloguePing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SplataloguePing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SplataloguePing)
    MergeFrom(*source);
  }
}

void SplataloguePing::MergeFrom(const SplataloguePing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SplataloguePing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SplataloguePing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SplataloguePing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplataloguePing::CopyFrom(const SplataloguePing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SplataloguePing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplataloguePing::IsInitialized() const {
  return true;
}

void SplataloguePing::Swap(SplataloguePing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplataloguePing::InternalSwap(SplataloguePing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SplataloguePing::GetMetadata() const {
  protobuf_spectral_5fline_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spectral_5fline_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SplataloguePong::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplataloguePong::kSuccessFieldNumber;
const int SplataloguePong::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplataloguePong::SplataloguePong()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spectral_5fline_5frequest_2eproto::scc_info_SplataloguePong.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SplataloguePong)
}
SplataloguePong::SplataloguePong(const SplataloguePong& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CARTA.SplataloguePong)
}

void SplataloguePong::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

SplataloguePong::~SplataloguePong() {
  // @@protoc_insertion_point(destructor:CARTA.SplataloguePong)
  SharedDtor();
}

void SplataloguePong::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SplataloguePong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SplataloguePong::descriptor() {
  ::protobuf_spectral_5fline_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spectral_5fline_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SplataloguePong& SplataloguePong::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spectral_5fline_5frequest_2eproto::scc_info_SplataloguePong.base);
  return *internal_default_instance();
}


void SplataloguePong::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SplataloguePong)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

bool SplataloguePong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SplataloguePong)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.SplataloguePong.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SplataloguePong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SplataloguePong)
  return false;
#undef DO_
}

void SplataloguePong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SplataloguePong)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SplataloguePong.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SplataloguePong)
}

::google::protobuf::uint8* SplataloguePong::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SplataloguePong)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SplataloguePong.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SplataloguePong)
  return target;
}

size_t SplataloguePong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SplataloguePong)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SplataloguePong::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SplataloguePong)
  GOOGLE_DCHECK_NE(&from, this);
  const SplataloguePong* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplataloguePong>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SplataloguePong)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SplataloguePong)
    MergeFrom(*source);
  }
}

void SplataloguePong::MergeFrom(const SplataloguePong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SplataloguePong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void SplataloguePong::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SplataloguePong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplataloguePong::CopyFrom(const SplataloguePong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SplataloguePong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplataloguePong::IsInitialized() const {
  return true;
}

void SplataloguePong::Swap(SplataloguePong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplataloguePong::InternalSwap(SplataloguePong* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SplataloguePong::GetMetadata() const {
  protobuf_spectral_5fline_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spectral_5fline_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpectralLineRequest::InitAsDefaultInstance() {
  ::CARTA::_SpectralLineRequest_default_instance_._instance.get_mutable()->frequency_range_ = const_cast< ::CARTA::DoubleBounds*>(
      ::CARTA::DoubleBounds::internal_default_instance());
}
void SpectralLineRequest::clear_frequency_range() {
  if (GetArenaNoVirtual() == NULL && frequency_range_ != NULL) {
    delete frequency_range_;
  }
  frequency_range_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpectralLineRequest::kFrequencyRangeFieldNumber;
const int SpectralLineRequest::kLineIntensityLowerLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpectralLineRequest::SpectralLineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spectral_5fline_5frequest_2eproto::scc_info_SpectralLineRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SpectralLineRequest)
}
SpectralLineRequest::SpectralLineRequest(const SpectralLineRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frequency_range()) {
    frequency_range_ = new ::CARTA::DoubleBounds(*from.frequency_range_);
  } else {
    frequency_range_ = NULL;
  }
  line_intensity_lower_limit_ = from.line_intensity_lower_limit_;
  // @@protoc_insertion_point(copy_constructor:CARTA.SpectralLineRequest)
}

void SpectralLineRequest::SharedCtor() {
  ::memset(&frequency_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_intensity_lower_limit_) -
      reinterpret_cast<char*>(&frequency_range_)) + sizeof(line_intensity_lower_limit_));
}

SpectralLineRequest::~SpectralLineRequest() {
  // @@protoc_insertion_point(destructor:CARTA.SpectralLineRequest)
  SharedDtor();
}

void SpectralLineRequest::SharedDtor() {
  if (this != internal_default_instance()) delete frequency_range_;
}

void SpectralLineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpectralLineRequest::descriptor() {
  ::protobuf_spectral_5fline_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spectral_5fline_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpectralLineRequest& SpectralLineRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spectral_5fline_5frequest_2eproto::scc_info_SpectralLineRequest.base);
  return *internal_default_instance();
}


void SpectralLineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SpectralLineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && frequency_range_ != NULL) {
    delete frequency_range_;
  }
  frequency_range_ = NULL;
  line_intensity_lower_limit_ = 0;
  _internal_metadata_.Clear();
}

bool SpectralLineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SpectralLineRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .CARTA.DoubleBounds frequency_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frequency_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double line_intensity_lower_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_intensity_lower_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SpectralLineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SpectralLineRequest)
  return false;
#undef DO_
}

void SpectralLineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SpectralLineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CARTA.DoubleBounds frequency_range = 1;
  if (this->has_frequency_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_frequency_range(), output);
  }

  // double line_intensity_lower_limit = 2;
  if (this->line_intensity_lower_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->line_intensity_lower_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SpectralLineRequest)
}

::google::protobuf::uint8* SpectralLineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SpectralLineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CARTA.DoubleBounds frequency_range = 1;
  if (this->has_frequency_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_frequency_range(), deterministic, target);
  }

  // double line_intensity_lower_limit = 2;
  if (this->line_intensity_lower_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->line_intensity_lower_limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SpectralLineRequest)
  return target;
}

size_t SpectralLineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SpectralLineRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .CARTA.DoubleBounds frequency_range = 1;
  if (this->has_frequency_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frequency_range_);
  }

  // double line_intensity_lower_limit = 2;
  if (this->line_intensity_lower_limit() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpectralLineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SpectralLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpectralLineRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpectralLineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SpectralLineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SpectralLineRequest)
    MergeFrom(*source);
  }
}

void SpectralLineRequest::MergeFrom(const SpectralLineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SpectralLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_frequency_range()) {
    mutable_frequency_range()->::CARTA::DoubleBounds::MergeFrom(from.frequency_range());
  }
  if (from.line_intensity_lower_limit() != 0) {
    set_line_intensity_lower_limit(from.line_intensity_lower_limit());
  }
}

void SpectralLineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SpectralLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectralLineRequest::CopyFrom(const SpectralLineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SpectralLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectralLineRequest::IsInitialized() const {
  return true;
}

void SpectralLineRequest::Swap(SpectralLineRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpectralLineRequest::InternalSwap(SpectralLineRequest* other) {
  using std::swap;
  swap(frequency_range_, other->frequency_range_);
  swap(line_intensity_lower_limit_, other->line_intensity_lower_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpectralLineRequest::GetMetadata() const {
  protobuf_spectral_5fline_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spectral_5fline_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SpectralLineResponse_SpectralLineDataEntry_DoNotUse::SpectralLineResponse_SpectralLineDataEntry_DoNotUse() {}
SpectralLineResponse_SpectralLineDataEntry_DoNotUse::SpectralLineResponse_SpectralLineDataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SpectralLineResponse_SpectralLineDataEntry_DoNotUse::MergeFrom(const SpectralLineResponse_SpectralLineDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SpectralLineResponse_SpectralLineDataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_spectral_5fline_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spectral_5fline_5frequest_2eproto::file_level_metadata[3];
}
void SpectralLineResponse_SpectralLineDataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void SpectralLineResponse::InitAsDefaultInstance() {
}
void SpectralLineResponse::clear_headers() {
  headers_.Clear();
}
void SpectralLineResponse::clear_spectral_line_data() {
  spectral_line_data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpectralLineResponse::kSuccessFieldNumber;
const int SpectralLineResponse::kMessageFieldNumber;
const int SpectralLineResponse::kDataSizeFieldNumber;
const int SpectralLineResponse::kHeadersFieldNumber;
const int SpectralLineResponse::kSpectralLineDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpectralLineResponse::SpectralLineResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spectral_5fline_5frequest_2eproto::scc_info_SpectralLineResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CARTA.SpectralLineResponse)
}
SpectralLineResponse::SpectralLineResponse(const SpectralLineResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spectral_line_data_.MergeFrom(from.spectral_line_data_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_size_) -
    reinterpret_cast<char*>(&success_)) + sizeof(data_size_));
  // @@protoc_insertion_point(copy_constructor:CARTA.SpectralLineResponse)
}

void SpectralLineResponse::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_size_) -
      reinterpret_cast<char*>(&success_)) + sizeof(data_size_));
}

SpectralLineResponse::~SpectralLineResponse() {
  // @@protoc_insertion_point(destructor:CARTA.SpectralLineResponse)
  SharedDtor();
}

void SpectralLineResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpectralLineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpectralLineResponse::descriptor() {
  ::protobuf_spectral_5fline_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spectral_5fline_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpectralLineResponse& SpectralLineResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spectral_5fline_5frequest_2eproto::scc_info_SpectralLineResponse.base);
  return *internal_default_instance();
}


void SpectralLineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CARTA.SpectralLineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  spectral_line_data_.Clear();
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_size_) -
      reinterpret_cast<char*>(&success_)) + sizeof(data_size_));
  _internal_metadata_.Clear();
}

bool SpectralLineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CARTA.SpectralLineResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CARTA.SpectralLineResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed32 data_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CARTA.CatalogHeader headers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<fixed32, .CARTA.ColumnData> spectral_line_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          SpectralLineResponse_SpectralLineDataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SpectralLineResponse_SpectralLineDataEntry_DoNotUse,
              ::google::protobuf::uint32, ::CARTA::ColumnData,
              ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData > > parser(&spectral_line_data_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CARTA.SpectralLineResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CARTA.SpectralLineResponse)
  return false;
#undef DO_
}

void SpectralLineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CARTA.SpectralLineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SpectralLineResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // sfixed32 data_size = 3;
  if (this->data_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->data_size(), output);
  }

  // repeated .CARTA.CatalogHeader headers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->headers(static_cast<int>(i)),
      output);
  }

  // map<fixed32, .CARTA.ColumnData> spectral_line_data = 5;
  if (!this->spectral_line_data().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->spectral_line_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->spectral_line_data().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->spectral_line_data().begin();
          it != this->spectral_line_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SpectralLineResponse_SpectralLineDataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(spectral_line_data_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    } else {
      ::std::unique_ptr<SpectralLineResponse_SpectralLineDataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->spectral_line_data().begin();
          it != this->spectral_line_data().end(); ++it) {
        entry.reset(spectral_line_data_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CARTA.SpectralLineResponse)
}

::google::protobuf::uint8* SpectralLineResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CARTA.SpectralLineResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CARTA.SpectralLineResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // sfixed32 data_size = 3;
  if (this->data_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->data_size(), target);
  }

  // repeated .CARTA.CatalogHeader headers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->headers(static_cast<int>(i)), deterministic, target);
  }

  // map<fixed32, .CARTA.ColumnData> spectral_line_data = 5;
  if (!this->spectral_line_data().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->spectral_line_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->spectral_line_data().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->spectral_line_data().begin();
          it != this->spectral_line_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SpectralLineResponse_SpectralLineDataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(spectral_line_data_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<SpectralLineResponse_SpectralLineDataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
          it = this->spectral_line_data().begin();
          it != this->spectral_line_data().end(); ++it) {
        entry.reset(spectral_line_data_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CARTA.SpectralLineResponse)
  return target;
}

size_t SpectralLineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CARTA.SpectralLineResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .CARTA.CatalogHeader headers = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->headers(static_cast<int>(i)));
    }
  }

  // map<fixed32, .CARTA.ColumnData> spectral_line_data = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->spectral_line_data_size());
  {
    ::std::unique_ptr<SpectralLineResponse_SpectralLineDataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::CARTA::ColumnData >::const_iterator
        it = this->spectral_line_data().begin();
        it != this->spectral_line_data().end(); ++it) {
      entry.reset(spectral_line_data_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // sfixed32 data_size = 3;
  if (this->data_size() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpectralLineResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CARTA.SpectralLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpectralLineResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpectralLineResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CARTA.SpectralLineResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CARTA.SpectralLineResponse)
    MergeFrom(*source);
  }
}

void SpectralLineResponse::MergeFrom(const SpectralLineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CARTA.SpectralLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  spectral_line_data_.MergeFrom(from.spectral_line_data_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.data_size() != 0) {
    set_data_size(from.data_size());
  }
}

void SpectralLineResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CARTA.SpectralLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectralLineResponse::CopyFrom(const SpectralLineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CARTA.SpectralLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectralLineResponse::IsInitialized() const {
  return true;
}

void SpectralLineResponse::Swap(SpectralLineResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpectralLineResponse::InternalSwap(SpectralLineResponse* other) {
  using std::swap;
  CastToBase(&headers_)->InternalSwap(CastToBase(&other->headers_));
  spectral_line_data_.Swap(&other->spectral_line_data_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(data_size_, other->data_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpectralLineResponse::GetMetadata() const {
  protobuf_spectral_5fline_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spectral_5fline_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CARTA
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SplataloguePing* Arena::CreateMaybeMessage< ::CARTA::SplataloguePing >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SplataloguePing >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SplataloguePong* Arena::CreateMaybeMessage< ::CARTA::SplataloguePong >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SplataloguePong >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SpectralLineRequest* Arena::CreateMaybeMessage< ::CARTA::SpectralLineRequest >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SpectralLineRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SpectralLineResponse_SpectralLineDataEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CARTA::SpectralLineResponse* Arena::CreateMaybeMessage< ::CARTA::SpectralLineResponse >(Arena* arena) {
  return Arena::CreateInternal< ::CARTA::SpectralLineResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
